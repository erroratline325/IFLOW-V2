using MvcAppV2.Models;
using OfficeOpenXml.ConditionalFormatting;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Web.Mvc;
using System.Web.UI.WebControls;
using static MvcAppV2.Models.NoCounterModel.NoProductionModel;


[MvcAppV2.FilterConfig.UserSessionActionFilter]
public class FinanceController : Controller
{
    string PathSource = System.Configuration.ConfigurationManager.AppSettings["SourceFile"];
    string IpSMtp_ = System.Configuration.ConfigurationManager.AppSettings["IpSMtp"];
    string PortSmtp_ = System.Configuration.ConfigurationManager.AppSettings["PortSmtp"];
    string PathSource2 = System.Configuration.ConfigurationManager.AppSettings["logfilelocation"];

    List<JobInstruction> viewPosting = new List<JobInstruction>();
    public ActionResult ManageFin(string set, string ProductName, string LogTagNo)
    {
        ViewBag.IsDepart = @Session["Department"];
        ViewBag.IsRole = @Session["Role"];
        var IdentityName = @Session["Fullname"];

        if (set == "search")
        {
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            {
                cn.Open();
                int _bil = 1;
                //SqlCommand command = new SqlCommand("SELECT Id, Customer_Name, ProductName, Status, JobType, JobClass, Frequency, JobSheetNo FROM [IflowSeed].[dbo].[JobInstruction] WHERE Status = 'FINANCE' ORDER BY Customer_Name", cn);
                SqlCommand command = new SqlCommand("SELECT DISTINCT JobInstruction.Id, JobInstruction.Customer_Name, JobInstruction.ProductName, JobAuditTrailDetail.Status, JobInstruction.JobType, JobInstruction.JobClass, JobInstruction.Frequency, " +
                    "JobInstruction.JobSheetNo, JobAuditTrailDetail.LogTagNo FROM [dbo].[JobInstruction] INNER JOIN JobAuditTrailDetail ON JobInstruction.JobSheetNo=JobAuditTrailDetail.JobSheetNo " +
                    "WHERE JobAuditTrailDetail.Status = 'FINANCE' AND JobAuditTrailDetail.LogTagNo LIKE @LogTagSearch ORDER BY JobInstruction.Customer_Name", cn);

                command.Parameters.AddWithValue("@LogTagSearch", "%" + LogTagNo + "%");

                SqlDataReader reader = command.ExecuteReader();

                while (reader.Read())
                {
                    JobInstruction model = new JobInstruction();
                    {
                        model.Bil = _bil++;
                        if (reader.IsDBNull(0) == false)
                        {
                            model.Id = reader.GetGuid(0);
                        }

                        if (reader.IsDBNull(1) == false)
                        {
                            model.Customer_Name = reader.GetString(1);
                        }
                        if (reader.IsDBNull(2) == false)
                        {
                            model.ProductName = reader.GetString(2);
                        }
                        if (reader.IsDBNull(3) == false)
                        {
                            model.Status = reader.GetString(3);
                        }
                        if (reader.IsDBNull(4) == false)
                        {
                            model.JobType = reader.GetString(4);
                        }
                        if (reader.IsDBNull(5) == false)
                        {
                            model.JobClass = reader.GetString(5);
                        }
                        if (reader.IsDBNull(6) == false)
                        {
                            model.Frequency = reader.GetString(6);
                        }
                        if (reader.IsDBNull(7) == false)
                        {
                            model.JobSheetNo = reader.GetString(7);
                        }
                        if (reader.IsDBNull(8) == false)
                        {
                            model.LogTagNo = reader.GetString(8);
                        }

                    }

                    SqlCommand cmdcheck1 = new SqlCommand("SELECT * FROM BillingMPR WHERE JobSheetNo=@JobSheetNocheck1", cn);
                    cmdcheck1.Parameters.AddWithValue("@JobSheetNocheck1", reader.GetString(8));
                    SqlDataReader rmcheck1 = cmdcheck1.ExecuteReader();

                    if (rmcheck1.HasRows)
                    {
                        //model.MPRAvailable = "Yes";

                        if (rmcheck1.HasRows)
                        {
                            model.MPRAvailable = "Yes";
                        }
                        else
                        {
                            model.MPRAvailable = "No";
                        }


                    }
                    else
                    {
                        model.MPRAvailable = "No";

                    }

                    SqlCommand cmdcheck2 = new SqlCommand("SELECT * FROM BillingMPRMMP WHERE JobSheetNo=@JobSheetNocheck2", cn);
                    cmdcheck2.Parameters.AddWithValue("@JobSheetNocheck2", reader.GetString(8));
                    SqlDataReader rmcheck2 = cmdcheck2.ExecuteReader();

                    if (rmcheck2.HasRows)
                    {
                        //model.MPRAvailable = "Yes";

                        if (rmcheck2.HasRows)
                        {
                            model.MPRMMPAvailable = "Yes";
                        }
                        else
                        {
                            model.MPRMMPAvailable = "No";
                        }


                    }
                    else
                    {
                        model.MPRMMPAvailable = "No";

                    }

                    viewPosting.Add(model);


                }

                foreach (var x in viewPosting)
                {
                    Debug.WriteLine("MPRAvailable : " + x.MPRAvailable);
                    Debug.WriteLine("MPRMMPAvailable : " + x.MPRMMPAvailable);

                }

                cn.Close();
            }

        }
        else
        {
            //ALL firt masuk
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            {
                cn.Open();
                int _bil = 1;
                //SqlCommand command = new SqlCommand("SELECT Id, Customer_Name, ProductName, Status, JobType, JobClass, Frequency, JobSheetNo FROM [IflowSeed].[dbo].[JobInstruction] WHERE Status = 'FINANCE' ORDER BY Customer_Name", cn);
                SqlCommand command = new SqlCommand("SELECT DISTINCT JobInstruction.Id, JobInstruction.Customer_Name, JobInstruction.ProductName, JobAuditTrailDetail.Status, JobInstruction.JobType, JobInstruction.JobClass, JobInstruction.Frequency, " +
                    "JobInstruction.JobSheetNo, JobAuditTrailDetail.LogTagNo FROM [dbo].[JobInstruction] INNER JOIN JobAuditTrailDetail ON JobInstruction.JobSheetNo=JobAuditTrailDetail.JobSheetNo " +
                    "WHERE JobAuditTrailDetail.Status = 'FINANCE' ORDER BY JobInstruction.Customer_Name", cn);

                SqlDataReader reader = command.ExecuteReader();

                while (reader.Read())
                {
                    JobInstruction model = new JobInstruction();
                    {
                        model.Bil = _bil++;
                        if (reader.IsDBNull(0) == false)
                        {
                            model.Id = reader.GetGuid(0);
                        }

                        if (reader.IsDBNull(1) == false)
                        {
                            model.Customer_Name = reader.GetString(1);
                        }
                        if (reader.IsDBNull(2) == false)
                        {
                            model.ProductName = reader.GetString(2);
                        }
                        if (reader.IsDBNull(3) == false)
                        {
                            model.Status = reader.GetString(3);
                        }
                        if (reader.IsDBNull(4) == false)
                        {
                            model.JobType = reader.GetString(4);
                        }
                        if (reader.IsDBNull(5) == false)
                        {
                            model.JobClass = reader.GetString(5);
                        }
                        if (reader.IsDBNull(6) == false)
                        {
                            model.Frequency = reader.GetString(6);
                        }
                        if (reader.IsDBNull(7) == false)
                        {
                            model.JobSheetNo = reader.GetString(7);
                        }
                        if (reader.IsDBNull(8) == false)
                        {
                            model.LogTagNo = reader.GetString(8);
                        }

                    }

                    SqlCommand cmdcheck1 = new SqlCommand("SELECT * FROM BillingMPR WHERE JobSheetNo=@JobSheetNocheck1", cn);
                    cmdcheck1.Parameters.AddWithValue("@JobSheetNocheck1", reader.GetString(8));
                    SqlDataReader rmcheck1 = cmdcheck1.ExecuteReader();

                    if (rmcheck1.HasRows)
                    {
                        //model.MPRAvailable = "Yes";

                        if (rmcheck1.HasRows)
                        {
                            model.MPRAvailable = "Yes";
                        }
                        else
                        {
                            model.MPRAvailable = "No";
                        }


                    }
                    else
                    {
                        model.MPRAvailable = "No";

                    }

                    SqlCommand cmdcheck2 = new SqlCommand("SELECT * FROM BillingMPRMMP WHERE JobSheetNo=@JobSheetNocheck2", cn);
                    cmdcheck2.Parameters.AddWithValue("@JobSheetNocheck2", reader.GetString(8));
                    SqlDataReader rmcheck2 = cmdcheck2.ExecuteReader();

                    if (rmcheck2.HasRows)
                    {
                        //model.MPRAvailable = "Yes";

                        if (rmcheck2.HasRows)
                        {
                            model.MPRMMPAvailable = "Yes";
                        }
                        else
                        {
                            model.MPRMMPAvailable = "No";
                        }


                    }
                    else
                    {
                        model.MPRMMPAvailable = "No";

                    }

                    viewPosting.Add(model);


                }

                foreach (var x in viewPosting)
                {
                    Debug.WriteLine("MPRAvailable : " + x.MPRAvailable);
                    Debug.WriteLine("MPRMMPAvailable : " + x.MPRMMPAvailable);

                }

                cn.Close();
            }
            //using (SqlCommand command = new SqlCommand("", cn))
            //{
            //    int _bil = 1;
            //    cn.Open();
            //    command.CommandText = @"SELECT Id, Customer_Name, ProductName, Status, JobType, JobClass, 
            //                                   Frequency                                   
            //                            FROM [IflowSeed].[dbo].[JobInstruction]
            //                            WHERE Status = 'FINANCE'
            //                            ORDER BY Customer_Name";
            //    var reader = command.ExecuteReader();
            //    while (reader.Read())
            //    {
            //        JobInstruction model = new JobInstruction();
            //        {
            //            model.Bil = _bil++;
            //            if (reader.IsDBNull(0) == false)
            //            {
            //                model.Id = reader.GetGuid(0);
            //            }

            //            if (reader.IsDBNull(1) == false)
            //            {
            //                model.Customer_Name = reader.GetString(1);
            //            }
            //            if (reader.IsDBNull(2) == false)
            //            {
            //                model.ProductName = reader.GetString(2);
            //            }
            //            if (reader.IsDBNull(3) == false)
            //            {
            //                model.Status = reader.GetString(3);
            //            }
            //            if (reader.IsDBNull(4) == false)
            //            {
            //                model.JobType = reader.GetString(4);
            //            }
            //            if (reader.IsDBNull(5) == false)
            //            {
            //                model.JobClass = reader.GetString(5);
            //            }
            //            if (reader.IsDBNull(6) == false)
            //            {
            //                model.Frequency = reader.GetString(6);
            //            }

            //        }

            //        SqlCommand cmdcheck1 = new SqlCommand("SELECT * FROM TblBilling WHERE JobInstructionId=@JobInstructionIdcheck1");
            //        cmdcheck1.Parameters.AddWithValue("@JobInstructionIdcheck1", reader.GetGuid(0));
            //        SqlDataReader rmcheck1 = cmdcheck1.ExecuteReader();

            //        if(rmcheck1.HasRows)
            //        {
            //            model.MPRAvailable = "Disabled";
            //        }

            //        viewPosting.Add(model);
            //    }
            //    cn.Close();
            //}

            using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            {
                //SqlCommand cmd = new SqlCommand("SELECT * FROM TblBilling WHERE JobInstructionId=@JobInstructionIdcheck", cn2);
                //cmd.Parameters.AddWithValue("@JobInstructionIdcheck", Id);
            }

        }

        return View(viewPosting);

    }

    //public ActionResult ManageFin(string set, string ProductName, string LogTagNo)
    //{
    //    ViewBag.IsDepart = @Session["Department"];
    //    ViewBag.IsRole = @Session["Role"];
    //    var IdentityName = @Session["Fullname"];

    //    if (set == "search")
    //    {

    //        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
    //        using (SqlCommand command = new SqlCommand("", cn))
    //        {
    //            int _bil = 1;
    //            cn.Open();
    //            command.CommandText = @"SELECT DISTINCT JobInstruction.Id, JobInstruction.Customer_Name, JobInstruction.ProductName, JobInstruction.Status, JobInstruction.JobType, JobInstruction.JobClass, JobInstruction.Frequency, JobAuditTrailDetail.LogTagNo
    //                                    FROM  JobInstruction INNER JOIN
    //                                    JobAuditTrailDetail ON JobInstruction.Id = JobAuditTrailDetail.JobAuditTrailId 
    //                                    WHERE JobInstruction.ProductName  LIKE @ProductName AND JobInstruction.Status ='FINANCE'  ";
    //            command.Parameters.AddWithValue("@ProductName", "%" + ProductName + "%");
    //            var reader = command.ExecuteReader();
    //            while (reader.Read())
    //            {

    //                JobInstruction model = new JobInstruction();
    //                {
    //                    List<JobInstruction> viewPosting = new List<JobInstruction>();
    //                    model.Bil = _bil++;

    //                    if (reader.IsDBNull(0) == false)
    //                    {
    //                        model.Id = reader.GetGuid(0);
    //                    }

    //                    if (reader.IsDBNull(1) == false)
    //                    {
    //                        model.Customer_Name = reader.GetString(1);
    //                    }
    //                    if (reader.IsDBNull(2) == false)
    //                    {
    //                        model.ProductName = reader.GetString(2);
    //                    }
    //                    if (reader.IsDBNull(3) == false)
    //                    {
    //                        model.Status = reader.GetString(3);
    //                    }
    //                    if (reader.IsDBNull(4) == false)
    //                    {
    //                        model.JobType = reader.GetString(4);
    //                    }
    //                    if (reader.IsDBNull(5) == false)
    //                    {
    //                        model.JobClass = reader.GetString(5);
    //                    }
    //                    if (reader.IsDBNull(6) == false)
    //                    {
    //                        model.Frequency = reader.GetString(6);
    //                    }
    //                    if (reader.IsDBNull(7) == false)
    //                    {
    //                        model.LogTagNo = reader.GetString(7);
    //                    }

    //                }
    //                viewPosting.Add(model);
    //            }
    //            cn.Close();
    //        }
    //    }
    //    else if (set == "search2")
    //    {

    //        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
    //        using (SqlCommand command = new SqlCommand("", cn))
    //        {
    //            int _bil = 1;
    //            cn.Open();
    //            command.CommandText = @"SELECT DISTINCT JobInstruction.Id, JobInstruction.Customer_Name, JobInstruction.ProductName, JobInstruction.Status, JobInstruction.JobType, JobInstruction.JobClass, JobInstruction.Frequency, JobAuditTrailDetail.LogTagNo
    //                                    FROM  JobInstruction INNER JOIN
    //                                    JobAuditTrailDetail ON JobInstruction.Id = JobAuditTrailDetail.JobAuditTrailId 
    //                                    WHERE JobAuditTrailDetail.LogTagNo  LIKE @LogTagNo AND JobInstruction.Status ='FINANCE'  ";
    //            command.Parameters.AddWithValue("@LogTagNo", "%" + LogTagNo + "%");
    //            var reader = command.ExecuteReader();
    //            while (reader.Read())
    //            {

    //                JobInstruction model = new JobInstruction();
    //                {
    //                    List<JobInstruction> viewPosting = new List<JobInstruction>();
    //                    model.Bil = _bil++;

    //                    if (reader.IsDBNull(0) == false)
    //                    {
    //                        model.Id = reader.GetGuid(0);
    //                    }

    //                    if (reader.IsDBNull(1) == false)
    //                    {
    //                        model.Customer_Name = reader.GetString(1);
    //                    }
    //                    if (reader.IsDBNull(2) == false)
    //                    {
    //                        model.ProductName = reader.GetString(2);
    //                    }
    //                    if (reader.IsDBNull(3) == false)
    //                    {
    //                        model.Status = reader.GetString(3);
    //                    }
    //                    if (reader.IsDBNull(4) == false)
    //                    {
    //                        model.JobType = reader.GetString(4);
    //                    }
    //                    if (reader.IsDBNull(5) == false)
    //                    {
    //                        model.JobClass = reader.GetString(5);
    //                    }
    //                    if (reader.IsDBNull(6) == false)
    //                    {
    //                        model.Frequency = reader.GetString(6);
    //                    }
    //                    if (reader.IsDBNull(7) == false)
    //                    {
    //                        model.LogTagNo = reader.GetString(7);
    //                    }

    //                }
    //                viewPosting.Add(model);
    //            }
    //            cn.Close();
    //        }
    //    }
    //    else
    //    {
    //        //ALL firt masuk
    //        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
    //        using (SqlCommand command = new SqlCommand("", cn))
    //        {
    //            int _bil = 1;
    //            cn.Open();
    //            command.CommandText = @"SELECT DISTINCT JobInstruction.Id, JobInstruction.Customer_Name, JobInstruction.ProductName, JobInstruction.Status, JobInstruction.JobType, JobInstruction.JobClass, JobInstruction.Frequency, JobAuditTrailDetail.LogTagNo,JobInstruction.PrintingDuplex,JobInstruction.Inserting1,JobInstruction.Inserting2,JobInstruction.Inserting3
    //             ,JobInstruction.Inserting4,JobInstruction.BrochureInsert,JobInstruction.MailBelow_5K,JobInstruction.Handling,JobInstruction.PI_Sealing,JobInstruction.PI_Tearing,JobInstruction.PI_Folding,JobInstruction.Sticking,JobInstruction.Labelling,JobInstruction.Matching,JobInstruction.CDArchiving,JobInstruction.Npc,JobInstruction.PI_EnvelopeType,JobInstruction.PI_EnvelopePrice
    //            ,JobInstruction.PI_Paper,JobInstruction.PI_PaperPrice,JobInstruction.SM_PrintingSM,JobInstruction.SM_SM_Material,JobInstruction.SM_MailBelow_5K,JobInstruction.SM_Handling,JobInstruction.SM_Paper,JobInstruction.SM_PaperPrice,JobInstruction.SM_Paper2,JobInstruction.SM_PaperPrice2,JobInstruction.MMP_PrintingDuplex,JobInstruction.MMP_FirstInsert
    //           ,JobInstruction.MMP_SecondInsert,JobInstruction.MMP_InsertingMMP,JobInstruction.MMP_BrochureInsert,JobInstruction.MMP_MailBelow_5K,JobInstruction.MMP_Handling,JobInstruction.MMP_Sealing,JobInstruction.MMP_Tearing,JobInstruction.MMP_Folding,JobInstruction.MMP_Sticking,JobInstruction.MMP_Labelling,JobInstruction.MMP_Matching,JobInstruction.MMP_CDArchiving,JobInstruction.MMP_EnvelopeType,JobInstruction.MMP_EnvelopePrice
    //           ,JobInstruction.MMP_Paper,JobInstruction.MMP_PaperPrice,JobInstruction.DCP_FoldingCharges,JobInstruction.DCP_SupplyPrintLabel,JobInstruction.DCP_PrintingDuplex,JobInstruction.DCP_FirstInsert,JobInstruction.DCP_SecondInsert,JobInstruction.DCP_BrochureInsert,JobInstruction.DCP_MailBelow_5K,JobInstruction.DCP_Handling,JobInstruction.DCP_Sealing,JobInstruction.DCP_Tearing,JobInstruction.DCP_Folding,JobInstruction.DCP_Sticking
    //          ,JobInstruction.DCP_Labelling,JobInstruction.DCP_Matching,JobInstruction.DCP_CDArchiving,JobInstruction.DCP_EnvelopeType,JobInstruction.DCP_EnvelopePrice,JobInstruction.DCP_Paper,JobInstruction.DCP_PaperPrice,JobInstruction.RM_Printing,JobInstruction.RM_Selfmailer,JobInstruction.RM_MailBelow_5K 
    //           ,JobInstruction.RM_Handling,JobInstruction.RM_LabellingRegsterMails,JobInstruction.RM_Paper,JobInstruction.RM_PaperPrice,JobInstruction.PrintingDuplex2,JobInstruction.RM_PaperPrice2,JobInstruction.RM_Paper2,JobInstruction.RT_Franking, JobInstruction.LBPrintingDuplex,JobInstruction.LBInserting1,JobInstruction.LBInserting2,JobInstruction.LBInserting3,JobInstruction.LBInserting4,JobInstruction.LBBrochureInsert,JobInstruction.LBMailBelow_5K,JobInstruction.LBHandling,JobInstruction.LBPI_Sealing,JobInstruction.LBPI_Tearing
    //           ,JobInstruction.LBPI_Folding,JobInstruction.LBSticking,JobInstruction.LBMatching,JobInstruction.LBCDArchiving,JobInstruction.LBNpc,JobInstruction.LBPI_EnvelopeType,JobInstruction.LBPI_EnvelopePrice,JobInstruction.LBPI_Paper,JobInstruction.LBPI_PaperPrice,JobInstruction.LBSM_PrintingSM,JobInstruction.LBSM_SM_Material,JobInstruction.LBSM_MailBelow_5K,JobInstruction.LBSM_Handling,JobInstruction.LBSM_Paper,JobInstruction.LBSM_PaperPrice,JobInstruction.LBSM_PaperPrice2,JobInstruction.LBMMP_PrintingDuplex ,JobInstruction.LBMMP_FirstInsert,JobInstruction.LBMMP_SecondInsert,JobInstruction.LBMMP_InsertingMMP,JobInstruction.LBMMP_BrochureInsert,JobInstruction.LBMMP_MailBelow_5K,JobInstruction.LBMMP_Handling,JobInstruction.LBMMP_Sealing,JobInstruction.LBMMP_Tearing,JobInstruction.LBMMP_Sticking,JobInstruction.LBMMP_Labelling,JobInstruction.LBMMP_Matching,JobInstruction.LBMMP_CDArchiving,JobInstruction.LBMMP_EnvelopeType,JobInstruction.LBMMP_EnvelopePrice,JobInstruction.LBMMP_Paper,JobInstruction.LBMMP_PaperPrice
    //           ,JobInstruction.LBDCP_FoldingCharges,JobInstruction.LBDCP_SupplyPrintLabel,JobInstruction.LBDCP_PrintingDuplex,JobInstruction.LBDCP_FirstInsert,JobInstruction.LBDCP_SecondInsert,JobInstruction.LBDCP_BrochureInsert,JobInstruction.LBDCP_MailBelow_5K,JobInstruction.LBDCP_Handling,JobInstruction.LBDCP_Sealing,JobInstruction.LBDCP_Tearing,JobInstruction.LBDCP_Folding,JobInstruction.LBDCP_Sticking,JobInstruction.LBDCP_Labelling,JobInstruction.LBDCP_Matching,JobInstruction.LBDCP_CDArchiving,JobInstruction.LBDCP_EnvelopeType
    //           ,JobInstruction.LBDCP_EnvelopePrice,JobInstruction.LBDCP_Paper,JobInstruction.LBDCP_PaperPrice,JobInstruction.LBRM_Printing,JobInstruction.LBRM_Printing,JobInstruction.LBRM_Selfmailer,JobInstruction.LBRM_MailBelow_5K,JobInstruction.LBRM_Handling,JobInstruction.LBRM_LabellingRegsterMails,JobInstruction.LBRM_Paper,JobInstruction.LBRM_PaperPrice,JobInstruction.LBPrintingDuplex2,JobInstruction.LBRM_Paper2,JobInstruction.LBRM_PaperPrice2


    //                  FROM  JobInstruction INNER JOIN
    //                                    JobAuditTrailDetail ON JobInstruction.Id = JobAuditTrailDetail.JobAuditTrailId
    //                                     WHERE  JobInstruction.Status= 'FINANCE'
    //                                    EXCEPT

    //     SELECT DISTINCT JobInstruction.Id, JobInstruction.Customer_Name, JobInstruction.ProductName, JobInstruction.Status, JobInstruction.JobType, JobInstruction.JobClass, JobInstruction.Frequency, JobAuditTrailDetail.LogTagNo,JobInstruction.PrintingDuplex,JobInstruction.Inserting1,JobInstruction.Inserting2,JobInstruction.Inserting3
    //    ,JobInstruction.Inserting4,JobInstruction.BrochureInsert,JobInstruction.MailBelow_5K,JobInstruction.Handling,JobInstruction.PI_Sealing,JobInstruction.PI_Tearing,JobInstruction.PI_Folding,JobInstruction.Sticking,JobInstruction.Labelling,JobInstruction.Matching,JobInstruction.CDArchiving,JobInstruction.Npc,JobInstruction.PI_EnvelopeType,JobInstruction.PI_EnvelopePrice
    //    ,JobInstruction.PI_Paper,JobInstruction.PI_PaperPrice,JobInstruction.SM_PrintingSM,JobInstruction.SM_SM_Material,JobInstruction.SM_MailBelow_5K,JobInstruction.SM_Handling,JobInstruction.SM_Paper,JobInstruction.SM_PaperPrice,JobInstruction.SM_Paper2,JobInstruction.SM_PaperPrice2,JobInstruction.MMP_PrintingDuplex,JobInstruction.MMP_FirstInsert
    //    ,JobInstruction.MMP_SecondInsert,JobInstruction.MMP_InsertingMMP,JobInstruction.MMP_BrochureInsert,JobInstruction.MMP_MailBelow_5K,JobInstruction.MMP_Handling,JobInstruction.MMP_Sealing,JobInstruction.MMP_Tearing,JobInstruction.MMP_Folding,JobInstruction.MMP_Sticking,JobInstruction.MMP_Labelling,JobInstruction.MMP_Matching,JobInstruction.MMP_CDArchiving,JobInstruction.MMP_EnvelopeType,JobInstruction.MMP_EnvelopePrice
    //    ,JobInstruction.MMP_Paper,JobInstruction.MMP_PaperPrice,JobInstruction.DCP_FoldingCharges,JobInstruction.DCP_SupplyPrintLabel,JobInstruction.DCP_PrintingDuplex,JobInstruction.DCP_FirstInsert,JobInstruction.DCP_SecondInsert,JobInstruction.DCP_BrochureInsert,JobInstruction.DCP_MailBelow_5K,JobInstruction.DCP_Handling,JobInstruction.DCP_Sealing,JobInstruction.DCP_Tearing,JobInstruction.DCP_Folding,JobInstruction.DCP_Sticking
    //    ,JobInstruction.DCP_Labelling,JobInstruction.DCP_Matching,JobInstruction.DCP_CDArchiving,JobInstruction.DCP_EnvelopeType,JobInstruction.DCP_EnvelopePrice,JobInstruction.DCP_Paper,JobInstruction.DCP_PaperPrice,JobInstruction.RM_Printing,JobInstruction.RM_Selfmailer,JobInstruction.RM_MailBelow_5K
    //   ,JobInstruction.RM_Handling,JobInstruction.RM_LabellingRegsterMails,JobInstruction.RM_Paper,JobInstruction.RM_PaperPrice,JobInstruction.PrintingDuplex2,JobInstruction.RM_PaperPrice2,JobInstruction.RM_Paper2,JobInstruction.RT_Franking, JobInstruction.LBPrintingDuplex,JobInstruction.LBInserting1,JobInstruction.LBInserting2,JobInstruction.LBInserting3,JobInstruction.LBInserting4,JobInstruction.LBBrochureInsert,JobInstruction.LBMailBelow_5K,JobInstruction.LBHandling,JobInstruction.LBPI_Sealing,JobInstruction.LBPI_Tearing
    //   ,JobInstruction.LBPI_Folding,JobInstruction.LBSticking,JobInstruction.LBMatching,JobInstruction.LBCDArchiving,JobInstruction.LBNpc,JobInstruction.LBPI_EnvelopeType,JobInstruction.LBPI_EnvelopePrice,JobInstruction.LBPI_Paper,JobInstruction.LBPI_PaperPrice,JobInstruction.LBSM_PrintingSM,JobInstruction.LBSM_SM_Material,JobInstruction.LBSM_MailBelow_5K,JobInstruction.LBSM_Handling,JobInstruction.LBSM_Paper,JobInstruction.LBSM_PaperPrice,JobInstruction.LBSM_PaperPrice2,JobInstruction.LBMMP_PrintingDuplex
    //   ,JobInstruction.LBMMP_FirstInsert,JobInstruction.LBMMP_SecondInsert,JobInstruction.LBMMP_InsertingMMP,JobInstruction.LBMMP_BrochureInsert,JobInstruction.LBMMP_MailBelow_5K,JobInstruction.LBMMP_Handling,JobInstruction.LBMMP_Sealing,JobInstruction.LBMMP_Tearing,JobInstruction.LBMMP_Sticking,JobInstruction.LBMMP_Labelling,JobInstruction.LBMMP_Matching,JobInstruction.LBMMP_CDArchiving,JobInstruction.LBMMP_EnvelopeType,JobInstruction.LBMMP_EnvelopePrice,JobInstruction.LBMMP_Paper,JobInstruction.LBMMP_PaperPrice       
    //   ,JobInstruction.LBDCP_FoldingCharges,JobInstruction.LBDCP_SupplyPrintLabel,JobInstruction.LBDCP_PrintingDuplex,JobInstruction.LBDCP_FirstInsert,JobInstruction.LBDCP_SecondInsert,JobInstruction.LBDCP_BrochureInsert,JobInstruction.LBDCP_MailBelow_5K,JobInstruction.LBDCP_Handling,JobInstruction.LBDCP_Sealing,JobInstruction.LBDCP_Tearing,JobInstruction.LBDCP_Folding,JobInstruction.LBDCP_Sticking,JobInstruction.LBDCP_Labelling,JobInstruction.LBDCP_Matching,JobInstruction.LBDCP_CDArchiving,JobInstruction.LBDCP_EnvelopeType
    //   ,JobInstruction.LBDCP_EnvelopePrice,JobInstruction.LBDCP_Paper,JobInstruction.LBDCP_PaperPrice,JobInstruction.LBRM_Printing,JobInstruction.LBRM_Printing,JobInstruction.LBRM_Selfmailer,JobInstruction.LBRM_MailBelow_5K,JobInstruction.LBRM_Handling,JobInstruction.LBRM_LabellingRegsterMails,JobInstruction.LBRM_Paper,JobInstruction.LBRM_PaperPrice,JobInstruction.LBPrintingDuplex2,JobInstruction.LBRM_Paper2,JobInstruction.LBRM_PaperPrice2

    //                                    FROM  JobInstruction INNER JOIN

    //                                    JobAuditTrailDetail ON JobInstruction.Id = JobAuditTrailDetail.JobAuditTrailId
    //                                    WHERE  JobInstruction.JobClass='Daily'
    //                                    ORDER BY LogTagNo";
    //            var reader = command.ExecuteReader();
    //            while (reader.Read())
    //            {
    //                JobInstruction model = new JobInstruction();
    //                {
    //                    model.Bil = _bil++;
    //                    if (reader.IsDBNull(0) == false)
    //                    {
    //                        model.Id = reader.GetGuid(0);
    //                    }

    //                    if (reader.IsDBNull(1) == false)
    //                    {
    //                        model.Customer_Name = reader.GetString(1);
    //                    }
    //                    if (reader.IsDBNull(2) == false)
    //                    {
    //                        model.ProductName = reader.GetString(2);
    //                    }
    //                    if (reader.IsDBNull(3) == false)
    //                    {
    //                        model.Status = reader.GetString(3);
    //                    }
    //                    if (reader.IsDBNull(4) == false)
    //                    {
    //                        model.JobType = reader.GetString(4);
    //                    }
    //                    if (reader.IsDBNull(5) == false)
    //                    {
    //                        model.JobClass = reader.GetString(5);
    //                    }
    //                    if (reader.IsDBNull(6) == false)
    //                    {
    //                        model.Frequency = reader.GetString(6);
    //                    }
    //                    if (reader.IsDBNull(7) == false)
    //                    {
    //                        model.LogTagNo = reader.GetString(7);
    //                    }

    //                    if (reader.IsDBNull(8) == false)
    //                    {
    //                        model.PrintingDuplex = reader.GetString(8);
    //                    }
    //                    if (reader.IsDBNull(9) == false)
    //                    {
    //                        model.Inserting1 = reader.GetString(9);
    //                    }
    //                    if (reader.IsDBNull(10) == false)
    //                    {
    //                        model.Inserting2 = reader.GetString(10);
    //                    }
    //                    if (reader.IsDBNull(11) == false)
    //                    {
    //                        model.Inserting3 = reader.GetString(11);
    //                    }

    //                    if (reader.IsDBNull(12) == false)
    //                    {
    //                        model.Inserting4 = reader.GetString(12);
    //                    }
    //                    if (reader.IsDBNull(13) == false)
    //                    {
    //                        model.BrochureInsert = reader.GetString(13);
    //                    }
    //                    if (reader.IsDBNull(14) == false)
    //                    {
    //                        model.MailBelow_5K = reader.GetString(14);
    //                    }
    //                    if (reader.IsDBNull(15) == false)
    //                    {
    //                        model.Handling = reader.GetString(15);
    //                    }
    //                    if (reader.IsDBNull(16) == false)
    //                    {
    //                        model.PI_Sealing = reader.GetString(16);
    //                    }
    //                    if (reader.IsDBNull(16) == false)
    //                    {
    //                        model.PI_Tearing = reader.GetString(16);
    //                    }
    //                    if (reader.IsDBNull(17) == false)
    //                    {
    //                        model.PI_Folding = reader.GetString(17);
    //                    }
    //                    if (reader.IsDBNull(18) == false)
    //                    {
    //                        model.Sticking = reader.GetString(18);
    //                    }
    //                    if (reader.IsDBNull(19) == false)
    //                    {
    //                        model.Labelling = reader.GetString(19);
    //                    }
    //                    if (reader.IsDBNull(20) == false)
    //                    {
    //                        model.Matching = reader.GetString(20);
    //                    }
    //                    if (reader.IsDBNull(21) == false)
    //                    {
    //                        model.CDArchiving = reader.GetString(21);
    //                    }
    //                    if (reader.IsDBNull(22) == false)
    //                    {
    //                        model.Npc = reader.GetString(22);
    //                    }
    //                    if (reader.IsDBNull(23) == false)
    //                    {
    //                        model.PI_EnvelopeType = reader.GetString(23);

    //                    }

    //                    if (reader.IsDBNull(24) == false)
    //                    {
    //                        model.PI_EnvelopePrice = reader.GetString(24);


    //                    }

    //                    if (reader.IsDBNull(25) == false)
    //                    {
    //                        model.PI_Paper = reader.GetString(25);


    //                    }

    //                    if (reader.IsDBNull(26) == false)
    //                    {
    //                        model.PI_PaperPrice = reader.GetString(26);


    //                    }
    //                    if (reader.IsDBNull(27) == false)
    //                    {
    //                        model.SM_PrintingSM = reader.GetString(27);


    //                    }
    //                    if (reader.IsDBNull(28) == false)
    //                    {
    //                        model.SM_SM_Material = reader.GetString(28);


    //                    }
    //                    if (reader.IsDBNull(30) == false)
    //                    {
    //                        model.SM_MailBelow_5K = reader.GetString(30);


    //                    }
    //                    if (reader.IsDBNull(31) == false)
    //                    {
    //                        model.RM_Handling = reader.GetString(31);


    //                    }
    //                    if (reader.IsDBNull(32) == false)
    //                    {
    //                        model.RM_LabellingRegsterMails = reader.GetString(32);


    //                    }
    //                    if (reader.IsDBNull(33) == false)
    //                    {
    //                        model.RM_Paper = reader.GetString(33);


    //                    }
    //                    if (reader.IsDBNull(34) == false)
    //                    {
    //                        model.RM_PaperPrice = reader.GetString(34);


    //                    }
    //                    if (reader.IsDBNull(35) == false)
    //                    {
    //                        model.PrintingDuplex2 = reader.GetString(35);


    //                    }
    //                    if (reader.IsDBNull(36) == false)
    //                    {
    //                        model.RM_PaperPrice2 = reader.GetString(36);


    //                    }

    //                    if (reader.IsDBNull(37) == false)
    //                    {
    //                        model.RT_Franking = reader.GetString(37);


    //                    }
    //                    if (reader.IsDBNull(38) == false)
    //                    {
    //                        model.LBPrintingDuplex = reader.GetString(38);


    //                    }
    //                    if (reader.IsDBNull(39) == false)
    //                    {
    //                        model.LBInserting1 = reader.GetString(39);


    //                    }
    //                    if (reader.IsDBNull(40) == false)
    //                    {
    //                        model.LBInserting2 = reader.GetString(40);


    //                    }
    //                    if (reader.IsDBNull(41) == false)
    //                    {
    //                        model.LBInserting3 = reader.GetString(41);


    //                    }
    //                    if (reader.IsDBNull(42) == false)
    //                    {
    //                        model.LBInserting4 = reader.GetString(42);


    //                    }

    //                    if (reader.IsDBNull(43) == false)
    //                    {
    //                        model.LBBrochureInsert = reader.GetString(43);


    //                    }

    //                    if (reader.IsDBNull(44) == false)
    //                    {
    //                        model.LBMailBelow_5K = reader.GetString(44);


    //                    }
    //                    if (reader.IsDBNull(45) == false)
    //                    {
    //                        model.LBHandling = reader.GetString(45);


    //                    }

    //                    if (reader.IsDBNull(46) == false)
    //                    {
    //                        model.LBPI_Sealing = reader.GetString(46);


    //                    }

    //                    if (reader.IsDBNull(47) == false)
    //                    {
    //                        model.LBPI_Tearing = reader.GetString(47);


    //                    }
    //                    if (reader.IsDBNull(48) == false)
    //                    {
    //                        model.LBPI_Folding = reader.GetString(48);


    //                    }
    //                    if (reader.IsDBNull(49) == false)
    //                    {
    //                        model.LBSticking = reader.GetString(49);


    //                    }
    //                    if (reader.IsDBNull(50) == false)
    //                    {
    //                        model.LBMatching = reader.GetString(50);


    //                    }
    //                    if (reader.IsDBNull(51) == false)
    //                    {
    //                        model.LBNpc = reader.GetString(51);


    //                    }
    //                    if (reader.IsDBNull(52) == false)
    //                    {
    //                        model.LBPI_EnvelopePrice = reader.GetString(52);


    //                    }
    //                    if (reader.IsDBNull(53) == false)
    //                    {
    //                        model.LBPI_Paper = reader.GetString(53);


    //                    }
    //                    if (reader.IsDBNull(54) == false)
    //                    {
    //                        model.LBPI_PaperPrice = reader.GetString(54);


    //                    }

    //                    if (reader.IsDBNull(55) == false)
    //                    {
    //                        model.LBSM_PrintingSM = reader.GetString(55);


    //                    }

    //                    if (reader.IsDBNull(56) == false)
    //                    {
    //                        model.LBSM_SM_Material = reader.GetString(56);


    //                    }
    //                    if (reader.IsDBNull(57) == false)
    //                    {
    //                        model.LBSM_MailBelow_5K = reader.GetString(57);


    //                    }

    //                    if (reader.IsDBNull(58) == false)
    //                    {
    //                        model.LBSM_Handling = reader.GetString(58);


    //                    }
    //                    if (reader.IsDBNull(59) == false)
    //                    {
    //                        model.LBSM_Paper = reader.GetString(59);


    //                    }

    //                    if (reader.IsDBNull(60) == false)
    //                    {
    //                        model.LBSM_PaperPrice = reader.GetString(60);


    //                    }
    //                    if (reader.IsDBNull(61) == false)
    //                    {
    //                        model.LBSM_PaperPrice2 = reader.GetString(61);

    //                    }
    //                    if (reader.IsDBNull(62) == false)
    //                    {
    //                        model.LBMMP_PrintingDuplex = reader.GetString(62);

    //                    }
    //                    if (reader.IsDBNull(63) == false)
    //                    {
    //                        model.LBMMP_FirstInsert = reader.GetString(63);

    //                    }
    //                    if (reader.IsDBNull(64) == false)
    //                    {
    //                        model.LBMMP_SecondInsert = reader.GetString(64);

    //                    }
    //                    if (reader.IsDBNull(65) == false)
    //                    {
    //                        model.LBMMP_InsertingMMP = reader.GetString(65);

    //                    }
    //                    if (reader.IsDBNull(66) == false)
    //                    {
    //                        model.LBMMP_BrochureInsert = reader.GetString(66);

    //                    }
    //                    if (reader.IsDBNull(67) == false)
    //                    {
    //                        model.LBMMP_Handling = reader.GetString(67);

    //                    }
    //                    if (reader.IsDBNull(68) == false)
    //                    {
    //                        model.LBMMP_Sealing = reader.GetString(68);

    //                    }
    //                    if (reader.IsDBNull(69) == false)
    //                    {
    //                        model.LBMMP_Tearing = reader.GetString(69);

    //                    }
    //                    if (reader.IsDBNull(70) == false)
    //                    {
    //                        model.LBMMP_Labelling = reader.GetString(70);

    //                    }
    //                    if (reader.IsDBNull(71) == false)
    //                    {
    //                        model.LBMMP_Matching = reader.GetString(71);

    //                    }
    //                    if (reader.IsDBNull(72) == false)
    //                    {
    //                        model.LBMMP_CDArchiving = reader.GetString(72);

    //                    }

    //                    if (reader.IsDBNull(73) == false)
    //                    {
    //                        model.LBMMP_EnvelopeType = reader.GetString(73);

    //                    }
    //                    if (reader.IsDBNull(74) == false)
    //                    {
    //                        model.LBMMP_EnvelopePrice = reader.GetString(74);

    //                    }
    //                    if (reader.IsDBNull(75) == false)
    //                    {
    //                        model.LBMMP_EnvelopePrice = reader.GetString(75);

    //                    }
    //                    if (reader.IsDBNull(76) == false)
    //                    {
    //                        model.LBMMP_Paper = reader.GetString(76);

    //                    }
    //                    if (reader.IsDBNull(77) == false)
    //                    {
    //                        model.LBMMP_PaperPrice = reader.GetString(77);

    //                    }
    //                    if (reader.IsDBNull(78) == false)
    //                    {
    //                        model.LBDCP_FoldingCharges = reader.GetString(78);

    //                    }
    //                    if (reader.IsDBNull(77) == false)
    //                    {
    //                        model.LBDCP_SupplyPrintLabel = reader.GetString(77);

    //                    }

    //                    if (reader.IsDBNull(79) == false)
    //                    {
    //                        model.LBDCP_PrintingDuplex = reader.GetString(79);

    //                    }
    //                    if (reader.IsDBNull(80) == false)
    //                    {
    //                        model.LBDCP_FirstInsert = reader.GetString(80);

    //                    }
    //                    if (reader.IsDBNull(81) == false)
    //                    {
    //                        model.LBDCP_SecondInsert = reader.GetString(81);

    //                    }
    //                    if (reader.IsDBNull(82) == false)
    //                    {
    //                        model.LBDCP_MailBelow_5K = reader.GetString(82);

    //                    }

    //                    if (reader.IsDBNull(83) == false)
    //                    {
    //                        model.LBDCP_Handling = reader.GetString(83);

    //                    }
    //                    if (reader.IsDBNull(84) == false)
    //                    {
    //                        model.LBDCP_Sealing = reader.GetString(84);

    //                    }
    //                    if (reader.IsDBNull(85) == false)
    //                    {
    //                        model.LBDCP_Tearing = reader.GetString(85);

    //                    }
    //                    if (reader.IsDBNull(86) == false)
    //                    {
    //                        model.LBDCP_Folding = reader.GetString(86);

    //                    }

    //                    if (reader.IsDBNull(87) == false)
    //                    {
    //                        model.LBDCP_Sticking = reader.GetString(87);

    //                    }
    //                    if (reader.IsDBNull(86) == false)
    //                    {
    //                        model.LBDCP_Labelling = reader.GetString(86);

    //                    }
    //                    if (reader.IsDBNull(88) == false)
    //                    {
    //                        model.LBDCP_Matching = reader.GetString(88);

    //                    }
    //                    if (reader.IsDBNull(89) == false)
    //                    {
    //                        model.LBDCP_CDArchiving = reader.GetString(89);

    //                    }

    //                    if (reader.IsDBNull(90) == false)
    //                    {
    //                        model.LBDCP_EnvelopeType = reader.GetString(90);

    //                    }

    //                    if (reader.IsDBNull(91) == false)
    //                    {
    //                        model.LBDCP_EnvelopePrice = reader.GetString(91);

    //                    }
    //                    if (reader.IsDBNull(92) == false)
    //                    {
    //                        model.LBDCP_Paper = reader.GetString(92);

    //                    }

    //                    if (reader.IsDBNull(93) == false)
    //                    {
    //                        model.LBDCP_PaperPrice = reader.GetString(93);

    //                    }

    //                    if (reader.IsDBNull(94) == false)
    //                    {
    //                        model.LBRM_Printing = reader.GetString(94);

    //                    }

    //                    if (reader.IsDBNull(95) == false)
    //                    {
    //                        model.LBRM_Printing = reader.GetString(95);

    //                    }

    //                    if (reader.IsDBNull(96) == false)
    //                    {
    //                        model.LBRM_Selfmailer = reader.GetString(96);

    //                    }

    //                    if (reader.IsDBNull(97) == false)
    //                    {
    //                        model.LBRM_MailBelow_5K = reader.GetString(97);

    //                    }
    //                    if (reader.IsDBNull(98) == false)
    //                    {
    //                        model.LBRM_Handling = reader.GetString(98);

    //                    }
    //                    if (reader.IsDBNull(99) == false)
    //                    {
    //                        model.LBRM_LabellingRegsterMails = reader.GetString(99);

    //                    }
    //                    if (reader.IsDBNull(100) == false)
    //                    {
    //                        model.LBRM_Paper = reader.GetString(100);

    //                    }
    //                    if (reader.IsDBNull(101) == false)
    //                    {
    //                        model.LBRM_PaperPrice = reader.GetString(101);

    //                    }
    //                    if (reader.IsDBNull(102) == false)
    //                    {
    //                        model.LBPrintingDuplex2 = reader.GetString(102);

    //                    }

    //                    if (reader.IsDBNull(103) == false)
    //                    {
    //                        model.LBRM_Paper2 = reader.GetString(103);

    //                    }
    //                    if (reader.IsDBNull(104) == false)
    //                    {
    //                        model.LBRM_PaperPrice2 = reader.GetString(104);

    //                    }
    //                    if (reader.IsDBNull(105) == false)
    //                    {
    //                        model.RM_Paper2 = reader.GetString(105);


    //                    }



    //                }


    //                viewPosting.Add(model);
    //            }
    //            cn.Close();
    //        }
    //    }


    //    return View(viewPosting);

    //}


    public ActionResult ManageBatch(string set, string ProductName, string LogTagNo, string BatchId)
    {
        List<JobBatch> Batch = new List<JobBatch>();

        ViewBag.IsDepart = @Session["Department"];
        ViewBag.IsRole = @Session["Role"];
        var IdentityName = @Session["Fullname"];

        if (set == "search")
        {
            List<JobInstruction> viewPosting = new List<JobInstruction>();

            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            {
                cn.Open();
                int _bil = 1;


                SqlCommand cmd = new SqlCommand("SELECT DISTINCT JobBatch.BatchId, JobAuditTrailDetail.Customer_Name, JobAuditTrailDetail.ProductName, MAX(JobAuditTrailDetail.JobSheetNo) FROM JobBatch INNER JOIN JobAuditTrailDetail ON JobBatch.LogTagNo=JobAuditTrailDetail.LogTagNo WHERE JobBatch.BatchId LIKE @BatchId AND JobBatch.Status IS NULL GROUP BY JobBatch.BatchId, JobAuditTrailDetail.Customer_Name, JobAuditTrailDetail.ProductName", cn);
                cmd.Parameters.AddWithValue("@BatchID", "%"+BatchId+"%");
                SqlDataReader rm = cmd.ExecuteReader();

                while (rm.Read())
                {
                    JobBatch model = new JobBatch();
                    {
                        model.Bil = _bil++;
                        model.BatchId = rm.GetString(0);
                        model.Customer_Name = rm.GetString(1);
                        model.ProductName = rm.GetString(2);
                        model.JobSheetNo = rm.GetString(3);
                    }
                    Batch.Add(model);
                }

                List<CustomerProduct> ProductList = new List<CustomerProduct>();

                SqlCommand cmdProduct = new SqlCommand("SELECT Customer_Name, ProductName FROM CustomerProduct ORDER BY Customer_Name, ProductName ASC", cn);
                SqlDataReader rmProduct = cmdProduct.ExecuteReader();

                while (rmProduct.Read())
                {

                    CustomerProduct modelProduct = new CustomerProduct();
                    {
                        modelProduct.Customer_Name = rmProduct.GetString(0);
                        modelProduct.ProductName = rmProduct.GetString(1);
                    }

                    ProductList.Add(modelProduct);
                }

                ViewBag.ProductList = ProductList;


                cn.Close();

            }
        }
        else
        {
            //ALL firt masuk
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            {
                cn.Open();
                int _bil = 1;


                SqlCommand cmd = new SqlCommand("SELECT DISTINCT JobBatch.BatchId, JobAuditTrailDetail.Customer_Name, JobAuditTrailDetail.ProductName, MAX(JobAuditTrailDetail.JobSheetNo) FROM JobBatch INNER JOIN JobAuditTrailDetail ON JobBatch.LogTagNo=JobAuditTrailDetail.LogTagNo WHERE JobBatch.Status IS NULL GROUP BY JobBatch.BatchId, JobAuditTrailDetail.Customer_Name, JobAuditTrailDetail.ProductName", cn);
                SqlDataReader rm = cmd.ExecuteReader();

                while (rm.Read())
                {
                    JobBatch model = new JobBatch();
                    {
                        model.Bil = _bil++;
                        model.BatchId = rm.GetString(0);
                        model.Customer_Name = rm.GetString(1);
                        model.ProductName = rm.GetString(2);
                        model.JobSheetNo = rm.GetString(3);
                    }
                    Batch.Add(model);
                }

                List<CustomerProduct> ProductList = new List<CustomerProduct>();

                SqlCommand cmdProduct = new SqlCommand("SELECT Customer_Name, ProductName FROM CustomerProduct ORDER BY Customer_Name, ProductName ASC", cn);
                SqlDataReader rmProduct = cmdProduct.ExecuteReader();

                while (rmProduct.Read())
                {

                    CustomerProduct modelProduct = new CustomerProduct();
                    {
                        modelProduct.Customer_Name = rmProduct.GetString(0);
                        modelProduct.ProductName = rmProduct.GetString(1);
                    }

                    ProductList.Add(modelProduct);
                }

                ViewBag.ProductList = ProductList;


                cn.Close();

            }

        }


        return View(Batch);

    }

    //Jobclose
    public ActionResult JobClose(string set, string ProductName, string LogTagNo)
    {
        ViewBag.IsDepart = @Session["Department"];
        ViewBag.IsRole = @Session["Role"];
        var IdentityName = @Session["Fullname"];

        if (set == "search")
        {

            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                int _bil = 1;
                cn.Open();
                command.CommandText = @"SELECT DISTINCT JobInstruction.Id, JobInstruction.Customer_Name, JobInstruction.ProductName, JobInstruction.Status, JobInstruction.JobType, JobInstruction.JobClass, JobInstruction.Frequency, JobAuditTrailDetail.LogTagNo
                                        FROM  JobInstruction INNER JOIN
                                        JobAuditTrailDetail ON JobInstruction.Id = JobAuditTrailDetail.JobAuditTrailId 
                                        WHERE JobInstruction.ProductName  LIKE @ProductName AND JobInstruction.Status ='Close'  ";
                command.Parameters.AddWithValue("@ProductName", "%" + ProductName + "%");
                var reader = command.ExecuteReader();
                while (reader.Read())
                {

                    JobInstruction model = new JobInstruction();
                    {
                        List<JobInstruction> viewPosting = new List<JobInstruction>();
                        model.Bil = _bil++;

                        if (reader.IsDBNull(0) == false)
                        {
                            model.Id = reader.GetGuid(0);
                        }

                        if (reader.IsDBNull(1) == false)
                        {
                            model.Customer_Name = reader.GetString(1);
                        }
                        if (reader.IsDBNull(2) == false)
                        {
                            model.ProductName = reader.GetString(2);
                        }
                        if (reader.IsDBNull(3) == false)
                        {
                            model.Status = reader.GetString(3);
                        }
                        if (reader.IsDBNull(4) == false)
                        {
                            model.JobType = reader.GetString(4);
                        }
                        if (reader.IsDBNull(5) == false)
                        {
                            model.JobClass = reader.GetString(5);
                        }
                        if (reader.IsDBNull(6) == false)
                        {
                            model.Frequency = reader.GetString(6);
                        }
                        if (reader.IsDBNull(7) == false)
                        {
                            model.LogTagNo = reader.GetString(7);
                        }

                    }
                    viewPosting.Add(model);
                }
                cn.Close();
            }
        }
        else
        {
            //ALL firt masuk
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                int _bil = 1;
                cn.Open();
                command.CommandText = @"SELECT DISTINCT JobInstruction.Id, JobInstruction.Customer_Name, JobInstruction.ProductName, JobInstruction.Status, JobInstruction.JobType, JobInstruction.JobClass, JobInstruction.Frequency, JobAuditTrailDetail.LogTagNo
                                        FROM  JobInstruction INNER JOIN
                                        JobAuditTrailDetail ON JobInstruction.Id = JobAuditTrailDetail.JobAuditTrailId
                                        WHERE JobInstruction.Status = 'Close'                                       
                                        ORDER BY LogTagNo";
                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    JobInstruction model = new JobInstruction();
                    {
                        model.Bil = _bil++;
                        if (reader.IsDBNull(0) == false)
                        {
                            model.Id = reader.GetGuid(0);
                        }

                        if (reader.IsDBNull(1) == false)
                        {
                            model.Customer_Name = reader.GetString(1);
                        }
                        if (reader.IsDBNull(2) == false)
                        {
                            model.ProductName = reader.GetString(2);
                        }
                        if (reader.IsDBNull(3) == false)
                        {
                            model.Status = reader.GetString(3);
                        }
                        if (reader.IsDBNull(4) == false)
                        {
                            model.JobType = reader.GetString(4);
                        }
                        if (reader.IsDBNull(5) == false)
                        {
                            model.JobClass = reader.GetString(5);
                        }
                        if (reader.IsDBNull(6) == false)
                        {
                            model.Frequency = reader.GetString(6);
                        }
                        if (reader.IsDBNull(7) == false)
                        {
                            model.LogTagNo = reader.GetString(7);
                        }



                    }
                    viewPosting.Add(model);
                }
                cn.Close();
            }
        }

        return View(viewPosting);

    }



    /// searchlogtag

    public ActionResult LogtagSearch(string set, string LogTagNo)
    {
        ViewBag.IsDepart = @Session["Department"];
        ViewBag.IsRole = @Session["Role"];
        var IdentityName = @Session["Fullname"];

        if (set == "search")
        {
            List<JobAuditTrailDetail> view = new List<JobAuditTrailDetail>();
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                int _bil = 1;
                cn.Open();
                command.CommandText = @"SELECT  [Id],[Customer_Name],[LogTagNo],[ProductName],[AccQty],[ImpQty],[PageQty],[ProcessDate],[TimeProcessIt]     
                                          FROM [IflowSeed].[dbo].[JobAuditTrailDetail]
                                        WHERE LogTagNo  LIKE @LogTagNo  ";
                command.Parameters.AddWithValue("@LogTagNo", "%" + LogTagNo + "%");
                var reader = command.ExecuteReader();
                while (reader.Read())
                {

                    JobAuditTrailDetail model = new JobAuditTrailDetail();
                    {

                        model.Bil = _bil++;

                        if (reader.IsDBNull(0) == false)
                        {
                            model.Id = reader.GetGuid(0);
                            ViewBag.Id = reader.GetGuid(0);
                        }


                        if (reader.IsDBNull(1) == false)
                        {
                            model.Customer_Name = reader.GetString(1);
                            ViewBag.Customer_Name = reader.GetString(1);
                        }

                        if (reader.IsDBNull(2) == false)
                        {
                            model.LogTagNo = reader.GetString(2);
                            ViewBag.LogTagNo = reader.GetString(2);
                        }
                        if (reader.IsDBNull(3) == false)
                        {
                            model.ProductName = reader.GetString(3);
                            ViewBag.ProductName = reader.GetString(3);
                        }
                        if (reader.IsDBNull(4) == false)
                        {
                            model.AccQty = reader.GetString(4);
                            ViewBag.AccQty = reader.GetString(4);
                        }
                        if (reader.IsDBNull(5) == false)
                        {
                            model.ImpQty = reader.GetString(5);
                            ViewBag.ImpQty = reader.GetString(5);
                        }
                        if (reader.IsDBNull(6) == false)
                        {
                            model.PageQty = reader.GetString(6);
                            ViewBag.PageQty = reader.GetString(6);
                        }
                        if (reader.IsDBNull(7) == false)
                        {
                            model.ProcessDate = reader.GetDateTime(7);
                            ViewBag.ProcessDate = reader.GetDateTime(7);
                        }
                        if (reader.IsDBNull(8) == false)
                        {
                            model.TimeProcessIt = reader.GetString(8);
                            ViewBag.TimeProcessIt = reader.GetString(8);
                        }
                    }
                    view.Add(model);
                }
                cn.Close();
            }
        }


        return View(viewPosting);

    }





    //view
    public ActionResult LotagView(string LogTagNo)
    {
        string Department = @Session["Department"].ToString();

        var Id = Session["Id"];
        ViewBag.Id = Id;


        List<JobAuditTrailDetail> viewlog = new List<JobAuditTrailDetail>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil = 1;
            cn.Open();
            command.CommandText = @"SELECT  [Id],[Customer_Name],[LogTagNo],[ProductName],[AccQty],[ImpQty],[PageQty],[ProcessDate],[TimeProcessIt]     
                                          FROM [IflowSeed].[dbo].[JobAuditTrailDetail]
                                        WHERE LogTagNo=@LogTagNo'";
            command.Parameters.AddWithValue("@LogTagNo", LogTagNo);

            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                JobAuditTrailDetail model = new JobAuditTrailDetail();
                {
                    model.Bil = _bil++;

                    if (reader.IsDBNull(0) == false)
                    {
                        model.Id = reader.GetGuid(0);
                        ViewBag.Id = reader.GetGuid(0);
                    }


                    if (reader.IsDBNull(1) == false)
                    {
                        model.Customer_Name = reader.GetString(1);
                        ViewBag.Customer_Name = reader.GetString(1);
                    }

                    if (reader.IsDBNull(2) == false)
                    {
                        model.LogTagNo = reader.GetString(2);
                        ViewBag.LogTagNo = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        model.ProductName = reader.GetString(3);
                        ViewBag.ProductName = reader.GetString(3);
                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        model.AccQty = reader.GetString(4);
                        ViewBag.AccQty = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        model.ImpQty = reader.GetString(5);
                        ViewBag.ImpQty = reader.GetString(5);
                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        model.PageQty = reader.GetString(6);
                        ViewBag.PageQty = reader.GetString(6);
                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        model.ProcessDate = reader.GetDateTime(7);
                        ViewBag.ProcessDate = reader.GetDateTime(7);
                    }
                    if (reader.IsDBNull(8) == false)
                    {
                        model.TimeProcessIt = reader.GetString(8);
                        ViewBag.TimeProcessIt = reader.GetDateTime(8);
                    }

                }
                viewlog.Add(model);
            }
            cn.Close();
            //return Json(new { data = viewFileStore }, JsonRequestBehavior.AllowGet);
            return Json(viewlog);
        }
    }













    List<JobAuditTrailDetail> JobAuditTrailDetail = new List<JobAuditTrailDetail>();
    public ActionResult ViewAT(string ProductName, string LogTagNo, string set, string Id, string Customer_Name)
    {
        var IdentityName = @Session["Fullname"];
        ViewBag.IdentityName = @Session["Fullname"];
        ViewBag.IsDepart = @Session["Department"];
        var IsDepart = @Session["Department"];
        var Role = @Session["Role"];
        var Username = @Session["Username"];
        ViewBag.Username = @Session["Username"];
        Session["Id"] = Id;

        if (!string.IsNullOrEmpty(Id))
        {



            //ALL firt masuk


            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                int _bil = 1;
                cn.Open();
                command.CommandText = @"SELECT DISTINCT JobAuditTrailDetail.Customer_Name, JobAuditTrailDetail.ProductName, JobAuditTrailDetail.LogTagNo
                                      FROM  JobAuditTrailDetail INNER JOIN
                                    JobInstruction ON JobAuditTrailDetail.JobAuditTrailId = JobInstruction.Id										
                                         where JobAuditTrailDetail.Customer_Name=@Customer_Name 
                                       ORDER BY Customer_Name";
                command.Parameters.AddWithValue("@Customer_Name", Customer_Name);
                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    JobAuditTrailDetail model = new JobAuditTrailDetail();
                    {
                        model.Bil = _bil++;

                        if (reader.IsDBNull(0) == false)
                        {
                            model.Customer_Name = reader.GetString(0);
                        }
                        if (reader.IsDBNull(1) == false)
                        {
                            model.ProductName = reader.GetString(1);
                        }

                        if (reader.IsDBNull(2) == false)
                        {
                            model.LogTagNo = reader.GetString(2);
                        }



                    }
                    JobAuditTrailDetail.Add(model);
                }
                cn.Close();
            }

            //using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            //using (SqlCommand command = new SqlCommand("", cn))
            //{
            //    int _bil = 1;
            //    cn.Open();
            //    command.CommandText = @"SELECT DISTINCT Customer_Name, ProductName, LogTagNo,ProgramId, FileId,JobId,JobNameIT,RevStrtDateOn,RevStrtTime,ProcessDate,TimeProcessIt,
            //                            ProcessEnd,AccQty,ImpQty,PageQty,FirstRecord,LastRecord,ProductName,JobType,DateApproveOn,DateApproveTime,Type,DateProcessItOn 
            //                            FROM [IflowSeed].[dbo].[JobAuditTrailDetail]										
            //                            where  Customer_Name=@Customer_Name  ORDER BY Customer_Name";                
            //    command.Parameters.AddWithValue("@Customer_Name", Customer_Name);
            //    var reader = command.ExecuteReader();
            //    while (reader.Read())
            //    {
            //        JobAuditTrailDetail model = new JobAuditTrailDetail();
            //        {
            //            model.Bil = _bil++;

            //            if (reader.IsDBNull(0) == false)
            //            {
            //                model.Customer_Name = reader.GetString(0);
            //            }
            //            if (reader.IsDBNull(1) == false)
            //            {
            //                model.ProductName = reader.GetString(1);
            //            }

            //            if (reader.IsDBNull(2) == false)
            //            {
            //                model.LogTagNo = reader.GetString(2);
            //            }
            //            if (reader.IsDBNull(3) == false)
            //            {
            //                model.ProgramId = reader.GetString(3);
            //            }
            //            if (reader.IsDBNull(4) == false)
            //            {
            //                model.FileId = reader.GetString(4);
            //            }
            //            if (reader.IsDBNull(5) == false)
            //            {
            //                model.JobId = reader.GetString(5);
            //            }
            //            if (reader.IsDBNull(6) == false)
            //            {
            //                model.JobNameIT = reader.GetString(6);
            //            }
            //            if (reader.IsDBNull(7) == false)
            //            {
            //                model.RevStrtDateOn = reader.GetDateTime(7);
            //            }
            //            if (reader.IsDBNull(8) == false)
            //            {
            //                model.RevStrtTime = reader.GetString(8);
            //            }

            //            if (reader.IsDBNull(9) == false)
            //            {
            //                model.ProcessDate = reader.GetDateTime(9);
            //            }
            //            if (reader.IsDBNull(10) == false)
            //            {
            //                model.TimeProcessIt = reader.GetString(10);
            //            }

            //            if (reader.IsDBNull(11) == false)
            //            {
            //                model.ProcessEnd = reader.GetDateTime(11);
            //            }
            //            if (reader.IsDBNull(12) == false)
            //            {
            //                model.AccQty = reader.GetString(12);
            //            }
            //            if (reader.IsDBNull(13) == false)
            //            {
            //                model.ImpQty = reader.GetString(13);
            //            }

            //            if (reader.IsDBNull(14) == false)
            //            {
            //                model.PageQty = reader.GetString(14);
            //            }

            //            if (reader.IsDBNull(15) == false)
            //            {
            //                model.FirstRecord = reader.GetString(15);
            //            }
            //            if (reader.IsDBNull(16) == false)
            //            {
            //                model.LastRecord = reader.GetString(16);
            //            }
            //            if (reader.IsDBNull(17) == false)
            //            {
            //                model.ProductName = reader.GetString(17);
            //            }

            //            if (reader.IsDBNull(18) == false)
            //            {
            //                model.JobType = reader.GetString(18);
            //            }
            //            if (reader.IsDBNull(19) == false)
            //            {
            //                model.DateApproveOn = reader.GetDateTime(19);
            //            }
            //            if (reader.IsDBNull(20) == false)
            //            {
            //                model.DateApproveTime = reader.GetString(20);
            //            }

            //            if (reader.IsDBNull(21) == false)
            //            {
            //                model.Type = reader.GetString(21);
            //            }
            //            if (reader.IsDBNull(22) == false)
            //            {
            //                model.DateProcessItOn = reader.GetDateTime(22);
            //            }
            //        }
            //        JobAuditTrailDetail.Add(model);
            //    }
            //    cn.Close();
        }




        return View(JobAuditTrailDetail);

    }


    //report
    public ActionResult ReportJATPDFView(string Id, string Customer_Name, string LogTagNo, string AccQty, string RevStrtDateOn, string RevStrtTime, string ProcessDate, string TimeProcessIt, string ProcessEnd, string DateApproveTime, string TimeEndProcessIt, string line)
    {
        //string ProcessDate = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");


        string[] parts = line.Split('|');
        ViewBag.Id = parts[0].Trim();
        ViewBag.LogTagNo = parts[1].Trim();

        parts = line.Split('|');
        Session["ID"] = ViewBag.Id;



        Id = ViewBag.Id;
        LogTagNo = ViewBag.LogTagNo;

        if (!string.IsNullOrEmpty(Id))
        {

            List<JobAuditTrailDetail> Product = new List<JobAuditTrailDetail>();
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                int _bil = 1;
                cn.Open();
                command.CommandText = @"SELECT JobAuditTrailDetail.AccQty, JobAuditTrailDetail.ImpQty, JobAuditTrailDetail.PageQty, JobAuditTrailDetail.LogTagNo, JobAuditTrailDetail.Customer_Name, JobAuditTrailDetail.ProductName
                                       FROM  JobInstruction INNER JOIN
                                     JobAuditTrailDetail ON JobInstruction.Id = JobAuditTrailDetail.JobAuditTrailId
                                      where JobInstruction.Id = @Id ";
                command.Parameters.AddWithValue("@Id", Id);
                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    JobAuditTrailDetail model = new JobAuditTrailDetail();
                    {
                        model.Bil = _bil++;
                        if (reader.IsDBNull(0) == false)
                        {
                            model.AccQty = reader.GetString(0);
                        }
                        if (reader.IsDBNull(1) == false)
                        {
                            model.ImpQty = reader.GetString(1);
                        }
                        if (reader.IsDBNull(2) == false)
                        {
                            model.PageQty = reader.GetString(2);
                        }
                        if (reader.IsDBNull(3) == false)
                        {
                            model.LogTagNo = reader.GetString(3);
                        }
                        if (reader.IsDBNull(4) == false)
                        {
                            model.Customer_Name = reader.GetString(4);
                        }

                        if (reader.IsDBNull(5) == false)
                        {
                            model.ProductName = reader.GetString(5);
                        }


                    }
                    Product.Add(model);
                }
                cn.Close();
            }



            using (SqlConnection cn4 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command2 = new SqlCommand("", cn4))
            {


                cn4.Open();
                command2.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(AccQty)=1
                                            THEN CONVERT(decimal,AccQty) ELSE 0 END))                                           
                                            AS [TotalAccQty]
                                            FROM JobAuditTrailDetail                                    
                                         WHERE LogTagNo=@LogTagNo ";
                command2.Parameters.AddWithValue("@LogTagNo", LogTagNo);
                var reader2 = command2.ExecuteReader();
                while (reader2.Read())
                {
                    if (reader2.IsDBNull(0) == false)
                    {
                        ViewBag.TotalAccQty = reader2.GetDecimal(0);




                    }
                }



            }

            using (SqlConnection cn4 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command2 = new SqlCommand("", cn4))
            {


                cn4.Open();
                command2.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(ImpQty)=1
                                            THEN CONVERT(decimal,ImpQty) ELSE 0 END))                                           
                                            AS [TotalImpQty]
                                            FROM JobAuditTrailDetail                                    
                                         WHERE LogTagNo=@LogTagNo ";
                command2.Parameters.AddWithValue("@LogTagNo", LogTagNo);
                var reader2 = command2.ExecuteReader();
                while (reader2.Read())
                {
                    if (reader2.IsDBNull(0) == false)
                    {
                        ViewBag.TotalImpQty = reader2.GetDecimal(0);




                    }
                }



            }

            using (SqlConnection cn4 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command2 = new SqlCommand("", cn4))
            {


                cn4.Open();
                command2.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(PageQty)=1
                                            THEN CONVERT(decimal,PageQty) ELSE 0 END))                                           
                                            AS [TotalPageQty]
                                            FROM JobAuditTrailDetail                                    
                                         WHERE LogTagNo=@LogTagNo ";
                command2.Parameters.AddWithValue("@LogTagNo", LogTagNo);
                var reader2 = command2.ExecuteReader();
                while (reader2.Read())
                {
                    if (reader2.IsDBNull(0) == false)
                    {
                        ViewBag.TotalPageQty = reader2.GetDecimal(0);




                    }
                }



            }


        }



        if (!string.IsNullOrEmpty(Id))
        {


            List<JobAuditTrailDetail> JobAuditTrailDetail = new List<JobAuditTrailDetail>();

            int _bil = 1;
            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn3))
            {


                cn3.Open();
                command.CommandText = @"SELECT LogTagNo, JobType, AccQty,ImpQty, PageQty, ProductName,Customer_Name
                                      FROM [IflowSeed].[dbo].[JobAuditTrailDetail]
                                    WHERE LogTagNo=@LogTagNo ";
                command.Parameters.AddWithValue("@LogTagNo", LogTagNo);

                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    JobAuditTrailDetail model = new JobAuditTrailDetail();
                    {
                        model.Bil = _bil++;
                        if (reader.IsDBNull(0) == false)
                        {
                            ViewBag.LogTagNo = reader.GetString(0);
                        }
                        if (reader.IsDBNull(1) == false)
                        {
                            ViewBag.JobType = reader.GetString(1);
                        }
                        if (reader.IsDBNull(2) == false)
                        {
                            ViewBag.AccQty = reader.GetString(2);
                        }
                        if (reader.IsDBNull(3) == false)
                        {
                            ViewBag.ImpQty = reader.GetString(3);
                        }
                        if (reader.IsDBNull(4) == false)
                        {
                            ViewBag.PageQty = reader.GetString(4);
                        }
                        if (reader.IsDBNull(5) == false)
                        {
                            ViewBag.ProductName = reader.GetString(5);
                        }
                        if (reader.IsDBNull(6) == false)
                        {
                            ViewBag.Customer_Name = reader.GetString(6);
                        }
                        ViewBag.JobAuditTrailDetail = JobAuditTrailDetail;

                    }
                }








            }






            int ic = 0;
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString.ToString()))
            {
                cn.Open();
                try
                {
                    SqlCommand cmd44 = new SqlCommand("Select Customer_Name, ProgramId, FileId,JobId,JobNameIT,RevStrtDateOn,RevStrtTime,ProcessDate,TimeProcessIt,ProcessEnd,AccQty,ImpQty,PageQty,FirstRecord,LastRecord,LogTagNo,ProductName,JobType,DateApproveOn,DateApproveTime,Type,DateProcessItOn  FROM JobAuditTrailDetail  where  LogTagNo=@LogTagNo ", cn);
                    cmd44.Parameters.Add(new SqlParameter("@LogTagNo", LogTagNo));
                    SqlDataReader rs4 = cmd44.ExecuteReader();
                    if (rs4.HasRows)
                    {

                        while (rs4.Read())
                        {
                            ic = ic + 1;
                            JobAuditTrailDetail eb = new JobAuditTrailDetail();
                            {
                                eb.Bil = ic;
                                eb.Customer_Name = rs4.GetString(0);
                                eb.ProgramId = rs4.GetString(1);
                                eb.FileId = rs4.GetString(2);
                                eb.JobId = rs4.GetString(3);
                                eb.JobNameIT = rs4.GetString(4);



                                eb.RevStrtDateOn = rs4.GetDateTime(5);



                                eb.RevStrtTime = rs4.GetString(6);



                                eb.ProcessDate = rs4.GetDateTime(7);


                                eb.TimeProcessIt = rs4.GetString(8);



                                eb.ProcessEnd = rs4.GetDateTime(9);




                                eb.AccQty = rs4.GetString(10);
                                eb.ImpQty = rs4.GetString(11);
                                eb.PageQty = rs4.GetString(12);
                                eb.FirstRecord = rs4.GetString(13);
                                eb.LastRecord = rs4.GetString(14);
                                eb.LogTagNo = rs4.GetString(15);
                                eb.ProductName = rs4.GetString(16);
                                eb.JobType = rs4.GetString(17);
                                eb.DateApproveOn = rs4.GetDateTime(18);
                                eb.DateApproveTime = rs4.GetString(19);
                                eb.Type = rs4.GetString(20);
                                eb.DateProcessItOn = rs4.GetDateTime(21);

                            };
                            liEB.Add(eb);
                        }
                    }
                    rs4.Close();
                    ViewBag.ListPDF = liEB.ToList();
                }
                catch (System.Exception err)
                {
                    TempData["msg"] = "<script>alert('" + err.Message + "');</script>";
                }
                finally
                {
                    cn.Close();
                }
            }
        }
        return new Rotativa.ViewAsPdf("ReportJATPDF", ViewBag.ListPDF)
        {
            PageMargins = new Rotativa.Options.Margins(5, 5, 5, 5),
            PageOrientation = Rotativa.Options.Orientation.Portrait,
        };
    }


    public ActionResult ReportJATPDF(string Id, string Customer_Name, string LogTagNo, string AccQty, string RevStrtDateOn, string RevStrtTime, string ProcessDate, string TimeProcessIt, string ProcessEnd, string DateApproveTime, string TimeEndProcessIt, string line)
    {
        //string ProcessDate = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");



        if (!string.IsNullOrEmpty(Id))
        {

            List<JobAuditTrailDetail> Product = new List<JobAuditTrailDetail>();
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                int _bil = 1;
                cn.Open();
                command.CommandText = @"SELECT JobAuditTrailDetail.AccQty, JobAuditTrailDetail.ImpQty, JobAuditTrailDetail.PageQty, JobAuditTrailDetail.LogTagNo, JobAuditTrailDetail.Customer_Name, JobAuditTrailDetail.ProductName
                                       FROM  JobInstruction INNER JOIN
                                     JobAuditTrailDetail ON JobInstruction.Id = JobAuditTrailDetail.JobAuditTrailId
                                      where JobInstruction.Id = @Id ";
                command.Parameters.AddWithValue("@Id", Id);
                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    JobAuditTrailDetail model = new JobAuditTrailDetail();
                    {
                        model.Bil = _bil++;
                        if (reader.IsDBNull(0) == false)
                        {
                            model.AccQty = reader.GetString(0);
                        }
                        if (reader.IsDBNull(1) == false)
                        {
                            model.ImpQty = reader.GetString(1);
                        }
                        if (reader.IsDBNull(2) == false)
                        {
                            model.PageQty = reader.GetString(2);
                        }
                        if (reader.IsDBNull(3) == false)
                        {
                            model.LogTagNo = reader.GetString(3);
                        }
                        if (reader.IsDBNull(4) == false)
                        {
                            model.Customer_Name = reader.GetString(4);
                        }

                        if (reader.IsDBNull(5) == false)
                        {
                            model.ProductName = reader.GetString(5);
                        }


                    }
                    Product.Add(model);
                }
                cn.Close();
            }



            using (SqlConnection cn4 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command2 = new SqlCommand("", cn4))
            {


                cn4.Open();
                command2.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(AccQty)=1
                                            THEN CONVERT(decimal,AccQty) ELSE 0 END))                                           
                                            AS [TotalAccQty]
                                            FROM JobAuditTrailDetail                                    
                                         WHERE LogTagNo=@LogTagNo ";
                command2.Parameters.AddWithValue("@LogTagNo", LogTagNo);
                var reader2 = command2.ExecuteReader();
                while (reader2.Read())
                {
                    if (reader2.IsDBNull(0) == false)
                    {
                        ViewBag.TotalAccQty = reader2.GetDecimal(0);




                    }
                }



            }

            using (SqlConnection cn4 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command2 = new SqlCommand("", cn4))
            {


                cn4.Open();
                command2.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(ImpQty)=1
                                            THEN CONVERT(decimal,ImpQty) ELSE 0 END))                                           
                                            AS [TotalImpQty]
                                            FROM JobAuditTrailDetail                                    
                                         WHERE LogTagNo=@LogTagNo ";
                command2.Parameters.AddWithValue("@LogTagNo", LogTagNo);
                var reader2 = command2.ExecuteReader();
                while (reader2.Read())
                {
                    if (reader2.IsDBNull(0) == false)
                    {
                        ViewBag.TotalImpQty = reader2.GetDecimal(0);




                    }
                }



            }

            using (SqlConnection cn4 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command2 = new SqlCommand("", cn4))
            {


                cn4.Open();
                command2.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(PageQty)=1
                                            THEN CONVERT(decimal,PageQty) ELSE 0 END))                                           
                                            AS [TotalPageQty]
                                            FROM JobAuditTrailDetail                                    
                                         WHERE LogTagNo=@LogTagNo ";
                command2.Parameters.AddWithValue("@LogTagNo", LogTagNo);
                var reader2 = command2.ExecuteReader();
                while (reader2.Read())
                {
                    if (reader2.IsDBNull(0) == false)
                    {
                        ViewBag.TotalPageQty = reader2.GetDecimal(0);




                    }
                }



            }


        }



        if (!string.IsNullOrEmpty(Id))
        {


            List<JobAuditTrailDetail> JobAuditTrailDetail = new List<JobAuditTrailDetail>();

            int _bil = 1;
            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn3))
            {


                cn3.Open();
                command.CommandText = @"SELECT LogTagNo, JobType, AccQty,ImpQty, PageQty, ProductName,Customer_Name
                                      FROM [IflowSeed].[dbo].[JobAuditTrailDetail]
                                    WHERE LogTagNo=@LogTagNo ";
                command.Parameters.AddWithValue("@LogTagNo", LogTagNo);

                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    JobAuditTrailDetail model = new JobAuditTrailDetail();
                    {
                        model.Bil = _bil++;
                        if (reader.IsDBNull(0) == false)
                        {
                            ViewBag.LogTagNo = reader.GetString(0);
                        }
                        if (reader.IsDBNull(1) == false)
                        {
                            ViewBag.JobType = reader.GetString(1);
                        }
                        if (reader.IsDBNull(2) == false)
                        {
                            ViewBag.AccQty = reader.GetString(2);
                        }
                        if (reader.IsDBNull(3) == false)
                        {
                            ViewBag.ImpQty = reader.GetString(3);
                        }
                        if (reader.IsDBNull(4) == false)
                        {
                            ViewBag.PageQty = reader.GetString(4);
                        }
                        if (reader.IsDBNull(5) == false)
                        {
                            ViewBag.ProductName = reader.GetString(5);
                        }
                        if (reader.IsDBNull(6) == false)
                        {
                            ViewBag.Customer_Name = reader.GetString(6);
                        }
                        ViewBag.JobAuditTrailDetail = JobAuditTrailDetail;

                    }
                }








            }






            int ic = 0;
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString.ToString()))
            {
                cn.Open();
                try
                {
                    SqlCommand cmd44 = new SqlCommand("Select Customer_Name, ProgramId, FileId,JobId,JobNameIT,RevStrtDateOn,RevStrtTime,ProcessDate,TimeProcessIt,ProcessEnd,AccQty,ImpQty,PageQty,FirstRecord,LastRecord,LogTagNo,ProductName,JobType,DateApproveOn,DateApproveTime,Type,DateProcessItOn  FROM JobAuditTrailDetail  where  LogTagNo=@LogTagNo ", cn);
                    cmd44.Parameters.Add(new SqlParameter("@LogTagNo", LogTagNo));
                    SqlDataReader rs4 = cmd44.ExecuteReader();
                    if (rs4.HasRows)
                    {

                        while (rs4.Read())
                        {
                            ic = ic + 1;
                            JobAuditTrailDetail eb = new JobAuditTrailDetail();
                            {
                                eb.Bil = ic;
                                eb.Customer_Name = rs4.GetString(0);
                                eb.ProgramId = rs4.GetString(1);
                                eb.FileId = rs4.GetString(2);
                                eb.JobId = rs4.GetString(3);
                                eb.JobNameIT = rs4.GetString(4);



                                eb.RevStrtDateOn = rs4.GetDateTime(5);



                                eb.RevStrtTime = rs4.GetString(6);



                                eb.ProcessDate = rs4.GetDateTime(7);


                                eb.TimeProcessIt = rs4.GetString(8);



                                eb.ProcessEnd = rs4.GetDateTime(9);




                                eb.AccQty = rs4.GetString(10);
                                eb.ImpQty = rs4.GetString(11);
                                eb.PageQty = rs4.GetString(12);
                                eb.FirstRecord = rs4.GetString(13);
                                eb.LastRecord = rs4.GetString(14);
                                eb.LogTagNo = rs4.GetString(15);
                                eb.ProductName = rs4.GetString(16);
                                eb.JobType = rs4.GetString(17);
                                eb.DateApproveOn = rs4.GetDateTime(18);
                                eb.DateApproveTime = rs4.GetString(19);
                                eb.Type = rs4.GetString(20);
                                eb.DateProcessItOn = rs4.GetDateTime(21);

                            };
                            liEB.Add(eb);
                        }
                    }
                    rs4.Close();
                    ViewBag.ListPDF = liEB.ToList();
                }
                catch (System.Exception err)
                {
                    TempData["msg"] = "<script>alert('" + err.Message + "');</script>";
                }
                finally
                {
                    cn.Close();
                }
            }
        }
        return new Rotativa.ViewAsPdf("ReportJATPDF", ViewBag.ListPDF)
        {
            PageMargins = new Rotativa.Options.Margins(5, 5, 5, 5),
            PageOrientation = Rotativa.Options.Orientation.Portrait,
        };
    }


    List<JobAuditTrailDetail> liEB = new List<JobAuditTrailDetail>();






    List<JobInstruction> list = new List<JobInstruction>();
    public ActionResult ManagePricingFin(string Id, string set, string job, string Customer_Name, string IsRateDB)
    {


        if (set == "search") //ini kalu user search product
        {

            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                cn.Open();
                command.CommandText = @"SELECT Customer_Name, ProductName,Cust_Department,Id
                                        FROM  JobInstruction 
                                       WHERE  ProductName LIKE @ProductName ";
                command.Parameters.AddWithValue("@JobName", "%" + job + "%");
                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    JobInstruction model = new JobInstruction();
                    {
                        model.Bil = _bil++;
                        if (reader.IsDBNull(0) == false)
                        {
                            model.Customer_Name = reader.GetString(0);
                        }
                        if (reader.IsDBNull(1) == false)
                        {
                            model.ProductName = reader.GetString(1);
                        }
                        if (reader.IsDBNull(2) == false)
                        {
                            model.Cust_Department = reader.GetString(2);
                        }
                        if (reader.IsDBNull(3) == false)
                        {
                            model.Id = reader.GetGuid(3);
                        }


                        list.Add(model);
                    }

                }
                cn.Close();
            }
        }
        else
        {
            //ALL firt masuk
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                cn.Open();
                command.CommandText = @"SELECT Customer_Name, ProductName,Cust_Department,Id
                                        FROM  JobInstruction   
                                       WHERE Id=@Id  ";
                command.Parameters.AddWithValue("@Id", Id);

                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    JobInstruction model = new JobInstruction();
                    {
                        model.Bil = _bil++;
                        if (reader.IsDBNull(0) == false)
                        {
                            model.Customer_Name = reader.GetString(0);
                        }
                        if (reader.IsDBNull(1) == false)
                        {
                            model.ProductName = reader.GetString(1);
                        }
                        if (reader.IsDBNull(2) == false)
                        {
                            model.Cust_Department = reader.GetString(2);
                        }
                        if (reader.IsDBNull(3) == false)
                        {
                            model.Id = reader.GetGuid(3);
                        }


                        list.Add(model);
                    }

                }
                cn.Close();
            }
        }

        return View(list);

    }





    List<PricingSchedule> list2 = new List<PricingSchedule>();
    public ActionResult SearchPricingFin(string Id, string set, string job, string Customer_Name, string IsRateDB)
    {
        var IdentityName = @Session["Fullname"];
        if (set == "Action")
        {

            string ModifiedOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");

            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            {
                cn.Open();
                SqlCommand command;
                command = new SqlCommand("UPDATE [IflowSeed].[dbo].[JobInstruction] SET IsRateDB='1',ModifiedOn=@ModifiedOn WHERE Id=@Id", cn);
                command.Parameters.AddWithValue("@ModifiedOn", ModifiedOn);
                command.Parameters.AddWithValue("@Id", Id);
                command.ExecuteNonQuery();
                cn.Close();




            }

            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            {
                Guid Idx = Guid.NewGuid();
                string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");

                cn.Open();
                SqlCommand command;
                command = new SqlCommand("UPDATE [IflowSeed].[dbo].[PricingSchedule] SET CreatedBy=@CreatedBy,JobInstructionId=@JobInstructionId WHERE Id =@Id", cn);
                command.Parameters.AddWithValue("@CreatedBy", IdentityName.ToString());
                command.Parameters.AddWithValue("@JobInstructionId", Id);
                command.Parameters.AddWithValue("@Id", Id);
                command.ExecuteNonQuery();
                cn.Close();
            }



            return RedirectToAction("ManagePricingFin", "Finance", new { Id = Id });
        }
        if (set == "search") //ini kalu user search product
        {

            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                int _bil = 1;
                cn.Open();
                command.CommandText = @"SELECT Customer_Name, ProductName,JobType,Id,JobName
                                        FROM  PricingSchedule 
                                       WHERE  Customer_Name LIKE @Customer_Name";
                command.Parameters.AddWithValue("@Customer_Name", "%" + Customer_Name + "%");
                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    PricingSchedule model = new PricingSchedule();
                    {
                        model.Bil = _bil++;
                        if (reader.IsDBNull(0) == false)
                        {
                            model.Customer_Name = reader.GetString(0);
                        }
                        if (reader.IsDBNull(1) == false)
                        {
                            model.ProductName = reader.GetString(1);
                        }

                        if (reader.IsDBNull(2) == false)
                        {
                            model.JobType = reader.GetString(2);
                        }
                        if (reader.IsDBNull(3) == false)
                        {
                            model.Id = reader.GetGuid(3);
                        }
                        if (reader.IsDBNull(4) == false)
                        {
                            model.JobName = reader.GetString(4);
                        }

                        list2.Add(model);
                    }

                }
                cn.Close();
            }


        }

        return View(list2);

    }










    List<PricingSchedule> Pricinglist = new List<PricingSchedule>();


    public ActionResult ManagePricingSchedule(string Id, string set, string Customer_Name, string JobName, string job)
    {
        if (set == "search") //ini kalu user search product
        {

            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                int _bil = 1;
                cn.Open();
                command.CommandText = @"SELECT Id, Customer_Name, JobType, JobName, CreatedBy, PrintingDuplex, Inserting1,   
                                               Inserting2, Inserting3, Inserting4, BrochureInsert, MailBelow_5K, Handling, Sealing,
                                               Tearing, Folding, Sticking, Labelling, Matching, CDArchiving, Npc,EnvelopeType,
                                               EnvelopePrice, Paper, PaperPrice, SM_PrintingSM, SM_SM_Material, SM_FirstInsert, SM_SecondInsert,
                                               SM_BrochureInsert, SM_MailBelow_5K, SM_Handling, SM_Sealing, SM_Tearing, SM_Folding,
                                               SM_Sticking, SM_Labelling, SM_Matching, SM_CDArchiving, SM_EnvelopeType, SM_EnvelopePrice,
                                               SM_Paper, SM_PaperPrice, MMP_PrintingDuplex, MMP_FirstInsert, MMP_SecondInsert,
                                               MMP_InsertingMMP, MMP_BrochureInsert, MMP_MailBelow_5K, MMP_Handling, MMP_Sealing, MMP_Tearing, 
                                               MMP_Folding, MMP_Sticking, MMP_Labelling, MMP_Matching, MMP_CDArchiving, MMP_EnvelopeType,  
                                               MMP_EnvelopePrice, MMP_Paper, MMP_PaperPrice, DCP_FoldingCharges, DCP_SupplyPrintLabel, 
                                               DCP_PrintingDuplex, DCP_FirstInsert, DCP_SecondInsert, DCP_BrochureInsert, DCP_MailBelow_5K, DCP_Handling, 
                                               DCP_Sealing, DCP_Tearing, DCP_Folding, DCP_Sticking, DCP_Labelling, DCP_Matching, DCP_CDArchiving, DCP_EnvelopeType,
                                               DCP_EnvelopePrice, DCP_Paper, DCP_PaperPrice, RM_Printing, RM_Selfmailer, RM_FirstInsert, RM_SecondInsert,
                                               RM_BrochureInsert, RM_MailBelow_5K, RM_Handling, RM_Sealing, RM_Tearing, RM_Folding, RM_Sticking, RM_Labelling,
                                               RM_Matching, RM_CDArchiving, RM_Mix, RM_LabellingRegsterMails, RM_EnvelopeType, RM_EnvelopePrice, RM_Paper,RM_PaperPrice
                                       FROM [IflowSeed].[dbo].[PricingSchedule]
                                       WHERE  Customer_Name LIKE @Customer_Name";
                command.Parameters.AddWithValue("@Customer_Name", "%" + Customer_Name + "%");
                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    PricingSchedule model = new PricingSchedule();
                    {
                        model.Bil = _bil++;
                        if (reader.IsDBNull(0) == false)
                        {
                            model.Id = reader.GetGuid(0);
                        }
                        if (reader.IsDBNull(1) == false)
                        {
                            model.Customer_Name = reader.GetString(1);
                        }
                        if (reader.IsDBNull(2) == false)
                        {
                            model.JobType = reader.GetString(2);
                        }
                        if (reader.IsDBNull(3) == false)
                        {
                            model.JobName = reader.GetString(3);
                        }
                        if (reader.IsDBNull(4) == false)
                        {
                            model.CreatedBy = reader.GetString(4);
                        }
                        if (reader.IsDBNull(5) == false)
                        {
                            model.PrintingDuplex = reader.GetString(5);
                        }
                        if (reader.IsDBNull(6) == false)
                        {
                            model.Inserting1 = reader.GetString(6);
                        }
                        if (reader.IsDBNull(7) == false)
                        {
                            model.Inserting2 = reader.GetString(7);
                        }
                        if (reader.IsDBNull(8) == false)
                        {
                            model.Inserting3 = reader.GetString(8);
                        }
                        if (reader.IsDBNull(9) == false)
                        {
                            model.Inserting4 = reader.GetString(9);
                        }
                        if (reader.IsDBNull(10) == false)
                        {
                            model.BrochureInsert = reader.GetString(10);
                        }
                        if (reader.IsDBNull(11) == false)
                        {
                            model.MailBelow_5K = reader.GetString(11);
                        }
                        if (reader.IsDBNull(12) == false)
                        {
                            model.Handling = reader.GetString(12);
                        }
                        if (reader.IsDBNull(13) == false)
                        {
                            model.Sealing = reader.GetString(13);
                        }
                        if (reader.IsDBNull(14) == false)
                        {
                            model.Tearing = reader.GetString(14);
                        }
                        if (reader.IsDBNull(15) == false)
                        {
                            model.Folding = reader.GetString(15);
                        }
                        if (reader.IsDBNull(16) == false)
                        {
                            model.Sticking = reader.GetString(16);
                        }
                        if (reader.IsDBNull(17) == false)
                        {
                            model.Labelling = reader.GetString(17);
                        }
                        if (reader.IsDBNull(18) == false)
                        {
                            model.Matching = reader.GetString(18);
                        }
                        if (reader.IsDBNull(19) == false)
                        {
                            model.CDArchiving = reader.GetString(19);
                        }
                        if (reader.IsDBNull(20) == false)
                        {
                            model.Npc = reader.GetString(20);
                        }
                        if (reader.IsDBNull(21) == false)
                        {
                            model.EnvelopeType = reader.GetString(21);
                        }
                        if (reader.IsDBNull(22) == false)
                        {
                            model.EnvelopePrice = reader.GetString(22);
                        }
                        if (reader.IsDBNull(23) == false)
                        {
                            model.Paper = reader.GetString(23);
                        }
                        if (reader.IsDBNull(24) == false)
                        {
                            model.PaperPrice = reader.GetString(24);
                        }
                        if (reader.IsDBNull(25) == false)
                        {
                            model.SM_PrintingSM = reader.GetString(25);
                        }
                        if (reader.IsDBNull(26) == false)
                        {
                            model.SM_SM_Material = reader.GetString(26);
                        }
                        if (reader.IsDBNull(27) == false)
                        {
                            model.SM_FirstInsert = reader.GetString(27);
                        }
                        if (reader.IsDBNull(28) == false)
                        {
                            model.SM_SecondInsert = reader.GetString(28);
                        }
                        if (reader.IsDBNull(29) == false)
                        {
                            model.SM_BrochureInsert = reader.GetString(29);
                        }
                        if (reader.IsDBNull(30) == false)
                        {
                            model.SM_MailBelow_5K = reader.GetString(30);
                        }
                        if (reader.IsDBNull(31) == false)
                        {
                            model.SM_Handling = reader.GetString(31);
                        }
                        if (reader.IsDBNull(32) == false)
                        {
                            model.SM_Sealing = reader.GetString(32);
                        }
                        if (reader.IsDBNull(33) == false)
                        {
                            model.SM_Tearing = reader.GetString(33);
                        }
                        if (reader.IsDBNull(34) == false)
                        {
                            model.SM_Folding = reader.GetString(34);
                        }
                        if (reader.IsDBNull(35) == false)
                        {
                            model.SM_Sticking = reader.GetString(35);
                        }
                        if (reader.IsDBNull(36) == false)
                        {
                            model.SM_Labelling = reader.GetString(36);
                        }
                        if (reader.IsDBNull(37) == false)
                        {
                            model.SM_Matching = reader.GetString(37);
                        }
                        if (reader.IsDBNull(38) == false)
                        {
                            model.SM_CDArchiving = reader.GetString(38);
                        }
                        if (reader.IsDBNull(39) == false)
                        {
                            model.SM_EnvelopeType = reader.GetString(39);
                        }
                        if (reader.IsDBNull(40) == false)
                        {
                            model.SM_EnvelopePrice = reader.GetString(40);
                        }
                        if (reader.IsDBNull(41) == false)
                        {
                            model.SM_Paper = reader.GetString(41);
                        }
                        if (reader.IsDBNull(42) == false)
                        {
                            model.SM_PaperPrice = reader.GetString(42);
                        }
                        if (reader.IsDBNull(43) == false)
                        {
                            model.MMP_PrintingDuplex = reader.GetString(43);
                        }
                        if (reader.IsDBNull(44) == false)
                        {
                            model.MMP_FirstInsert = reader.GetString(44);
                        }
                        if (reader.IsDBNull(45) == false)
                        {
                            model.MMP_SecondInsert = reader.GetString(45);
                        }
                        if (reader.IsDBNull(46) == false)
                        {
                            model.MMP_InsertingMMP = reader.GetString(46);
                        }
                        if (reader.IsDBNull(47) == false)
                        {
                            model.MMP_BrochureInsert = reader.GetString(47);
                        }
                        if (reader.IsDBNull(48) == false)
                        {
                            model.MMP_MailBelow_5K = reader.GetString(48);
                        }
                        if (reader.IsDBNull(49) == false)
                        {
                            model.MMP_Handling = reader.GetString(49);
                        }
                        if (reader.IsDBNull(50) == false)
                        {
                            model.MMP_Sealing = reader.GetString(50);
                        }
                        if (reader.IsDBNull(51) == false)
                        {
                            model.MMP_Tearing = reader.GetString(51);
                        }
                        if (reader.IsDBNull(52) == false)
                        {
                            model.MMP_Folding = reader.GetString(52);
                        }
                        if (reader.IsDBNull(53) == false)
                        {
                            model.MMP_Sticking = reader.GetString(53);
                        }
                        if (reader.IsDBNull(54) == false)
                        {
                            model.MMP_Labelling = reader.GetString(54);
                        }
                        if (reader.IsDBNull(55) == false)
                        {
                            model.MMP_Matching = reader.GetString(55);
                        }
                        if (reader.IsDBNull(56) == false)
                        {
                            model.MMP_CDArchiving = reader.GetString(56);
                        }
                        if (reader.IsDBNull(57) == false)
                        {
                            model.MMP_EnvelopeType = reader.GetString(57);
                        }
                        if (reader.IsDBNull(58) == false)
                        {
                            model.MMP_EnvelopePrice = reader.GetString(58);
                        }
                        if (reader.IsDBNull(59) == false)
                        {
                            model.MMP_Paper = reader.GetString(59);
                        }
                        if (reader.IsDBNull(60) == false)
                        {
                            model.MMP_PaperPrice = reader.GetString(60);
                        }
                        if (reader.IsDBNull(61) == false)
                        {
                            model.DCP_FoldingCharges = reader.GetString(61);
                        }
                        if (reader.IsDBNull(62) == false)
                        {
                            model.DCP_SupplyPrintLabel = reader.GetString(62);
                        }
                        if (reader.IsDBNull(63) == false)
                        {
                            model.DCP_PrintingDuplex = reader.GetString(63);
                        }
                        if (reader.IsDBNull(64) == false)
                        {
                            model.DCP_FirstInsert = reader.GetString(64);
                        }
                        if (reader.IsDBNull(65) == false)
                        {
                            model.DCP_SecondInsert = reader.GetString(65);
                        }
                        if (reader.IsDBNull(66) == false)
                        {
                            model.DCP_BrochureInsert = reader.GetString(66);
                        }
                        if (reader.IsDBNull(67) == false)
                        {
                            model.DCP_MailBelow_5K = reader.GetString(67);
                        }
                        if (reader.IsDBNull(68) == false)
                        {
                            model.DCP_Handling = reader.GetString(68);
                        }
                        if (reader.IsDBNull(69) == false)
                        {
                            model.DCP_Sealing = reader.GetString(69);
                        }
                        if (reader.IsDBNull(70) == false)
                        {
                            model.DCP_Tearing = reader.GetString(70);
                        }
                        if (reader.IsDBNull(71) == false)
                        {
                            model.DCP_Folding = reader.GetString(71);
                        }
                        if (reader.IsDBNull(72) == false)
                        {
                            model.DCP_Sticking = reader.GetString(72);
                        }
                        if (reader.IsDBNull(73) == false)
                        {
                            model.DCP_Labelling = reader.GetString(73);
                        }
                        if (reader.IsDBNull(74) == false)
                        {
                            model.DCP_Matching = reader.GetString(74);
                        }
                        if (reader.IsDBNull(75) == false)
                        {
                            model.DCP_CDArchiving = reader.GetString(75);
                        }
                        if (reader.IsDBNull(76) == false)
                        {
                            model.DCP_EnvelopeType = reader.GetString(76);
                        }
                        if (reader.IsDBNull(77) == false)
                        {
                            model.DCP_EnvelopePrice = reader.GetString(77);
                        }
                        if (reader.IsDBNull(78) == false)
                        {
                            model.DCP_Paper = reader.GetString(78);
                        }
                        if (reader.IsDBNull(79) == false)
                        {
                            model.DCP_PaperPrice = reader.GetString(79);
                        }
                        if (reader.IsDBNull(80) == false)
                        {
                            model.RM_Printing = reader.GetString(80);
                        }
                        if (reader.IsDBNull(81) == false)
                        {
                            model.RM_Selfmailer = reader.GetString(81);
                        }
                        if (reader.IsDBNull(82) == false)
                        {
                            model.RM_FirstInsert = reader.GetString(82);
                        }
                        if (reader.IsDBNull(83) == false)
                        {
                            model.RM_SecondInsert = reader.GetString(83);
                        }
                        if (reader.IsDBNull(84) == false)
                        {
                            model.RM_BrochureInsert = reader.GetString(84);
                        }
                        if (reader.IsDBNull(85) == false)
                        {
                            model.RM_MailBelow_5K = reader.GetString(85);
                        }
                        if (reader.IsDBNull(86) == false)
                        {
                            model.RM_Handling = reader.GetString(86);
                        }
                        if (reader.IsDBNull(87) == false)
                        {
                            model.RM_Sealing = reader.GetString(87);
                        }
                        if (reader.IsDBNull(88) == false)
                        {
                            model.RM_Tearing = reader.GetString(88);
                        }
                        if (reader.IsDBNull(89) == false)
                        {
                            model.RM_Folding = reader.GetString(89);
                        }
                        if (reader.IsDBNull(90) == false)
                        {
                            model.RM_Sticking = reader.GetString(90);
                        }
                        if (reader.IsDBNull(91) == false)
                        {
                            model.RM_Labelling = reader.GetString(91);
                        }
                        if (reader.IsDBNull(92) == false)
                        {
                            model.RM_Matching = reader.GetString(92);
                        }
                        if (reader.IsDBNull(93) == false)
                        {
                            model.RM_CDArchiving = reader.GetString(93);
                        }
                        if (reader.IsDBNull(94) == false)
                        {
                            model.RM_Mix = reader.GetString(94);
                        }
                        if (reader.IsDBNull(95) == false)
                        {
                            model.RM_LabellingRegsterMails = reader.GetString(95);
                        }
                        if (reader.IsDBNull(96) == false)
                        {
                            model.RM_EnvelopeType = reader.GetString(96);
                        }
                        if (reader.IsDBNull(97) == false)
                        {
                            model.RM_EnvelopePrice = reader.GetString(97);
                        }
                        if (reader.IsDBNull(98) == false)
                        {
                            model.RM_Paper = reader.GetString(98);
                        }
                        if (reader.IsDBNull(99) == false)
                        {
                            model.RM_PaperPrice = reader.GetString(99);
                        }

                        Pricinglist.Add(model);
                    }

                }
                cn.Close();
            }
        }
        else
        {
            //ALL firt masuk
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                int _bil = 1;
                cn.Open();
                command.CommandText = @"SELECT Id, Customer_Name, JobType, JobName, CreatedBy, PrintingDuplex, Inserting1,   
                                               Inserting2, Inserting3, Inserting4, BrochureInsert, MailBelow_5K, Handling, Sealing,
                                               Tearing, Folding, Sticking, Labelling, Matching, CDArchiving, Npc,EnvelopeType,
                                               EnvelopePrice, Paper, PaperPrice, SM_PrintingSM, SM_SM_Material, SM_FirstInsert, SM_SecondInsert,
                                               SM_BrochureInsert, SM_MailBelow_5K, SM_Handling, SM_Sealing, SM_Tearing, SM_Folding,
                                               SM_Sticking, SM_Labelling, SM_Matching, SM_CDArchiving, SM_EnvelopeType, SM_EnvelopePrice,
                                               SM_Paper, SM_PaperPrice, MMP_PrintingDuplex, MMP_FirstInsert, MMP_SecondInsert,
                                               MMP_InsertingMMP, MMP_BrochureInsert, MMP_MailBelow_5K, MMP_Handling, MMP_Sealing, MMP_Tearing, 
                                               MMP_Folding, MMP_Sticking, MMP_Labelling, MMP_Matching, MMP_CDArchiving, MMP_EnvelopeType,  
                                               MMP_EnvelopePrice, MMP_Paper, MMP_PaperPrice, DCP_FoldingCharges, DCP_SupplyPrintLabel, 
                                               DCP_PrintingDuplex, DCP_FirstInsert, DCP_SecondInsert, DCP_BrochureInsert, DCP_MailBelow_5K, DCP_Handling, 
                                               DCP_Sealing, DCP_Tearing, DCP_Folding, DCP_Sticking, DCP_Labelling, DCP_Matching, DCP_CDArchiving, DCP_EnvelopeType,
                                               DCP_EnvelopePrice, DCP_Paper, DCP_PaperPrice, RM_Printing, RM_Selfmailer, RM_FirstInsert, RM_SecondInsert,
                                               RM_BrochureInsert, RM_MailBelow_5K, RM_Handling, RM_Sealing, RM_Tearing, RM_Folding, RM_Sticking, RM_Labelling,
                                               RM_Matching, RM_CDArchiving, RM_Mix, RM_LabellingRegsterMails, RM_EnvelopeType, RM_EnvelopePrice, RM_Paper,RM_PaperPrice
                                       FROM [IflowSeed].[dbo].[PricingSchedule]";
                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    PricingSchedule model = new PricingSchedule();
                    {
                        model.Bil = _bil++;
                        if (reader.IsDBNull(0) == false)
                        {
                            model.Id = reader.GetGuid(0);
                        }
                        if (reader.IsDBNull(1) == false)
                        {
                            model.Customer_Name = reader.GetString(1);
                        }
                        if (reader.IsDBNull(2) == false)
                        {
                            model.JobType = reader.GetString(2);
                        }
                        if (reader.IsDBNull(3) == false)
                        {
                            model.JobName = reader.GetString(3);
                        }
                        if (reader.IsDBNull(4) == false)
                        {
                            model.CreatedBy = reader.GetString(4);
                        }
                        if (reader.IsDBNull(5) == false)
                        {
                            model.PrintingDuplex = reader.GetString(5);
                        }
                        if (reader.IsDBNull(6) == false)
                        {
                            model.Inserting1 = reader.GetString(6);
                        }
                        if (reader.IsDBNull(7) == false)
                        {
                            model.Inserting2 = reader.GetString(7);
                        }
                        if (reader.IsDBNull(8) == false)
                        {
                            model.Inserting3 = reader.GetString(8);
                        }
                        if (reader.IsDBNull(9) == false)
                        {
                            model.Inserting4 = reader.GetString(9);
                        }
                        if (reader.IsDBNull(10) == false)
                        {
                            model.BrochureInsert = reader.GetString(10);
                        }
                        if (reader.IsDBNull(11) == false)
                        {
                            model.MailBelow_5K = reader.GetString(11);
                        }
                        if (reader.IsDBNull(12) == false)
                        {
                            model.Handling = reader.GetString(12);
                        }
                        if (reader.IsDBNull(13) == false)
                        {
                            model.Sealing = reader.GetString(13);
                        }
                        if (reader.IsDBNull(14) == false)
                        {
                            model.Tearing = reader.GetString(14);
                        }
                        if (reader.IsDBNull(15) == false)
                        {
                            model.Folding = reader.GetString(15);
                        }
                        if (reader.IsDBNull(16) == false)
                        {
                            model.Sticking = reader.GetString(16);
                        }
                        if (reader.IsDBNull(17) == false)
                        {
                            model.Labelling = reader.GetString(17);
                        }
                        if (reader.IsDBNull(18) == false)
                        {
                            model.Matching = reader.GetString(18);
                        }
                        if (reader.IsDBNull(19) == false)
                        {
                            model.CDArchiving = reader.GetString(19);
                        }
                        if (reader.IsDBNull(20) == false)
                        {
                            model.Npc = reader.GetString(20);
                        }
                        if (reader.IsDBNull(21) == false)
                        {
                            model.EnvelopeType = reader.GetString(21);
                        }
                        if (reader.IsDBNull(22) == false)
                        {
                            model.EnvelopePrice = reader.GetString(22);
                        }
                        if (reader.IsDBNull(23) == false)
                        {
                            model.Paper = reader.GetString(23);
                        }
                        if (reader.IsDBNull(24) == false)
                        {
                            model.PaperPrice = reader.GetString(24);
                        }
                        if (reader.IsDBNull(25) == false)
                        {
                            model.SM_PrintingSM = reader.GetString(25);
                        }
                        if (reader.IsDBNull(26) == false)
                        {
                            model.SM_SM_Material = reader.GetString(26);
                        }
                        if (reader.IsDBNull(27) == false)
                        {
                            model.SM_FirstInsert = reader.GetString(27);
                        }
                        if (reader.IsDBNull(28) == false)
                        {
                            model.SM_SecondInsert = reader.GetString(28);
                        }
                        if (reader.IsDBNull(29) == false)
                        {
                            model.SM_BrochureInsert = reader.GetString(29);
                        }
                        if (reader.IsDBNull(30) == false)
                        {
                            model.SM_MailBelow_5K = reader.GetString(30);
                        }
                        if (reader.IsDBNull(31) == false)
                        {
                            model.SM_Handling = reader.GetString(31);
                        }
                        if (reader.IsDBNull(32) == false)
                        {
                            model.SM_Sealing = reader.GetString(32);
                        }
                        if (reader.IsDBNull(33) == false)
                        {
                            model.SM_Tearing = reader.GetString(33);
                        }
                        if (reader.IsDBNull(34) == false)
                        {
                            model.SM_Folding = reader.GetString(34);
                        }
                        if (reader.IsDBNull(35) == false)
                        {
                            model.SM_Sticking = reader.GetString(35);
                        }
                        if (reader.IsDBNull(36) == false)
                        {
                            model.SM_Labelling = reader.GetString(36);
                        }
                        if (reader.IsDBNull(37) == false)
                        {
                            model.SM_Matching = reader.GetString(37);
                        }
                        if (reader.IsDBNull(38) == false)
                        {
                            model.SM_CDArchiving = reader.GetString(38);
                        }
                        if (reader.IsDBNull(39) == false)
                        {
                            model.SM_EnvelopeType = reader.GetString(39);
                        }
                        if (reader.IsDBNull(40) == false)
                        {
                            model.SM_EnvelopePrice = reader.GetString(40);
                        }
                        if (reader.IsDBNull(41) == false)
                        {
                            model.SM_Paper = reader.GetString(41);
                        }
                        if (reader.IsDBNull(42) == false)
                        {
                            model.SM_PaperPrice = reader.GetString(42);
                        }
                        if (reader.IsDBNull(43) == false)
                        {
                            model.MMP_PrintingDuplex = reader.GetString(43);
                        }
                        if (reader.IsDBNull(44) == false)
                        {
                            model.MMP_FirstInsert = reader.GetString(44);
                        }
                        if (reader.IsDBNull(45) == false)
                        {
                            model.MMP_SecondInsert = reader.GetString(45);
                        }
                        if (reader.IsDBNull(46) == false)
                        {
                            model.MMP_InsertingMMP = reader.GetString(46);
                        }
                        if (reader.IsDBNull(47) == false)
                        {
                            model.MMP_BrochureInsert = reader.GetString(47);
                        }
                        if (reader.IsDBNull(48) == false)
                        {
                            model.MMP_MailBelow_5K = reader.GetString(48);
                        }
                        if (reader.IsDBNull(49) == false)
                        {
                            model.MMP_Handling = reader.GetString(49);
                        }
                        if (reader.IsDBNull(50) == false)
                        {
                            model.MMP_Sealing = reader.GetString(50);
                        }
                        if (reader.IsDBNull(51) == false)
                        {
                            model.MMP_Tearing = reader.GetString(51);
                        }
                        if (reader.IsDBNull(52) == false)
                        {
                            model.MMP_Folding = reader.GetString(52);
                        }
                        if (reader.IsDBNull(53) == false)
                        {
                            model.MMP_Sticking = reader.GetString(53);
                        }
                        if (reader.IsDBNull(54) == false)
                        {
                            model.MMP_Labelling = reader.GetString(54);
                        }
                        if (reader.IsDBNull(55) == false)
                        {
                            model.MMP_Matching = reader.GetString(55);
                        }
                        if (reader.IsDBNull(56) == false)
                        {
                            model.MMP_CDArchiving = reader.GetString(56);
                        }
                        if (reader.IsDBNull(57) == false)
                        {
                            model.MMP_EnvelopeType = reader.GetString(57);
                        }
                        if (reader.IsDBNull(58) == false)
                        {
                            model.MMP_EnvelopePrice = reader.GetString(58);
                        }
                        if (reader.IsDBNull(59) == false)
                        {
                            model.MMP_Paper = reader.GetString(59);
                        }
                        if (reader.IsDBNull(60) == false)
                        {
                            model.MMP_PaperPrice = reader.GetString(60);
                        }
                        if (reader.IsDBNull(61) == false)
                        {
                            model.DCP_FoldingCharges = reader.GetString(61);
                        }
                        if (reader.IsDBNull(62) == false)
                        {
                            model.DCP_SupplyPrintLabel = reader.GetString(62);
                        }
                        if (reader.IsDBNull(63) == false)
                        {
                            model.DCP_PrintingDuplex = reader.GetString(63);
                        }
                        if (reader.IsDBNull(64) == false)
                        {
                            model.DCP_FirstInsert = reader.GetString(64);
                        }
                        if (reader.IsDBNull(65) == false)
                        {
                            model.DCP_SecondInsert = reader.GetString(65);
                        }
                        if (reader.IsDBNull(66) == false)
                        {
                            model.DCP_BrochureInsert = reader.GetString(66);
                        }
                        if (reader.IsDBNull(67) == false)
                        {
                            model.DCP_MailBelow_5K = reader.GetString(67);
                        }
                        if (reader.IsDBNull(68) == false)
                        {
                            model.DCP_Handling = reader.GetString(68);
                        }
                        if (reader.IsDBNull(69) == false)
                        {
                            model.DCP_Sealing = reader.GetString(69);
                        }
                        if (reader.IsDBNull(70) == false)
                        {
                            model.DCP_Tearing = reader.GetString(70);
                        }
                        if (reader.IsDBNull(71) == false)
                        {
                            model.DCP_Folding = reader.GetString(71);
                        }
                        if (reader.IsDBNull(72) == false)
                        {
                            model.DCP_Sticking = reader.GetString(72);
                        }
                        if (reader.IsDBNull(73) == false)
                        {
                            model.DCP_Labelling = reader.GetString(73);
                        }
                        if (reader.IsDBNull(74) == false)
                        {
                            model.DCP_Matching = reader.GetString(74);
                        }
                        if (reader.IsDBNull(75) == false)
                        {
                            model.DCP_CDArchiving = reader.GetString(75);
                        }
                        if (reader.IsDBNull(76) == false)
                        {
                            model.DCP_EnvelopeType = reader.GetString(76);
                        }
                        if (reader.IsDBNull(77) == false)
                        {
                            model.DCP_EnvelopePrice = reader.GetString(77);
                        }
                        if (reader.IsDBNull(78) == false)
                        {
                            model.DCP_Paper = reader.GetString(78);
                        }
                        if (reader.IsDBNull(79) == false)
                        {
                            model.DCP_PaperPrice = reader.GetString(79);
                        }
                        if (reader.IsDBNull(80) == false)
                        {
                            model.RM_Printing = reader.GetString(80);
                        }
                        if (reader.IsDBNull(81) == false)
                        {
                            model.RM_Selfmailer = reader.GetString(81);
                        }
                        if (reader.IsDBNull(82) == false)
                        {
                            model.RM_FirstInsert = reader.GetString(82);
                        }
                        if (reader.IsDBNull(83) == false)
                        {
                            model.RM_SecondInsert = reader.GetString(83);
                        }
                        if (reader.IsDBNull(84) == false)
                        {
                            model.RM_BrochureInsert = reader.GetString(84);
                        }
                        if (reader.IsDBNull(85) == false)
                        {
                            model.RM_MailBelow_5K = reader.GetString(85);
                        }
                        if (reader.IsDBNull(86) == false)
                        {
                            model.RM_Handling = reader.GetString(86);
                        }
                        if (reader.IsDBNull(87) == false)
                        {
                            model.RM_Sealing = reader.GetString(87);
                        }
                        if (reader.IsDBNull(88) == false)
                        {
                            model.RM_Tearing = reader.GetString(88);
                        }
                        if (reader.IsDBNull(89) == false)
                        {
                            model.RM_Folding = reader.GetString(89);
                        }
                        if (reader.IsDBNull(90) == false)
                        {
                            model.RM_Sticking = reader.GetString(90);
                        }
                        if (reader.IsDBNull(91) == false)
                        {
                            model.RM_Labelling = reader.GetString(91);
                        }
                        if (reader.IsDBNull(92) == false)
                        {
                            model.RM_Matching = reader.GetString(92);
                        }
                        if (reader.IsDBNull(93) == false)
                        {
                            model.RM_CDArchiving = reader.GetString(93);
                        }
                        if (reader.IsDBNull(94) == false)
                        {
                            model.RM_Mix = reader.GetString(94);
                        }
                        if (reader.IsDBNull(95) == false)
                        {
                            model.RM_LabellingRegsterMails = reader.GetString(95);
                        }
                        if (reader.IsDBNull(96) == false)
                        {
                            model.RM_EnvelopeType = reader.GetString(96);
                        }
                        if (reader.IsDBNull(97) == false)
                        {
                            model.RM_EnvelopePrice = reader.GetString(97);
                        }
                        if (reader.IsDBNull(98) == false)
                        {
                            model.RM_Paper = reader.GetString(98);
                        }
                        if (reader.IsDBNull(99) == false)
                        {
                            model.RM_PaperPrice = reader.GetString(99);
                        }

                        Pricinglist.Add(model);
                    }

                }
                cn.Close();
            }
        }

        return View(Pricinglist);

    }



    public ActionResult AddPricingSchedule(string Id, string Customer_Name, string ProductName, string CreatedBy, string JobName)
    {

        var IdentityName = @Session["Fullname"];
        var Role = @Session["Role"];
        ViewBag.IsDepart = @Session["Department"];
        ViewBag.AccountManager = IdentityName.ToString();

        ViewBag.Customer_Name = Customer_Name;
        ViewBag.Id = Id;

        int _bil = 1;
        List<SelectListItem> li = new List<SelectListItem>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT DISTINCT Customer_Name FROM [IflowSeed].[dbo].[CustomerProduct]                          
                                     ORDER BY Customer_Name";
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                PricingSchedule model = new PricingSchedule();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Customer_Name = reader.GetString(0);
                    }
                }
                int i = _bil++;
                if (i == 1)
                {
                    li.Add(new SelectListItem { Text = "Please Select" });
                }
                li.Add(new SelectListItem { Text = model.Customer_Name });
            }
            cn.Close();
        }
        ViewData["Customer_"] = li;


        if (!string.IsNullOrEmpty(Customer_Name))
        {
            int _bil2 = 1;
            List<SelectListItem> li3 = new List<SelectListItem>();
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                cn.Open();
                command.CommandText = @"SELECT DISTINCT ProductName FROM [IflowSeed].[dbo].[CustomerProduct]    
                                     WHERE Customer_Name=@Customer_Name                            
                                     ORDER BY ProductName";
                command.Parameters.AddWithValue("@Customer_Name", Customer_Name);
                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    PricingSchedule model = new PricingSchedule();
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            model.JobName = reader.GetString(0);
                        }
                    }
                    int i = _bil2++;
                    if (i == 1)
                    {
                        li3.Add(new SelectListItem { Text = "Please Select" });
                    }
                    li3.Add(new SelectListItem { Text = model.JobName });
                }
                cn.Close();
            }
            ViewData["Product_"] = li3;
        }
        else
        {
            List<SelectListItem> li3 = new List<SelectListItem>();
            li3.Add(new SelectListItem { Text = "Please Select" });
            ViewData["Product_"] = li3;
        }



        if (string.IsNullOrEmpty(Id) && Customer_Name != "Please Select" && JobName != "Please Select" && !string.IsNullOrEmpty(Customer_Name) && !string.IsNullOrEmpty(JobName))
        {
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            {
                Guid Idx = Guid.NewGuid();
                string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");

                cn.Open();
                SqlCommand command;
                command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[PricingSchedule] (Id, Customer_Name, JobName, CreatedBy) values (@Id, @Customer_Name, @JobName, @CreatedBy)", cn);
                command.Parameters.AddWithValue("@Id", Idx);
                command.Parameters.AddWithValue("@Customer_Name", Customer_Name);
                command.Parameters.AddWithValue("@JobName", JobName);
                command.Parameters.AddWithValue("@CreatedBy", IdentityName.ToString());
                command.ExecuteNonQuery();
                cn.Close();
            }
            //bila save akn gi kt managecustomer
            return RedirectToAction("ManagePricingSchedule", "Finance");
        }



        if (!string.IsNullOrEmpty(Id))
        {
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                cn.Open();
                command.CommandText = @"SELECT Id, Customer_Name, JobName, CreatedBy
                                       FROM [IflowSeed].[dbo].[PricingSchedule]                              
                                     WHERE Id=@Id";
                command.Parameters.AddWithValue("@Id", Id);
                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Id = reader.GetGuid(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.Customer_Name = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.JobName = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.CreatedBy = reader.GetString(3);
                    }

                }
                cn.Close();
            }
        }



        return View();
    }

    [ValidateInput(false)]
    //public ActionResult CreateMaterials(string Id, string QuantityItem, string Paper, string Movement, string RequestorName, string Department, string Remark, string Date, string RefIventory, string CreatedOn, string TblInventoryId, string amount, string set, string Quantity, string BalanceQuantity, string totalvalue, string PricePerUnit, string ItemName, string VendorName, string GrandTotal, string TotalAmount, string descr, string Volume, string Rate, string Process, string totalamount, string Newprocess, string VolumePaper, string RatePaper, string RateEnv, string VolumeEnv, string Env, string Sst)
    //{
    //    {
    //        ViewBag.set = Session["set"];
    //        var Role = @Session["Role"];
    //        ViewBag.Role = Role;

    //        Session["Id"] = Id;



    //        Guid Idx = Guid.NewGuid();
    //        Session["Idx"] = Idx;

    //        @Session["totalamount"] = totalamount;



    //        if (!string.IsNullOrEmpty(Id))
    //        {
    //            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
    //            using (SqlCommand command = new SqlCommand("", cn))
    //            {



    //                cn.Open();
    //                command.CommandText = @"SELECT
    //                                        SUM((CASE WHEN ISNUMERIC(TotalAmountPaper)=1
    //                                        THEN CONVERT(MONEY,TotalAmountPaper) ELSE 0 END)
    //                                        )
    //                                        AS [GrandTotalPaper]
    //                                     FROM [IflowSeed].[dbo].[TblMaterials]
    //                                     WHERE JobInstructionId=@Id";
    //                command.Parameters.AddWithValue("@Id", Id);
    //                var reader = command.ExecuteReader();
    //                while (reader.Read())
    //                {
    //                    if (reader.IsDBNull(0) == false)
    //                    {
    //                        //ViewBag.GrandTotal = reader.GetDecimal(0);
    //                        //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
    //                        ViewBag.GrandTotalPaper = string.Format("{0:n}", reader.GetDecimal(0));


    //                    }


    //                }
    //                cn.Close();

    //            }

    //            if (!string.IsNullOrEmpty(Id))
    //            {
    //                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
    //                using (SqlCommand command = new SqlCommand("", cn))
    //                {



    //                    cn.Open();
    //                    command.CommandText = @"SELECT
    //                                        SUM((CASE WHEN ISNUMERIC(TotalAmountEnv)=1
    //                                        THEN CONVERT(MONEY,TotalAmountEnv) ELSE 0 END)
    //                                        )
    //                                        AS [GrandTotalEnv]
    //                                     FROM [IflowSeed].[dbo].[TblMaterials]
    //                                     WHERE JobInstructionId=@Id";
    //                    command.Parameters.AddWithValue("@Id", Id);
    //                    var reader = command.ExecuteReader();
    //                    while (reader.Read())
    //                    {
    //                        if (reader.IsDBNull(0) == false)
    //                        {
    //                            //ViewBag.GrandTotal = reader.GetDecimal(0);
    //                            //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
    //                            ViewBag.GrandTotalEnv = string.Format("{0:n}", reader.GetDecimal(0));


    //                        }


    //                    }
    //                    cn.Close();

    //                }
    //            }

    //            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
    //            using (SqlCommand command = new SqlCommand("", cn))
    //            {

    //                cn.Open();
    //                command.CommandText = @"SELECT
    //                                        SUM((CASE WHEN ISNUMERIC(VolumePaper)=1
    //                                        THEN CONVERT(MONEY,VolumePaper) ELSE 0 END)
    //                                        )
    //                                        AS [TotalV]
    //                                     FROM [IflowSeed].[dbo].[TblMaterials]
    //                                     WHERE Id=@Id";
    //                command.Parameters.AddWithValue("@Id", Id);
    //                var reader = command.ExecuteReader();
    //                while (reader.Read())
    //                {
    //                    if (reader.IsDBNull(0) == false)
    //                    {
    //                        ViewBag.TotalV = reader.GetDecimal(0);
    //                        Console.WriteLine();
    //                        Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
    //                        Console.WriteLine(value.ToString("N"));


    //                    }


    //                }
    //                cn.Close();
    //            }

    //            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
    //            using (SqlCommand command = new SqlCommand("", cn))
    //            {

    //                cn.Open();
    //                command.CommandText = @"SELECT
    //                                        SUM((CASE WHEN ISNUMERIC(VolumeEnv)=1
    //                                        THEN CONVERT(MONEY,VolumeEnv) ELSE 0 END)
    //                                        )
    //                                        AS [TotalV]
    //                                     FROM [IflowSeed].[dbo].[TblMaterials]
    //                                     WHERE Id=@Id";
    //                command.Parameters.AddWithValue("@Id", Id);
    //                var reader = command.ExecuteReader();
    //                while (reader.Read())
    //                {
    //                    if (reader.IsDBNull(0) == false)
    //                    {
    //                        ViewBag.TotalV = reader.GetDecimal(0);
    //                        Console.WriteLine();
    //                        Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
    //                        Console.WriteLine(value.ToString("N"));


    //                    }


    //                }
    //                cn.Close();
    //            }


    //            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
    //            using (SqlCommand command = new SqlCommand("", cn))
    //            {
    //                cn.Open();
    //                command.CommandText = @"SELECT
    //                                        SUM((CASE WHEN ISNUMERIC(RatePaper)=1
    //                                        THEN CONVERT(MONEY,RatePaper) ELSE 0 END)
    //                                        )
    //                                        AS [TotalR]
    //                                     FROM [IflowSeed].[dbo].[TblMaterials]
    //                                     WHERE Id=@Id";
    //                command.Parameters.AddWithValue("@Id", Id);
    //                var reader = command.ExecuteReader();
    //                while (reader.Read())
    //                {
    //                    if (reader.IsDBNull(0) == false)
    //                    {
    //                        ViewBag.TotalR = reader.GetDecimal(0);
    //                        Console.WriteLine();
    //                        Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
    //                        Console.WriteLine(value.ToString("N"));
    //                    }


    //                }
    //                cn.Close();
    //            }


    //            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
    //            using (SqlCommand command = new SqlCommand("", cn))
    //            {
    //                cn.Open();
    //                command.CommandText = @"SELECT
    //                                        SUM((CASE WHEN ISNUMERIC(RatePaper)=1
    //                                        THEN CONVERT(MONEY,RatePaper) ELSE 0 END)
    //                                        )
    //                                        AS [TotalR]
    //                                     FROM [IflowSeed].[dbo].[TblMaterials]
    //                                     WHERE Id=@Id";
    //                command.Parameters.AddWithValue("@Id", Id);
    //                var reader = command.ExecuteReader();
    //                while (reader.Read())
    //                {
    //                    if (reader.IsDBNull(0) == false)
    //                    {
    //                        ViewBag.TotalR = reader.GetDecimal(0);
    //                        Console.WriteLine();
    //                        Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
    //                        Console.WriteLine(value.ToString("N"));
    //                    }


    //                }
    //                cn.Close();
    //            }
    //        }




    //        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(VolumePaper) && !string.IsNullOrEmpty(RatePaper))
    //        {
    //            ViewBag.Id = Id;



    //            double z = Convert.ToDouble(VolumePaper);
    //            if (!string.IsNullOrEmpty(RatePaper))
    //            {
    //                double y = Convert.ToDouble(RatePaper);
    //                totalValuePaper = z * y;
    //                double grandtotal = z * y;
    //            }
    //            else
    //            {
    //                double y = Convert.ToDouble(Rate);
    //                totalValuePaper = z + y;
    //                double grandtotal = z + y;
    //            }
    //        }


    //        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(VolumeEnv) && !string.IsNullOrEmpty(RateEnv))
    //        {
    //            ViewBag.Id = Id;



    //            double z = Convert.ToDouble(VolumeEnv);
    //            if (!string.IsNullOrEmpty(RateEnv))
    //            {
    //                double y = Convert.ToDouble(RateEnv);
    //                totalValueEnv = z * y;
    //                double grandtotal = z * y;
    //            }
    //            else
    //            {
    //                double y = Convert.ToDouble(RateEnv);
    //                totalValueEnv = z + y;
    //                double grandtotal = z + y;
    //            }
    //        }




    //        if (!string.IsNullOrEmpty(VolumePaper))

    //        {
    //            using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
    //            {


    //                //get.Date = Convert.ToDateTime(get.DateTxt);

    //                string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
    //                double QUItem = Convert.ToDouble(QuantityItem);

    //                cn2.Open();

    //                SqlCommand command;
    //                command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblMaterials] (Id,VolumePaper,JobInstructionId,CreatedOn,TotalAmountPaper,VolumeEnv,RatePaper,Paper,Env,RateEnv,TotalAmountEnv,Sst) " +
    //                           "VALUES(@Id,@VolumePaper,@JobInstructionId,@CreatedOn,@TotalAmountPaper,@VolumeEnv,@RatePaper,@Paper,@Env,@RateEnv,@TotalAmountEnv,@Sst)", cn2);
    //                command.Parameters.AddWithValue("@Id", Idx);

    //                if (!string.IsNullOrEmpty(VolumePaper))
    //                {
    //                    command.Parameters.AddWithValue("@VolumePaper", VolumePaper);
    //                }
    //                else
    //                {
    //                    command.Parameters.AddWithValue("@VolumePaper", DBNull.Value);
    //                    TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
    //                    return RedirectToAction("CreateMaterials", "Finance");

    //                }

    //                command.Parameters.AddWithValue("@JobInstructionId", Id);
    //                command.Parameters.AddWithValue("@CreatedOn", createdOn);
    //                command.Parameters.AddWithValue("@TotalAmountPaper", totalValuePaper.ToString("#,###,##0.00"));
    //                if (!string.IsNullOrEmpty(VolumeEnv))
    //                {
    //                    command.Parameters.AddWithValue("@VolumeEnv", VolumeEnv);
    //                }
    //                else
    //                {
    //                    command.Parameters.AddWithValue("@VolumeEnv", DBNull.Value);
    //                }
    //                if (!string.IsNullOrEmpty(RatePaper))
    //                {
    //                    command.Parameters.AddWithValue("@RatePaper", RatePaper);
    //                }
    //                else
    //                {
    //                    command.Parameters.AddWithValue("@RatePaper", DBNull.Value);
    //                }
    //                if (!string.IsNullOrEmpty(Paper))
    //                {
    //                    command.Parameters.AddWithValue("@Paper", Paper);
    //                }
    //                else
    //                {
    //                    command.Parameters.AddWithValue("@Paper", DBNull.Value);
    //                }
    //                if (!string.IsNullOrEmpty(Env))
    //                {
    //                    command.Parameters.AddWithValue("@Env", Env);
    //                }
    //                else
    //                {
    //                    command.Parameters.AddWithValue("@Env", DBNull.Value);
    //                }
    //                if (!string.IsNullOrEmpty(RateEnv))
    //                {
    //                    command.Parameters.AddWithValue("@RateEnv", RateEnv);
    //                }
    //                else
    //                {
    //                    command.Parameters.AddWithValue("@RateEnv", DBNull.Value);
    //                }
    //                command.Parameters.AddWithValue("@TotalAmountEnv", totalValueEnv.ToString("#,###,##0.00"));
    //                command.Parameters.AddWithValue("@Sst", Sst);
    //                command.ExecuteNonQuery();
    //                cn2.Close();

    //                cn2.Open();




    //            }


    //        }
    //        return View();



    //    }



    //}

    public ActionResult CreateMaterials(string Id, string QuantityItem, string Paper, string Movement, string RequestorName, string Department, string Remark, string Date, string RefIventory, string CreatedOn, string TblInventoryId, string amount, string set, string Quantity, string BalanceQuantity, string totalvalue, string PricePerUnit, string ItemName, string VendorName, string GrandTotal, string TotalAmount, string descr, string Volume, string Rate, string Process, string totalamount, string Newprocess, string VolumePaper, string RatePaper, string RateEnv, string VolumeEnv, string Env, string Sst)
    {
        {
            ViewBag.set = Session["set"];
            var Role = @Session["Role"];
            ViewBag.Role = Role;

            Session["Id"] = Id;



            Guid Idx = Guid.NewGuid();
            Session["Idx"] = Idx;

            @Session["totalamount"] = totalamount;



            if (!string.IsNullOrEmpty(Id))
            {
                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                using (SqlCommand command = new SqlCommand("", cn))
                {



                    cn.Open();
                    command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(TotalAmountPaper)=1
                                            THEN CONVERT(MONEY,TotalAmountPaper) ELSE 0 END)
                                            )
                                            AS [GrandTotalPaper]
                                         FROM [IflowSeed].[dbo].[TblMaterials]
                                         WHERE JobInstructionId=@Id";
                    command.Parameters.AddWithValue("@Id", Id);
                    var reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            //ViewBag.GrandTotal = reader.GetDecimal(0);
                            //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                            ViewBag.GrandTotalPaper = string.Format("{0:n}", reader.GetDecimal(0));


                        }


                    }
                    cn.Close();

                }

                if (!string.IsNullOrEmpty(Id))
                {
                    using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                    using (SqlCommand command = new SqlCommand("", cn))
                    {



                        cn.Open();
                        command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(TotalAmountEnv)=1
                                            THEN CONVERT(MONEY,TotalAmountEnv) ELSE 0 END)
                                            )
                                            AS [GrandTotalEnv]
                                         FROM [IflowSeed].[dbo].[TblMaterials]
                                         WHERE JobInstructionId=@Id";
                        command.Parameters.AddWithValue("@Id", Id);
                        var reader = command.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader.IsDBNull(0) == false)
                            {
                                //ViewBag.GrandTotal = reader.GetDecimal(0);
                                //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                                ViewBag.GrandTotalEnv = string.Format("{0:n}", reader.GetDecimal(0));


                            }


                        }
                        cn.Close();

                    }
                }

                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                using (SqlCommand command = new SqlCommand("", cn))
                {

                    cn.Open();
                    command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(VolumePaper)=1
                                            THEN CONVERT(MONEY,VolumePaper) ELSE 0 END)
                                            )
                                            AS [TotalV]
                                         FROM [IflowSeed].[dbo].[TblMaterials]
                                         WHERE Id=@Id";
                    command.Parameters.AddWithValue("@Id", Id);
                    var reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            ViewBag.TotalV = reader.GetDecimal(0);
                            Console.WriteLine();
                            Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
                            Console.WriteLine(value.ToString("N"));


                        }


                    }
                    cn.Close();
                }

                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                using (SqlCommand command = new SqlCommand("", cn))
                {

                    cn.Open();
                    command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(VolumeEnv)=1
                                            THEN CONVERT(MONEY,VolumeEnv) ELSE 0 END)
                                            )
                                            AS [TotalV]
                                         FROM [IflowSeed].[dbo].[TblMaterials]
                                         WHERE Id=@Id";
                    command.Parameters.AddWithValue("@Id", Id);
                    var reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            ViewBag.TotalV = reader.GetDecimal(0);
                            Console.WriteLine();
                            Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
                            Console.WriteLine(value.ToString("N"));


                        }


                    }
                    cn.Close();
                }


                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                using (SqlCommand command = new SqlCommand("", cn))
                {
                    cn.Open();
                    command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(RatePaper)=1
                                            THEN CONVERT(MONEY,RatePaper) ELSE 0 END)
                                            )
                                            AS [TotalR]
                                         FROM [IflowSeed].[dbo].[TblMaterials]
                                         WHERE Id=@Id";
                    command.Parameters.AddWithValue("@Id", Id);
                    var reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            ViewBag.TotalR = reader.GetDecimal(0);
                            Console.WriteLine();
                            Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
                            Console.WriteLine(value.ToString("N"));
                        }


                    }
                    cn.Close();
                }


                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                using (SqlCommand command = new SqlCommand("", cn))
                {
                    cn.Open();
                    command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(RatePaper)=1
                                            THEN CONVERT(MONEY,RatePaper) ELSE 0 END)
                                            )
                                            AS [TotalR]
                                         FROM [IflowSeed].[dbo].[TblMaterials]
                                         WHERE Id=@Id";
                    command.Parameters.AddWithValue("@Id", Id);
                    var reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            ViewBag.TotalR = reader.GetDecimal(0);
                            Console.WriteLine();
                            Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
                            Console.WriteLine(value.ToString("N"));
                        }


                    }
                    cn.Close();
                }
            }




            if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(VolumePaper) && !string.IsNullOrEmpty(RatePaper))
            {
                ViewBag.Id = Id;



                double z = Convert.ToDouble(VolumePaper);
                if (!string.IsNullOrEmpty(RatePaper))
                {
                    double y = Convert.ToDouble(RatePaper);
                    totalValuePaper = z * y;
                    double grandtotal = z * y;
                }
                else
                {
                    double y = Convert.ToDouble(Rate);
                    totalValuePaper = z + y;
                    double grandtotal = z + y;
                }
            }


            if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(VolumeEnv) && !string.IsNullOrEmpty(RateEnv))
            {
                ViewBag.Id = Id;



                double z = Convert.ToDouble(VolumeEnv);
                if (!string.IsNullOrEmpty(RateEnv))
                {
                    double y = Convert.ToDouble(RateEnv);
                    totalValueEnv = z * y;
                    double grandtotal = z * y;
                }
                else
                {
                    double y = Convert.ToDouble(RateEnv);
                    totalValueEnv = z + y;
                    double grandtotal = z + y;
                }
            }



            int _bil21 = 1;
            List<SelectListItem> li2 = new List<SelectListItem>();
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                cn.Open();
                command.CommandText = @"SELECT DISTINCT Paper FROM [IflowSeed].[dbo].[PaperInfo]                          
                                     ORDER BY Paper";
                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    JobInstruction model = new JobInstruction();
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            model.Paper = reader.GetString(0);
                        }
                    }
                    int i = _bil21++;
                    if (i == 1)
                    {
                        li2.Add(new SelectListItem { Text = "Please Select" });
                        li2.Add(new SelectListItem { Text = model.Paper });

                    }
                    else
                    {
                        li2.Add(new SelectListItem { Text = model.Paper });
                    }
                }
                cn.Close();
            }
            ViewData["Paper_"] = li2;

            int _bil20 = 1;
            List<SelectListItem> li7 = new List<SelectListItem>();
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                cn.Open();
                command.CommandText = @"SELECT DISTINCT Description FROM [IflowSeed].[dbo].[MaterialCharges]          
                                    WHERE MaterialType='Envelope' ";
                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    JobInstruction model = new JobInstruction();
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            model.EnvelopeType = reader.GetString(0);
                        }
                    }
                    int i = _bil20++;
                    if (i == 1)
                    {
                        li7.Add(new SelectListItem { Text = "Please Select" });
                        li7.Add(new SelectListItem { Text = model.EnvelopeType });

                    }
                    else
                    {
                        li7.Add(new SelectListItem { Text = model.EnvelopeType });
                    }
                }
                cn.Close();
            }
            ViewData["EnvelopeType_"] = li7;


            if (!string.IsNullOrEmpty(VolumePaper))

            {
                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {


                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                    double QUItem = Convert.ToDouble(QuantityItem);

                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblMaterials] (Id,VolumePaper,JobInstructionId,CreatedOn,TotalAmountPaper,VolumeEnv,RatePaper,Paper,Env,RateEnv,TotalAmountEnv,Sst) " +
                               "VALUES(@Id,@VolumePaper,@JobInstructionId,@CreatedOn,@TotalAmountPaper,@VolumeEnv,@RatePaper,@Paper,@Env,@RateEnv,@TotalAmountEnv,@Sst)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(VolumePaper))
                    {
                        command.Parameters.AddWithValue("@VolumePaper", VolumePaper);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumePaper", DBNull.Value);
                        TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
                        return RedirectToAction("CreateMaterials", "Finance");

                    }

                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);
                    command.Parameters.AddWithValue("@TotalAmountPaper", totalValuePaper.ToString("#,###,##0.00"));
                    if (!string.IsNullOrEmpty(VolumeEnv))
                    {
                        command.Parameters.AddWithValue("@VolumeEnv", VolumeEnv);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeEnv", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RatePaper))
                    {
                        command.Parameters.AddWithValue("@RatePaper", RatePaper);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RatePaper", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(Paper))
                    {
                        command.Parameters.AddWithValue("@Paper", Paper);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Paper", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(Env))
                    {
                        command.Parameters.AddWithValue("@Env", Env);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Env", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RateEnv))
                    {
                        command.Parameters.AddWithValue("@RateEnv", RateEnv);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateEnv", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@TotalAmountEnv", totalValueEnv.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Sst", Sst);
                    command.ExecuteNonQuery();
                    cn2.Close();

                    cn2.Open();




                }


            }
            return View();



        }



    }




    [ValidateInput(false)]
    //public ActionResult CreateMaterials2(string Id, string QuantityItem, string Paper, string Movement, string RequestorName, string Department, string Remark, string Date, string RefIventory, string CreatedOn, string TblInventoryId, string amount, string set, string Quantity, string BalanceQuantity, string totalvalue, string PricePerUnit, string ItemName, string VendorName, string GrandTotal, string TotalAmount, string descr, string Volume, string Rate, string Process, string totalamount, string Newprocess, string VolumePaper, string RatePaper, string RateEnv, string VolumeEnv, string Env, string Sst)
    //{
    //    {
    //        ViewBag.set = Session["set"];
    //        var Role = @Session["Role"];
    //        ViewBag.Role = Role;

    //        Session["Id"] = Id;



    //        Guid Idx = Guid.NewGuid();
    //        Session["Idx"] = Idx;

    //        @Session["totalamount"] = totalamount;



    //        if (!string.IsNullOrEmpty(Id))
    //        {
    //            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
    //            using (SqlCommand command = new SqlCommand("", cn))
    //            {



    //                cn.Open();
    //                command.CommandText = @"SELECT
    //                                        SUM((CASE WHEN ISNUMERIC(TotalAmountPaper)=1
    //                                        THEN CONVERT(MONEY,TotalAmountPaper) ELSE 0 END)
    //                                        )
    //                                        AS [GrandTotalPaper]
    //                                     FROM [IflowSeed].[dbo].[TblMaterials]
    //                                     WHERE JobInstructionId=@Id";
    //                command.Parameters.AddWithValue("@Id", Id);
    //                var reader = command.ExecuteReader();
    //                while (reader.Read())
    //                {
    //                    if (reader.IsDBNull(0) == false)
    //                    {
    //                        //ViewBag.GrandTotal = reader.GetDecimal(0);
    //                        //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
    //                        ViewBag.GrandTotalPaper = string.Format("{0:n}", reader.GetDecimal(0));


    //                    }


    //                }
    //                cn.Close();

    //            }

    //            if (!string.IsNullOrEmpty(Id))
    //            {
    //                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
    //                using (SqlCommand command = new SqlCommand("", cn))
    //                {



    //                    cn.Open();
    //                    command.CommandText = @"SELECT
    //                                        SUM((CASE WHEN ISNUMERIC(TotalAmountEnv)=1
    //                                        THEN CONVERT(MONEY,TotalAmountEnv) ELSE 0 END)
    //                                        )
    //                                        AS [GrandTotalEnv]
    //                                     FROM [IflowSeed].[dbo].[TblMaterials]
    //                                     WHERE JobInstructionId=@Id";
    //                    command.Parameters.AddWithValue("@Id", Id);
    //                    var reader = command.ExecuteReader();
    //                    while (reader.Read())
    //                    {
    //                        if (reader.IsDBNull(0) == false)
    //                        {
    //                            //ViewBag.GrandTotal = reader.GetDecimal(0);
    //                            //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
    //                            ViewBag.GrandTotalEnv = string.Format("{0:n}", reader.GetDecimal(0));


    //                        }


    //                    }
    //                    cn.Close();

    //                }
    //            }

    //            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
    //            using (SqlCommand command = new SqlCommand("", cn))
    //            {

    //                cn.Open();
    //                command.CommandText = @"SELECT
    //                                        SUM((CASE WHEN ISNUMERIC(VolumePaper)=1
    //                                        THEN CONVERT(MONEY,VolumePaper) ELSE 0 END)
    //                                        )
    //                                        AS [TotalV]
    //                                     FROM [IflowSeed].[dbo].[TblMaterials]
    //                                     WHERE Id=@Id";
    //                command.Parameters.AddWithValue("@Id", Id);
    //                var reader = command.ExecuteReader();
    //                while (reader.Read())
    //                {
    //                    if (reader.IsDBNull(0) == false)
    //                    {
    //                        ViewBag.TotalV = reader.GetDecimal(0);
    //                        Console.WriteLine();
    //                        Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
    //                        Console.WriteLine(value.ToString("N"));


    //                    }


    //                }
    //                cn.Close();
    //            }

    //            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
    //            using (SqlCommand command = new SqlCommand("", cn))
    //            {

    //                cn.Open();
    //                command.CommandText = @"SELECT
    //                                        SUM((CASE WHEN ISNUMERIC(VolumeEnv)=1
    //                                        THEN CONVERT(MONEY,VolumeEnv) ELSE 0 END)
    //                                        )
    //                                        AS [TotalV]
    //                                     FROM [IflowSeed].[dbo].[TblMaterials]
    //                                     WHERE Id=@Id";
    //                command.Parameters.AddWithValue("@Id", Id);
    //                var reader = command.ExecuteReader();
    //                while (reader.Read())
    //                {
    //                    if (reader.IsDBNull(0) == false)
    //                    {
    //                        ViewBag.TotalV = reader.GetDecimal(0);
    //                        Console.WriteLine();
    //                        Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
    //                        Console.WriteLine(value.ToString("N"));


    //                    }


    //                }
    //                cn.Close();
    //            }


    //            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
    //            using (SqlCommand command = new SqlCommand("", cn))
    //            {
    //                cn.Open();
    //                command.CommandText = @"SELECT
    //                                        SUM((CASE WHEN ISNUMERIC(RatePaper)=1
    //                                        THEN CONVERT(MONEY,RatePaper) ELSE 0 END)
    //                                        )
    //                                        AS [TotalR]
    //                                     FROM [IflowSeed].[dbo].[TblMaterials]
    //                                     WHERE Id=@Id";
    //                command.Parameters.AddWithValue("@Id", Id);
    //                var reader = command.ExecuteReader();
    //                while (reader.Read())
    //                {
    //                    if (reader.IsDBNull(0) == false)
    //                    {
    //                        ViewBag.TotalR = reader.GetDecimal(0);
    //                        Console.WriteLine();
    //                        Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
    //                        Console.WriteLine(value.ToString("N"));
    //                    }


    //                }
    //                cn.Close();
    //            }


    //            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
    //            using (SqlCommand command = new SqlCommand("", cn))
    //            {
    //                cn.Open();
    //                command.CommandText = @"SELECT
    //                                        SUM((CASE WHEN ISNUMERIC(RatePaper)=1
    //                                        THEN CONVERT(MONEY,RatePaper) ELSE 0 END)
    //                                        )
    //                                        AS [TotalR]
    //                                     FROM [IflowSeed].[dbo].[TblMaterials]
    //                                     WHERE Id=@Id";
    //                command.Parameters.AddWithValue("@Id", Id);
    //                var reader = command.ExecuteReader();
    //                while (reader.Read())
    //                {
    //                    if (reader.IsDBNull(0) == false)
    //                    {
    //                        ViewBag.TotalR = reader.GetDecimal(0);
    //                        Console.WriteLine();
    //                        Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
    //                        Console.WriteLine(value.ToString("N"));
    //                    }


    //                }
    //                cn.Close();
    //            }
    //        }




    //        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(VolumePaper) && !string.IsNullOrEmpty(RatePaper))
    //        {
    //            ViewBag.Id = Id;



    //            double z = Convert.ToDouble(VolumePaper);
    //            if (!string.IsNullOrEmpty(RatePaper))
    //            {
    //                double y = Convert.ToDouble(RatePaper);
    //                totalValuePaper = z * y;
    //                double grandtotal = z * y;
    //            }
    //            else
    //            {
    //                double y = Convert.ToDouble(Rate);
    //                totalValuePaper = z + y;
    //                double grandtotal = z + y;
    //            }
    //        }


    //        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(VolumeEnv) && !string.IsNullOrEmpty(RateEnv))
    //        {
    //            ViewBag.Id = Id;



    //            double z = Convert.ToDouble(VolumeEnv);
    //            if (!string.IsNullOrEmpty(RateEnv))
    //            {
    //                double y = Convert.ToDouble(RateEnv);
    //                totalValueEnv = z * y;
    //                double grandtotal = z * y;
    //            }
    //            else
    //            {
    //                double y = Convert.ToDouble(RateEnv);
    //                totalValueEnv = z + y;
    //                double grandtotal = z + y;
    //            }
    //        }




    //        if (!string.IsNullOrEmpty(VolumePaper))

    //        {
    //            using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
    //            {


    //                //get.Date = Convert.ToDateTime(get.DateTxt);

    //                string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
    //                double QUItem = Convert.ToDouble(QuantityItem);

    //                cn2.Open();

    //                SqlCommand command;
    //                command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblMaterials] (Id,VolumePaper,JobInstructionId,CreatedOn,TotalAmountPaper,VolumeEnv,RatePaper,Paper,Env,RateEnv,TotalAmountEnv,Sst) " +
    //                           "VALUES(@Id,@VolumePaper,@JobInstructionId,@CreatedOn,@TotalAmountPaper,@VolumeEnv,@RatePaper,@Paper,@Env,@RateEnv,@TotalAmountEnv,@Sst)", cn2);
    //                command.Parameters.AddWithValue("@Id", Idx);

    //                if (!string.IsNullOrEmpty(VolumePaper))
    //                {
    //                    command.Parameters.AddWithValue("@VolumePaper", VolumePaper);
    //                }
    //                else
    //                {
    //                    command.Parameters.AddWithValue("@VolumePaper", DBNull.Value);
    //                    TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
    //                    return RedirectToAction("CreateMaterials", "Finance");

    //                }

    //                command.Parameters.AddWithValue("@JobInstructionId", Id);
    //                command.Parameters.AddWithValue("@CreatedOn", createdOn);
    //                command.Parameters.AddWithValue("@TotalAmountPaper", totalValuePaper.ToString("#,###,##0.00"));
    //                if (!string.IsNullOrEmpty(VolumeEnv))
    //                {
    //                    command.Parameters.AddWithValue("@VolumeEnv", VolumeEnv);
    //                }
    //                else
    //                {
    //                    command.Parameters.AddWithValue("@VolumeEnv", DBNull.Value);
    //                }
    //                if (!string.IsNullOrEmpty(RatePaper))
    //                {
    //                    command.Parameters.AddWithValue("@RatePaper", RatePaper);
    //                }
    //                else
    //                {
    //                    command.Parameters.AddWithValue("@RatePaper", DBNull.Value);
    //                }
    //                if (!string.IsNullOrEmpty(Paper))
    //                {
    //                    command.Parameters.AddWithValue("@Paper", Paper);
    //                }
    //                else
    //                {
    //                    command.Parameters.AddWithValue("@Paper", DBNull.Value);
    //                }
    //                if (!string.IsNullOrEmpty(Env))
    //                {
    //                    command.Parameters.AddWithValue("@Env", Env);
    //                }
    //                else
    //                {
    //                    command.Parameters.AddWithValue("@Env", DBNull.Value);
    //                }
    //                if (!string.IsNullOrEmpty(RateEnv))
    //                {
    //                    command.Parameters.AddWithValue("@RateEnv", RateEnv);
    //                }
    //                else
    //                {
    //                    command.Parameters.AddWithValue("@RateEnv", DBNull.Value);
    //                }
    //                command.Parameters.AddWithValue("@TotalAmountEnv", totalValueEnv.ToString("#,###,##0.00"));
    //                command.Parameters.AddWithValue("@Sst", Sst);
    //                command.ExecuteNonQuery();
    //                cn2.Close();

    //                cn2.Open();




    //            }


    //        }
    //        return View();



    //    }



    //}

    public ActionResult CreateMaterials2(string Id, string QuantityItem, string Paper, string Movement, string RequestorName, string Department, string Remark, string Date, string RefIventory, string CreatedOn, string TblInventoryId, string amount, string set, string Quantity, string BalanceQuantity, string totalvalue, string PricePerUnit, string ItemName, string VendorName, string GrandTotal, string TotalAmount, string descr, string Volume, string Rate, string Process, string totalamount, string Newprocess, string VolumePaper, string RatePaper, string RateEnv, string VolumeEnv, string Env, string Sst)
    {
        {
            ViewBag.set = Session["set"];
            var Role = @Session["Role"];
            ViewBag.Role = Role;

            Session["Id"] = Id;



            Guid Idx = Guid.NewGuid();
            Session["Idx"] = Idx;

            @Session["totalamount"] = totalamount;



            if (!string.IsNullOrEmpty(Id))
            {
                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                using (SqlCommand command = new SqlCommand("", cn))
                {



                    cn.Open();
                    command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(TotalAmountPaper)=1
                                            THEN CONVERT(MONEY,TotalAmountPaper) ELSE 0 END)
                                            )
                                            AS [GrandTotalPaper]
                                         FROM [IflowSeed].[dbo].[TblMaterials]
                                         WHERE JobInstructionId=@Id";
                    command.Parameters.AddWithValue("@Id", Id);
                    var reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            //ViewBag.GrandTotal = reader.GetDecimal(0);
                            //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                            ViewBag.GrandTotalPaper = string.Format("{0:n}", reader.GetDecimal(0));


                        }


                    }
                    cn.Close();

                }

                if (!string.IsNullOrEmpty(Id))
                {
                    using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                    using (SqlCommand command = new SqlCommand("", cn))
                    {



                        cn.Open();
                        command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(TotalAmountEnv)=1
                                            THEN CONVERT(MONEY,TotalAmountEnv) ELSE 0 END)
                                            )
                                            AS [GrandTotalEnv]
                                         FROM [IflowSeed].[dbo].[TblMaterials]
                                         WHERE JobInstructionId=@Id";
                        command.Parameters.AddWithValue("@Id", Id);
                        var reader = command.ExecuteReader();
                        while (reader.Read())
                        {
                            if (reader.IsDBNull(0) == false)
                            {
                                //ViewBag.GrandTotal = reader.GetDecimal(0);
                                //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                                ViewBag.GrandTotalEnv = string.Format("{0:n}", reader.GetDecimal(0));


                            }


                        }
                        cn.Close();

                    }
                }

                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                using (SqlCommand command = new SqlCommand("", cn))
                {

                    cn.Open();
                    command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(VolumePaper)=1
                                            THEN CONVERT(MONEY,VolumePaper) ELSE 0 END)
                                            )
                                            AS [TotalV]
                                         FROM [IflowSeed].[dbo].[TblMaterials]
                                         WHERE Id=@Id";
                    command.Parameters.AddWithValue("@Id", Id);
                    var reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            ViewBag.TotalV = reader.GetDecimal(0);
                            Console.WriteLine();
                            Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
                            Console.WriteLine(value.ToString("N"));


                        }


                    }
                    cn.Close();
                }

                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                using (SqlCommand command = new SqlCommand("", cn))
                {

                    cn.Open();
                    command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(VolumeEnv)=1
                                            THEN CONVERT(MONEY,VolumeEnv) ELSE 0 END)
                                            )
                                            AS [TotalV]
                                         FROM [IflowSeed].[dbo].[TblMaterials]
                                         WHERE Id=@Id";
                    command.Parameters.AddWithValue("@Id", Id);
                    var reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            ViewBag.TotalV = reader.GetDecimal(0);
                            Console.WriteLine();
                            Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
                            Console.WriteLine(value.ToString("N"));


                        }


                    }
                    cn.Close();
                }


                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                using (SqlCommand command = new SqlCommand("", cn))
                {
                    cn.Open();
                    command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(RatePaper)=1
                                            THEN CONVERT(MONEY,RatePaper) ELSE 0 END)
                                            )
                                            AS [TotalR]
                                         FROM [IflowSeed].[dbo].[TblMaterials]
                                         WHERE Id=@Id";
                    command.Parameters.AddWithValue("@Id", Id);
                    var reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            ViewBag.TotalR = reader.GetDecimal(0);
                            Console.WriteLine();
                            Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
                            Console.WriteLine(value.ToString("N"));
                        }


                    }
                    cn.Close();
                }


                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                using (SqlCommand command = new SqlCommand("", cn))
                {
                    cn.Open();
                    command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(RatePaper)=1
                                            THEN CONVERT(MONEY,RatePaper) ELSE 0 END)
                                            )
                                            AS [TotalR]
                                         FROM [IflowSeed].[dbo].[TblMaterials]
                                         WHERE Id=@Id";
                    command.Parameters.AddWithValue("@Id", Id);
                    var reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            ViewBag.TotalR = reader.GetDecimal(0);
                            Console.WriteLine();
                            Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
                            Console.WriteLine(value.ToString("N"));
                        }


                    }
                    cn.Close();
                }
            }




            if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(VolumePaper) && !string.IsNullOrEmpty(RatePaper))
            {
                ViewBag.Id = Id;



                double z = Convert.ToDouble(VolumePaper);
                if (!string.IsNullOrEmpty(RatePaper))
                {
                    double y = Convert.ToDouble(RatePaper);
                    totalValuePaper = z * y;
                    double grandtotal = z * y;
                }
                else
                {
                    double y = Convert.ToDouble(Rate);
                    totalValuePaper = z + y;
                    double grandtotal = z + y;
                }
            }


            if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(VolumeEnv) && !string.IsNullOrEmpty(RateEnv))
            {
                ViewBag.Id = Id;



                double z = Convert.ToDouble(VolumeEnv);
                if (!string.IsNullOrEmpty(RateEnv))
                {
                    double y = Convert.ToDouble(RateEnv);
                    totalValueEnv = z * y;
                    double grandtotal = z * y;
                }
                else
                {
                    double y = Convert.ToDouble(RateEnv);
                    totalValueEnv = z + y;
                    double grandtotal = z + y;
                }
            }


            int _bil21 = 1;
            List<SelectListItem> li2 = new List<SelectListItem>();
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                cn.Open();
                command.CommandText = @"SELECT DISTINCT Paper FROM [IflowSeed].[dbo].[PaperInfo]                          
                                     ORDER BY Paper";
                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    JobInstruction model = new JobInstruction();
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            model.Paper = reader.GetString(0);
                        }
                    }
                    int i = _bil21++;
                    if (i == 1)
                    {
                        li2.Add(new SelectListItem { Text = "Please Select" });
                        li2.Add(new SelectListItem { Text = model.Paper });

                    }
                    else
                    {
                        li2.Add(new SelectListItem { Text = model.Paper });
                    }
                }
                cn.Close();
            }
            ViewData["Paper_"] = li2;

            int _bil20 = 1;
            List<SelectListItem> li7 = new List<SelectListItem>();
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                cn.Open();
                command.CommandText = @"SELECT DISTINCT Description FROM [IflowSeed].[dbo].[MaterialCharges]          
                                    WHERE MaterialType='Envelope' ";
                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    JobInstruction model = new JobInstruction();
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            model.EnvelopeType = reader.GetString(0);
                        }
                    }
                    int i = _bil20++;
                    if (i == 1)
                    {
                        li7.Add(new SelectListItem { Text = "Please Select" });
                        li7.Add(new SelectListItem { Text = model.EnvelopeType });

                    }
                    else
                    {
                        li7.Add(new SelectListItem { Text = model.EnvelopeType });
                    }
                }
                cn.Close();
            }
            ViewData["EnvelopeType_"] = li7;



            if (!string.IsNullOrEmpty(VolumePaper))

            {
                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {


                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                    double QUItem = Convert.ToDouble(QuantityItem);

                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblMaterials] (Id,VolumePaper,JobInstructionId,CreatedOn,TotalAmountPaper,VolumeEnv,RatePaper,Paper,Env,RateEnv,TotalAmountEnv,Sst) " +
                               "VALUES(@Id,@VolumePaper,@JobInstructionId,@CreatedOn,@TotalAmountPaper,@VolumeEnv,@RatePaper,@Paper,@Env,@RateEnv,@TotalAmountEnv,@Sst)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(VolumePaper))
                    {
                        command.Parameters.AddWithValue("@VolumePaper", VolumePaper);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumePaper", DBNull.Value);
                        TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
                        return RedirectToAction("CreateMaterials", "Finance");

                    }

                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);
                    command.Parameters.AddWithValue("@TotalAmountPaper", totalValuePaper.ToString("#,###,##0.00"));
                    if (!string.IsNullOrEmpty(VolumeEnv))
                    {
                        command.Parameters.AddWithValue("@VolumeEnv", VolumeEnv);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeEnv", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RatePaper))
                    {
                        command.Parameters.AddWithValue("@RatePaper", RatePaper);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RatePaper", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(Paper))
                    {
                        command.Parameters.AddWithValue("@Paper", Paper);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Paper", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(Env))
                    {
                        command.Parameters.AddWithValue("@Env", Env);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Env", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RateEnv))
                    {
                        command.Parameters.AddWithValue("@RateEnv", RateEnv);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateEnv", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@TotalAmountEnv", totalValueEnv.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Sst", Sst);
                    command.ExecuteNonQuery();
                    cn2.Close();

                    cn2.Open();




                }


            }
            return View();



        }



    }






    public double totalValue_Mix { get; set; }

    public double totalValueSevice { get; set; }

    public double totalValueS { get; set; }
    public double totalValueF { get; set; }
    public double totalValueO5 { get; set; }
    public double totalValue06 { get; set; }
    public double totalValue07 { get; set; }
    public double totalValue08 { get; set; }
    public double totalValue09 { get; set; }
    public double totalValue10 { get; set; }
    public double totalValueDC { get; set; }
    public double totalValueCC { get; set; }
    public double totalValueO3 { get; set; }
    public double totalValuePostage { get; set; }
    public double totalValueO2 { get; set; }
    public double totalValueI { get; set; }
    public double totalValueO { get; set; }
    public double totalValueO4 { get; set; }
    public double ValueImprest { get; set; }
    public double totalValuePD { get; set; }
    public double totalValueIS1 { get; set; }
    public double totalValueIS2 { get; set; }
    public double totalValueIS3 { get; set; }
    public double totalValueIS4 { get; set; }
    public double totalValueBI { get; set; }
    public double totalValueM5 { get; set; }
    public double totalValueHL { get; set; }
    public double totalValuePIS { get; set; }
    public double totalValuePIT { get; set; }
    public double totalValuePIF { get; set; }
    public double totalValueSK { get; set; }
    public double totalValueLG { get; set; }
    public double totalValueMG { get; set; }
    public double totalValueCDA { get; set; }
    public double totalValueNPC { get; set; }
    public double totalValueET { get; set; }
    public double totalValueEP { get; set; }
    public double totalValueP { get; set; }
    public double totalValuePP { get; set; }
    public double totalValueSMPG { get; set; }
    public double totalValueSMM { get; set; }
    public double totalValueSM5 { get; set; }
    public double totalValueSMH { get; set; }
    public double totalValueSMP { get; set; }
    public double totalValueSMPP { get; set; }
    public double totalValueSMP2 { get; set; }


    public double totalValueSMPP2 { get; set; }
    public double totalValueMMPPD { get; set; }
    public double totalValueMMPFI { get; set; }

    public double totalValueMMPSI { get; set; }
    public double totalValueMMPI { get; set; }
    public double totalValueMMPBI { get; set; }
    public double totalValueMMP5 { get; set; }
    public double totalValueMMPH { get; set; }

    public double totalValueMMPS { get; set; }
    public double totalValueMMPT { get; set; }

    public double totalValueMMPF { get; set; }

    public double totalValueMMPST { get; set; }

    public double totalValueMMPL { get; set; }
    public double totalValueMMPM { get; set; }
    public double totalValueMMPCD { get; set; }
    public double totalValueMMPET { get; set; }
    public double totalValueMMPEP { get; set; }
    public double totalValueMMPPR { get; set; }
    public double totalValueMMPPP { get; set; }

    public double totalValueDCPFC { get; set; }
    public double totalValueDCPSP { get; set; }
    public double totalValueDCPPD { get; set; }
    public double totalValueDCPFI { get; set; }
    public double totalValueDCPSI { get; set; }
    public double totalValueDCPBI { get; set; }
    public double totalValueDCP5 { get; set; }
    public double totalValueDCPH { get; set; }

    public double totalValueDCPSL { get; set; }

    public double totalValueDCPT { get; set; }
    public double totalValueDCPF { get; set; }

    public double totalValueDCPS { get; set; }
    public double totalValueDCPL { get; set; }
    public double totalValueDCPM { get; set; }
    public double totalValueDCPCD { get; set; }

    public double totalValueDCPET { get; set; }
    public double totalValueDCPEP { get; set; }

    public double totalValueDCPP { get; set; }

    public double totalValueDCPPP { get; set; }
    public double totalValueRM { get; set; }
    public double totalValueRMPT { get; set; }
    public double totalValueRMS { get; set; }
    public double totalValueRM5 { get; set; }
    public double totalValueRMH { get; set; }
    public double totalValueRML { get; set; }
    public double totalValueRMP { get; set; }

    public double totalValueRMPP { get; set; }










    [ValidateInput(false)]
    public ActionResult CreateBilling2(string Id, string QuantityItem, string Description, string Movement, string RequestorName, string Department, string Remark, string Date, string RefIventory, string CreatedOn, string TblInventoryId, string amount, string set, string Quantity, string BalanceQuantity, string totalvalue, string PricePerUnit, string ItemName, string VendorName, string GrandTotal, string TotalAmount, string descr, string Volume, string Rate, string Process, string totalamount, string Newprocess, string Sst, string JobRequest2, string Customer_Name, string LogTagNo, string AccQty, string ImpQty, string PageQty)
    {
        {
            ViewBag.set = Session["set"];
            var Role = @Session["Role"];
            ViewBag.Role = Role;

            Session["Id"] = Id;

            ViewBag.JobRequest = JobRequest2;

            Guid Idx = Guid.NewGuid();
            Session["Idx"] = Idx;

            @Session["totalamount"] = totalamount;




            if (!string.IsNullOrEmpty(Id))
            {

                List<JobInstruction> View = new List<JobInstruction>();
                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                using (SqlCommand command = new SqlCommand("", cn))
                {
                    int _bil = 1;
                    cn.Open();
                    command.CommandText = @"SELECT LogTagNo, AccQty, ImpQty, PageQty,Customer_Name,JobAuditTrailId
                                          FROM  JobAuditTrailDetail
                                         WHERE JobAuditTrailId=@Id  ";
                    command.Parameters.AddWithValue("@Id", Id);
                    var reader = command.ExecuteReader();
                    while (reader.Read())
                    {

                        JobInstruction model = new JobInstruction();
                        {

                            model.Bil = _bil++;

                            if (reader.IsDBNull(0) == false)
                            {
                                model.LogTagNo = reader.GetString(0);
                                ViewBag.LogTagNo = reader.GetString(0);
                            }
                            if (reader.IsDBNull(1) == false)
                            {
                                model.AccQty = reader.GetString(1);
                                ViewBag.AccQty = reader.GetString(1);
                            }
                            if (reader.IsDBNull(2) == false)
                            {
                                model.ImpQty = reader.GetString(2);
                                ViewBag.ImpQty = reader.GetString(2);
                            }
                            if (reader.IsDBNull(3) == false)
                            {
                                model.PageQty = reader.GetString(3);
                                ViewBag.PageQty = reader.GetString(3);
                            }
                            if (reader.IsDBNull(4) == false)
                            {
                                model.Customer_Name = reader.GetString(4);
                                ViewBag.Customer_Name = reader.GetString(4);
                            }
                            if (reader.IsDBNull(4) == false)
                            {
                                model.JobAuditTrailId = reader.GetGuid(5);
                                ViewBag.JobAuditTrailId = reader.GetGuid(5);
                            }

                        }
                        View.Add(model);


                    }
                    cn.Close();

                    ViewBag.tableLog = View;
                }





            }





            if (!string.IsNullOrEmpty(Id))
            {
                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                using (SqlCommand command = new SqlCommand("", cn))
                {



                    cn.Open();
                    command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(TotalAmount)=1
                                            THEN CONVERT(MONEY,TotalAmount) ELSE 0 END)
                                            )
                                            AS [GrandTotal]
                                         FROM [IflowSeed].[dbo].[TblBilling]
                                         WHERE JobInstructionId=@Id";
                    command.Parameters.AddWithValue("@Id", Id);
                    var reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            //ViewBag.GrandTotal = reader.GetDecimal(0);
                            //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                            ViewBag.GrandTotal = string.Format("{0:n}", reader.GetDecimal(0));


                        }


                    }
                    cn.Close();

                }


                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                using (SqlCommand command = new SqlCommand("", cn))
                {

                    cn.Open();
                    command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(Volume)=1
                                            THEN CONVERT(MONEY,Volume) ELSE 0 END)
                                            )
                                            AS [TotalV]
                                         FROM [IflowSeed].[dbo].[TblBilling]
                                         WHERE Id=@Id";
                    command.Parameters.AddWithValue("@Id", Id);
                    var reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            ViewBag.TotalV = reader.GetDecimal(0);
                            Console.WriteLine();
                            Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
                            Console.WriteLine(value.ToString("N"));


                        }


                    }
                    cn.Close();
                }

                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                using (SqlCommand command = new SqlCommand("", cn))
                {
                    cn.Open();
                    command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(Rate)=1
                                            THEN CONVERT(MONEY,Rate) ELSE 0 END)
                                            )
                                            AS [TotalR]
                                         FROM [IflowSeed].[dbo].[TblBilling]
                                         WHERE Id=@Id";
                    command.Parameters.AddWithValue("@Id", Id);
                    var reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            ViewBag.TotalR = reader.GetDecimal(0);
                            Console.WriteLine();
                            Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
                            Console.WriteLine(value.ToString("N"));
                        }


                    }
                    cn.Close();
                }
            }





            if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(Volume) && !string.IsNullOrEmpty(Rate))
            {
                ViewBag.Id = Id;



                double z = Convert.ToDouble(Volume);
                if (!string.IsNullOrEmpty(Rate))
                {
                    double y = Convert.ToDouble(Rate);
                    totalValue = z * y;
                    double grandtotal = z * y;
                }
                else
                {
                    double y = Convert.ToDouble(Rate);
                    totalValue = z + y;
                    double grandtotal = z + y;
                }
            }





            if (JobRequest2 == "YES")
            {
                ViewBag.Id = Id;

                double w = Convert.ToDouble(totalValue);
                if (JobRequest2 != "YES")
                {
                    double y = Convert.ToDouble(QuantityItem);
                    ValueImprest = w + y;
                    double grandtotal = w + y;
                }
                else
                {

                    double y = Convert.ToDouble(GrandTotal);
                    ValueImprest = w - y;
                    double grandtotal = w - y;

                }

            }




            if (Process == "Others" && !string.IsNullOrEmpty(Volume))

            {
                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {


                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                    double QUItem = Convert.ToDouble(QuantityItem);

                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,Process,Description,JobInstructionId,CreatedOn,TotalAmount,Volume,Rate,Sst,GrandTotal) " +
                               "VALUES(@Id,@Process,@Description,@JobInstructionId,@CreatedOn,@TotalAmount,@Volume,@Rate,@Sst,@GrandTotal)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(Newprocess))
                    {
                        command.Parameters.AddWithValue("@Process", Newprocess);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Process", DBNull.Value);
                        TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
                        return RedirectToAction("CreateBilling", "Finance");

                    }
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);
                    command.Parameters.AddWithValue("@TotalAmount", totalValue.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Volume", Volume);
                    command.Parameters.AddWithValue("@Rate", Rate);

                    command.Parameters.AddWithValue("@GrandTotal", GrandTotal);
                    command.ExecuteNonQuery();
                    cn2.Close();

                    cn2.Open();




                }


            }
            if (Process == "Mix" && !string.IsNullOrEmpty(Volume))
            {

                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {


                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                    double QUItem = Convert.ToDouble(QuantityItem);

                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,Process,Description,JobInstructionId,CreatedOn,TotalAmount,Volume,Rate,Sst,GrandTotal) " +
                               "VALUES(@Id,@Process,@Description,@JobInstructionId,@CreatedOn,@TotalAmount,@Volume,@Rate,@Sst,@GrandTotal)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(Process))
                    {
                        command.Parameters.AddWithValue("@Process", Process);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Process", DBNull.Value);
                        TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
                        return RedirectToAction("CreateBilling", "Finance");

                    }
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);
                    command.Parameters.AddWithValue("@TotalAmount", totalValue.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Volume", Volume);
                    command.Parameters.AddWithValue("@Rate", Rate);
                    command.Parameters.AddWithValue("@Sst", Sst);
                    command.Parameters.AddWithValue("@GrandTotal", GrandTotal);
                    command.ExecuteNonQuery();
                    cn2.Close();

                    cn2.Open();




                }



            }

            if (Process == "Postage" && !string.IsNullOrEmpty(Volume))
            {

                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {


                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                    double QUItem = Convert.ToDouble(QuantityItem);

                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,Process,Description,JobInstructionId,CreatedOn,TotalAmount,Volume,Rate,Sst,GrandTotal) " +
                               "VALUES(@Id,@Process,@Description,@JobInstructionId,@CreatedOn,@TotalAmount,@Volume,@Rate,@Sst,@GrandTotal)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(Process))
                    {
                        command.Parameters.AddWithValue("@Process", Process);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Process", DBNull.Value);
                        TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
                        return RedirectToAction("CreateBilling", "Finance");

                    }
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);
                    command.Parameters.AddWithValue("@TotalAmount", totalValue.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Volume", Volume);
                    command.Parameters.AddWithValue("@Rate", Rate);
                    command.Parameters.AddWithValue("@Sst", Sst);
                    command.Parameters.AddWithValue("@GrandTotal", GrandTotal);
                    command.ExecuteNonQuery();
                    cn2.Close();

                    cn2.Open();




                }



            }

            if (Process == "Courier Changes" && !string.IsNullOrEmpty(Volume))
            {

                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {


                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                    double QUItem = Convert.ToDouble(QuantityItem);

                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,Process,Description,JobInstructionId,CreatedOn,TotalAmount,Volume,Rate,Sst,GrandTotal) values "
                        + "(@Id,@Process,@Description,@JobInstructionId,@CreatedOn,@TotalAmount,@Volume,@Rate,@Sst,@GrandTotal)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(Process))
                    {
                        command.Parameters.AddWithValue("@Process", Process);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Process", DBNull.Value);
                        TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
                        return RedirectToAction("CreateBilling", "Finance");

                    }
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);
                    command.Parameters.AddWithValue("@TotalAmount", totalValue.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Volume", Volume);
                    command.Parameters.AddWithValue("@Rate", Rate);
                    command.Parameters.AddWithValue("@Sst", Sst);
                    command.Parameters.AddWithValue("@GrandTotal", GrandTotal);
                    command.ExecuteNonQuery();
                    cn2.Close();

                    cn2.Open();




                }



            }

            if (Process == "Delivery Charges" && !string.IsNullOrEmpty(Volume))
            {

                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {


                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                    double QUItem = Convert.ToDouble(QuantityItem);

                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,Process,Description,JobInstructionId,CreatedOn,TotalAmount,Volume,Rate,Sst,GrandTotal) values "
                        + "(@Id,@Process,@Description,@JobInstructionId,@CreatedOn,@TotalAmount,@Volume,@Rate,@Sst,GrandTotal)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(Process))
                    {
                        command.Parameters.AddWithValue("@Process", Process);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Process", DBNull.Value);
                        TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
                        return RedirectToAction("CreateBilling", "Finance");

                    }
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);
                    command.Parameters.AddWithValue("@TotalAmount", totalValue.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Volume", Volume);
                    command.Parameters.AddWithValue("@Rate", Rate);
                    command.Parameters.AddWithValue("@Sst", Sst);
                    command.Parameters.AddWithValue("@GrandTotal", GrandTotal);
                    command.ExecuteNonQuery();
                    cn2.Close();

                    cn2.Open();




                }



            }

            if (Process == "Franking" && !string.IsNullOrEmpty(Volume))
            {

                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {


                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                    double QUItem = Convert.ToDouble(QuantityItem);

                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,Process,Description,JobInstructionId,CreatedOn,TotalAmount,Volume,Rate,Sst,GrandTotal) values "
                        + "(@Id,@Process,@Description,@JobInstructionId,@CreatedOn,@TotalAmount,@Volume,@Rate,@Sst,@GrandTotal)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(Process))
                    {
                        command.Parameters.AddWithValue("@Process", Process);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Process", DBNull.Value);
                        TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
                        return RedirectToAction("CreateBilling", "Finance");

                    }
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);
                    command.Parameters.AddWithValue("@TotalAmount", totalValue.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Volume", Volume);
                    command.Parameters.AddWithValue("@Rate", Rate);
                    command.Parameters.AddWithValue("@Sst", Sst);
                    command.Parameters.AddWithValue("@GrandTotal", GrandTotal);
                    command.ExecuteNonQuery();
                    cn2.Close();

                    cn2.Open();




                }



            }

            if (Process == "Sevices Charges Franking 10%" && !string.IsNullOrEmpty(Volume))
            {

                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {


                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                    double QUItem = Convert.ToDouble(QuantityItem);

                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,Process,Description,JobInstructionId,CreatedOn,TotalAmount,Volume,Rate,Sst,GrandTotal) values "
                        + "(@Id,@Process,@Description,@JobInstructionId,@CreatedOn,@TotalAmount,@Volume,@Rate,@Sst,@GrandTotal)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(Process))
                    {
                        command.Parameters.AddWithValue("@Process", Process);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Process", DBNull.Value);
                        TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
                        return RedirectToAction("CreateBilling", "Finance");

                    }
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);
                    command.Parameters.AddWithValue("@TotalAmount", totalValue.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Volume", Volume);
                    command.Parameters.AddWithValue("@Rate", Rate);
                    command.Parameters.AddWithValue("@Sst", Sst);
                    command.Parameters.AddWithValue("@GrandTotal", GrandTotal);
                    command.ExecuteNonQuery();
                    cn2.Close();

                    cn2.Open();




                }



            }

            if (Process == "SelfMailer" && !string.IsNullOrEmpty(Volume))
            {

                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {


                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                    double QUItem = Convert.ToDouble(QuantityItem);

                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,Process,Description,JobInstructionId,CreatedOn,TotalAmount,Volume,Rate,Sst,GrandTotal) values "
                        + "(@Id,@Process,@Description,@JobInstructionId,@CreatedOn,@TotalAmount,@Volume,@Rate,@Sst,@GrandTotal)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(Process))
                    {
                        command.Parameters.AddWithValue("@Process", Process);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Process", DBNull.Value);
                        TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
                        return RedirectToAction("CreateBilling", "Finance");

                    }
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);
                    command.Parameters.AddWithValue("@TotalAmount", totalValue.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Volume", Volume);
                    command.Parameters.AddWithValue("@Rate", Rate);
                    command.Parameters.AddWithValue("@Sst", Sst);
                    command.Parameters.AddWithValue("@GrandTotal", GrandTotal);
                    command.ExecuteNonQuery();
                    cn2.Close();

                    cn2.Open();




                }



            }


            if (Process == "Others")
            {

                ViewBag.Process = "Others";
            }





            if (Process == "Imprest" && !string.IsNullOrEmpty(Volume) && JobRequest2 != null && JobRequest2 != "Please Select")
            {

                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {


                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                    double QUItem = Convert.ToDouble(QuantityItem);

                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,Process,Description,JobInstructionId,CreatedOn,TotalAmount,Volume,Rate,Sst,GrandTotal,ImprestSts,ValueImprest) values "
                        + "(@Id,@Process,@Description,@JobInstructionId,@CreatedOn,@TotalAmount,@Volume,@Rate,@Sst,@GrandTotal,@ImprestSts,@ValueImprest)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(Process))
                    {
                        command.Parameters.AddWithValue("@Process", Process);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Process", DBNull.Value);
                        TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
                        return RedirectToAction("CreateBilling", "Finance");

                    }
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);
                    command.Parameters.AddWithValue("@TotalAmount", totalValue.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Volume", Volume);
                    command.Parameters.AddWithValue("@Rate", Rate);
                    command.Parameters.AddWithValue("@Sst", Sst);
                    command.Parameters.AddWithValue("@GrandTotal", GrandTotal);
                    command.Parameters.AddWithValue("@ImprestSts", JobRequest2);
                    command.Parameters.AddWithValue("@ValueImprest", ValueImprest);



                    command.ExecuteNonQuery();
                    cn2.Close();

                    cn2.Open();




                }



            }



            List<SelectListItem> li = new List<SelectListItem>();
            li.Add(new SelectListItem { Text = "Please Select", Value = "" });
            li.Add(new SelectListItem { Text = "Mix", Value = "Mix" });
            li.Add(new SelectListItem { Text = "Postage", Value = "Postage" });
            li.Add(new SelectListItem { Text = "Courier Changes", Value = "Courier Changes" });
            li.Add(new SelectListItem { Text = "Delivery Charges", Value = "Delivery Charge" });
            li.Add(new SelectListItem { Text = "Franking", Value = "Franking" });
            li.Add(new SelectListItem { Text = "Sevices Charges Franking 10%", Value = "Sevices Charges Franking 10%" });
            li.Add(new SelectListItem { Text = "SelfMailer", Value = "SelfMailer" });
            li.Add(new SelectListItem { Text = "Imprest", Value = "Imprest" });

            li.Add(new SelectListItem { Text = "Others", Value = "Others" });

            ViewData["Process_"] = li;



            if (Process == "Imprest")
            {
                ViewBag.IsJobReq = "Open";
                List<SelectListItem> jobreq = new List<SelectListItem>();
                jobreq.Add(new SelectListItem { Text = "Please Select", Value = "Please Select" });
                jobreq.Add(new SelectListItem { Text = "YES", Value = "YES" });
                jobreq.Add(new SelectListItem { Text = "NO", Value = "NO" });
                ViewData["JobRequest_"] = jobreq;
            }

            return View();

        }




    }



    [ValidateInput(false)]
    public ActionResult AddReportLOGTag(Hist_PostingManifest get, string Customer_Name,
                                       string AccQty, string PageQty, string ImpQty, string AccountsQty, string PagesQty,
                                       string LogTagNo, string JobAuditTrailId, string Id, string line, string TimeProcessIt, string ProcessDate)
    {


        string[] parts = line.Split('|');

        parts = line.Split('|');


        ViewBag.Id = parts[0].Trim();
        Session["ID"] = ViewBag.Id;

        ViewBag.LogTagNo = parts[1];
        ViewBag.ImpQty = parts[2].Trim();
        ViewBag.AccQty = parts[3].Trim();
        ViewBag.PageQty = parts[4].Trim();

        Session["ID"] = ViewBag.Id;



        List<TblBilling> viewDetail = new List<TblBilling>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil = 1;
            cn.Open();
            command.CommandText = @" SELECT  JobInstruction.Id, JobInstruction.Customer_Name,JobAuditTrailDetail.ProcessDate,JobAuditTrailDetail.TimeProcessIt
                                        FROM  JobInstruction INNER JOIN
                                        JobAuditTrailDetail ON JobInstruction.Id = JobAuditTrailDetail.JobAuditTrailId
                                      WHERE JobInstruction.Id=@Id 
                                     ORDER BY LogTagNo DESC";
            command.Parameters.AddWithValue("@Id", Session["ID"]);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                TblBilling model = new TblBilling();
                {
                    model.Bil = _bil++;
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Id = reader.GetGuid(0);
                        ViewBag.Id = reader.GetGuid(0);
                    }

                    if (reader.IsDBNull(1) == false)
                    {
                        model.Customer_Name = reader.GetString(1);
                        ViewBag.Customer_Name = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        model.ProcessDate = reader.GetDateTime(2);
                        ViewBag.ProcessDate = String.Format("{0:dd/MM/yyyy}", (DateTime)reader.GetDateTime(2));

                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        model.TimeProcessIt = reader.GetString(3);
                        ViewBag.TimeProcessIt = reader.GetString(3);

                    }
                }
                viewDetail.Add(model);
            }
            cn.Close();




            using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            {
                Guid guidId = Guid.NewGuid();
                string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                get.CreatedOn = Convert.ToDateTime(createdOn);


                LogTagNo = ViewBag.LogTagNo;
                AccQty = ViewBag.AccQty;
                ImpQty = ViewBag.ImpQty;
                PageQty = ViewBag.PageQty;
                ProcessDate = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                TimeProcessIt = ViewBag.TimeProcessIt;
                Customer_Name = ViewBag.Customer_Name;

                cn2.Open();
                SqlCommand command2;
                command2 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblChecklistlogTagNo] (Gid, JobInstructionId,StatLogTag,CreatedOn,LogTagNo,AccQty,ImpQty,PageQty,ProcessDate,TimeProcessIt,Customer_Name) values (@Gid, @JobInstructionId, @StatLogTag, @CreatedOn,@LogTagNo,@AccQty,@ImpQty,@PageQty,@ProcessDate,@TimeProcessIt,@Customer_Name)", cn2);
                command2.Parameters.AddWithValue("@Gid", guidId);
                command2.Parameters.AddWithValue("@JobInstructionId", Session["ID"]);
                command2.Parameters.AddWithValue("@StatLogTag", "YES");
                command2.Parameters.AddWithValue("@CreatedOn", get.CreatedOn);
                command2.Parameters.AddWithValue("@LogTagNo", LogTagNo);
                command2.Parameters.AddWithValue("@AccQty", AccQty);
                command2.Parameters.AddWithValue("@ImpQty", ImpQty);
                command2.Parameters.AddWithValue("@PageQty", PageQty);
                command2.Parameters.AddWithValue("@ProcessDate", ProcessDate);
                command2.Parameters.AddWithValue("@TimeProcessIt", TimeProcessIt);
                command2.Parameters.AddWithValue("@Customer_Name", Customer_Name);
                command2.ExecuteNonQuery();
                cn2.Close();

            }
        }
        TempData["msg"] = "<script>alert('SUCCESSFULLY SUBMIT TO REPORT !');</script>";


        return RedirectToAction("ManageBatch", "Finance");
    }


    [ValidateInput(false)]
    public ActionResult HoldReportLOGTag(Hist_PostingManifest get, string line, string Customer_Name,
                                     string AccQty, string PageQty, string ImpQty, string AccountsQty, string PagesQty, string ImpressionQty,
                                     string JobSheetNo, string LogTagNo, string JobAuditTrailId, string Id)
    {



        ViewBag.Id = Id;


        List<TblChecklistlogTag> viewDetail = new List<TblChecklistlogTag>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil = 1;
            cn.Open();
            command.CommandText = @" SELECT [Gid] ,[LogTagNo],[StatLogTag]      
                                 FROM [IflowSeed].[dbo].[TblChecklistlogTagNo]
                                      WHERE Gid=@Gid
                                     ORDER BY LogTagNo DESC";
            command.Parameters.AddWithValue("@Gid", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                TblChecklistlogTag model = new TblChecklistlogTag();
                {
                    model.Bil = _bil++;
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Gid = reader.GetGuid(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        model.LogTagNo = reader.GetString(1);

                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        model.StatLogTag = reader.GetString(2);

                    }

                }
                viewDetail.Add(model);
            }
            cn.Close();



            using (SqlConnection cn1 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            {
                cn1.Open();
                SqlCommand command1;
                command1 = new SqlCommand("UPDATE [IflowSeed].[dbo].[TblChecklistlogTagNo] SET StatLogTag='HOLD' WHERE Gid=@Gid", cn1);
                command1.Parameters.AddWithValue("@Gid", Id);
                command1.ExecuteNonQuery();
                cn1.Close();
            }



            TempData["msg"] = "<script>alert('SUCCESSFULLY HOLD !');</script>";



            return RedirectToAction("ManageBatch", "Finance");
        }

    }





    [ValidateInput(false)]
    public ActionResult YesReportLOGTag(Hist_PostingManifest get, string line, string Customer_Name,
                                     string AccQty, string PageQty, string ImpQty, string AccountsQty, string PagesQty, string ImpressionQty,
                                     string JobSheetNo, string LogTagNo, string JobAuditTrailId, string Id)
    {



        ViewBag.Id = Id;


        List<TblChecklistlogTag> viewDetail = new List<TblChecklistlogTag>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil = 1;
            cn.Open();
            command.CommandText = @" SELECT [Gid] ,[LogTagNo],[StatLogTag]      
                                 FROM [IflowSeed].[dbo].[TblChecklistlogTagNo]
                                      WHERE Gid=@Gid
                                     ORDER BY LogTagNo DESC";
            command.Parameters.AddWithValue("@Gid", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                TblChecklistlogTag model = new TblChecklistlogTag();
                {
                    model.Bil = _bil++;
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Gid = reader.GetGuid(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        model.LogTagNo = reader.GetString(1);

                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        model.StatLogTag = reader.GetString(2);

                    }

                }
                viewDetail.Add(model);
            }
            cn.Close();



            using (SqlConnection cn1 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            {
                cn1.Open();
                SqlCommand command1;
                command1 = new SqlCommand("UPDATE [IflowSeed].[dbo].[TblChecklistlogTagNo] SET StatLogTag='YES' WHERE Gid=@Gid", cn1);
                command1.Parameters.AddWithValue("@Gid", Id);
                command1.ExecuteNonQuery();
                cn1.Close();
            }



            TempData["msg"] = "<script>alert('SUCCESSFULLY MOVE BACK !');</script>";



            return RedirectToAction("ManageBatch", "Finance");
        }

    }



    public ActionResult tblBillGrid(string Id)
    {
        var ID = Session["Id"];
        ViewBag.Id = Id;



        List<TblBilling> viewDetail = new List<TblBilling>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil = 1;
            cn.Open();
            command.CommandText = @"SELECT  [Id],[Process] ,[Description],[CreatedOn],[TotalAmount] ,[Volume],[Rate],[Sst] 
                                  FROM [IflowSeed].[dbo].[TblBilling]                             
                                   WHERE JobInstructionId=@Id AND NOT Process='Service Charges & Postage '
                                     ORDER BY CreatedOn DESC";
            command.Parameters.AddWithValue("@Id", Session["ID"].ToString());
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                TblBilling model = new TblBilling();
                {
                    model.Bil = _bil++;
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Id = reader.GetGuid(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        model.Process = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        model.Description = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        model.CreatedOnTxt = String.Format("{0:dd/MM/yyyy}", (DateTime)reader.GetDateTime(3));
                    }

                    if (reader.IsDBNull(4) == false)
                    {
                        model.TotalAmount = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        model.Volume = reader.GetString(5);
                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        model.Rate = reader.GetString(6);
                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        model.Sst = reader.GetString(7);
                    }

                }
                viewDetail.Add(model);
            }
            cn.Close();

            //return Json(new { data = viewFileStore }, JsonRequestBehavior.AllowGet);
            return Json(viewDetail);
        }



    }



    public ActionResult tblBillGridDCP(string Id)
    {
        var ID = Session["Id"];
        ViewBag.Id = Id;



        List<TblBilling> viewDetail = new List<TblBilling>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil = 1;
            cn.Open();
            command.CommandText = @"SELECT TblBilling.Id, TblBilling.CreatedOn, TblBilling.Sst, TblBilling.ServiceChange, TblBilling.VolumeService, TblBilling.RateServie, TblBilling.Postage, TblBilling.ValuePostage, TblBilling.RatePostage, TblBilling.TotalAmountService, TblBilling.TotalAmountPostage, TblBilling.Mix, TblBilling.VolumeMix, TblBilling.RateMix, TblBilling.TotalAmountMix, TblBilling.CourierChanges, TblBilling.VolumeCC, TblBilling.RateCC, TblBilling.DeliveryCharge, TblBilling.VolumeDC, TblBilling.RateDC, TblBilling.Franking, TblBilling.VolumeF, TblBilling.RateF, TblBilling.SelfMailer, TblBilling.VolumeS, TblBilling.RateS, 
                                   TblBilling.Others, TblBilling.VolumeO, TblBilling.RateO, TblBilling.Imprest, TblBilling.ValueImprest, TblBilling.RateImprest, TblBilling.TotalAmountImprest, TblBilling.Others2, TblBilling.VolumeO2, TblBilling.RateO2, TblBilling.TotalAmountO2, TblBilling.Others3, TblBilling.VolumeO3, TblBilling.RateO3, TblBilling.TotalAmountO3, TblBilling.Others4, TblBilling.VolumeO4, TblBilling.RateO4, TblBilling.TotalAmountO4, TblBilling.Others5, TblBilling.VolumeO5, TblBilling.RateO5, TblBilling.TotalAmountO5, TblBilling.TotalAmountO, TblBilling.TotalAmountCC, TblBilling.TotalAmountDC, 
                                   TblBilling.TotalAmountF, TblBilling.TotalAmountS, JobInstruction.Customer_Name, TblBilling.JobType
                                   FROM  TblBilling INNER JOIN
                                   JobInstruction ON TblBilling.JobInstructionId = JobInstruction.Id                       
                                   WHERE TblBilling.JobInstructionId=@JobInstructionId AND TblBilling.JobType ='DCP'
                                   ORDER BY CreatedOn DESC";
            command.Parameters.AddWithValue("@JobInstructionId", Session["ID"].ToString());
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                TblBilling model = new TblBilling();
                {
                    model.Bil = _bil++;
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Id = reader.GetGuid(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        model.CreatedOnTxt = String.Format("{0:dd/MM/yyyy}", (DateTime)reader.GetDateTime(1));
                    }

                    if (reader.IsDBNull(2) == false)
                    {
                        model.Sst = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        model.ServiceChange = reader.GetString(3);
                    }

                    if (reader.IsDBNull(4) == false)
                    {
                        model.VolumeService = reader.GetString(4);
                    }

                    if (reader.IsDBNull(5) == false)
                    {
                        model.RateServie = reader.GetString(5);
                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        model.Postage = reader.GetString(6);
                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        model.ValuePostage = reader.GetString(7);
                    }
                    if (reader.IsDBNull(8) == false)
                    {
                        model.RatePostage = reader.GetString(8);
                    }
                    if (reader.IsDBNull(9) == false)
                    {
                        model.TotalAmountService = reader.GetString(9);
                    }
                    if (reader.IsDBNull(10) == false)
                    {
                        model.TotalAmountPostage = reader.GetString(10);
                    }
                    if (reader.IsDBNull(11) == false)
                    {
                        model.Mix = reader.GetString(11);
                    }
                    if (reader.IsDBNull(12) == false)
                    {
                        model.RateMix = reader.GetString(12);
                    }
                    if (reader.IsDBNull(13) == false)
                    {
                        model.VolumeMix = reader.GetString(13);
                    }
                    if (reader.IsDBNull(14) == false)
                    {
                        model.TotalAmountMix = reader.GetString(14);
                    }
                    if (reader.IsDBNull(15) == false)
                    {
                        model.CourierChanges = reader.GetString(15);
                    }
                    if (reader.IsDBNull(16) == false)
                    {
                        model.VolumeCC = reader.GetString(16);
                    }
                    if (reader.IsDBNull(17) == false)
                    {
                        model.RateCC = reader.GetString(17);
                    }
                    if (reader.IsDBNull(18) == false)
                    {
                        model.DeliveryCharge = reader.GetString(18);
                    }
                    if (reader.IsDBNull(19) == false)
                    {
                        model.VolumeDC = reader.GetString(19);
                    }
                    if (reader.IsDBNull(20) == false)
                    {
                        model.RateDC = reader.GetString(20);
                    }
                    if (reader.IsDBNull(21) == false)
                    {
                        model.Franking = reader.GetString(21);
                    }
                    if (reader.IsDBNull(22) == false)
                    {
                        model.VolumeF = reader.GetString(22);
                    }
                    if (reader.IsDBNull(23) == false)
                    {
                        model.RateF = reader.GetString(23);
                    }
                    if (reader.IsDBNull(24) == false)
                    {
                        model.SelfMailer = reader.GetString(24);
                    }
                    if (reader.IsDBNull(25) == false)
                    {
                        model.VolumeS = reader.GetString(25);
                    }
                    if (reader.IsDBNull(26) == false)
                    {
                        model.RateS = reader.GetString(26);
                    }
                    if (reader.IsDBNull(27) == false)
                    {
                        model.Others = reader.GetString(27);
                    }
                    if (reader.IsDBNull(28) == false)
                    {
                        model.VolumeO = reader.GetString(28);
                    }
                    if (reader.IsDBNull(29) == false)
                    {
                        model.RateO = reader.GetString(29);
                    }
                    if (reader.IsDBNull(30) == false)
                    {
                        model.Imprest = reader.GetString(30);
                    }
                    if (reader.IsDBNull(31) == false)
                    {
                        model.ValueImprest = reader.GetString(31);
                    }
                    if (reader.IsDBNull(32) == false)
                    {
                        model.RateImprest = reader.GetString(32);
                    }
                    if (reader.IsDBNull(33) == false)
                    {
                        model.TotalAmountImprest = reader.GetString(33);
                    }
                    if (reader.IsDBNull(34) == false)
                    {
                        model.Others2 = reader.GetString(34);
                    }
                    if (reader.IsDBNull(35) == false)
                    {
                        model.VolumeO2 = reader.GetString(35);
                    }
                    if (reader.IsDBNull(36) == false)
                    {
                        model.RateO2 = reader.GetString(36);
                    }
                    if (reader.IsDBNull(37) == false)
                    {
                        model.TotalAmountO2 = reader.GetString(37);
                    }
                    if (reader.IsDBNull(38) == false)
                    {
                        model.Others3 = reader.GetString(38);
                    }
                    if (reader.IsDBNull(39) == false)
                    {
                        model.VolumeO3 = reader.GetString(39);
                    }
                    if (reader.IsDBNull(40) == false)
                    {
                        model.RateO3 = reader.GetString(40);
                    }
                    if (reader.IsDBNull(41) == false)
                    {
                        model.TotalAmountO3 = reader.GetString(41);
                    }
                    if (reader.IsDBNull(42) == false)
                    {
                        model.OthersO4 = reader.GetString(42);
                    }
                    if (reader.IsDBNull(43) == false)
                    {
                        model.VolumeO4 = reader.GetString(43);
                    }
                    if (reader.IsDBNull(44) == false)
                    {
                        model.RateO4 = reader.GetString(44);
                    }
                    if (reader.IsDBNull(45) == false)
                    {
                        model.TotalAmountO4 = reader.GetString(45);
                    }

                    if (reader.IsDBNull(46) == false)
                    {
                        model.OthersO5 = reader.GetString(46);
                    }
                    if (reader.IsDBNull(47) == false)
                    {
                        model.VolumeO5 = reader.GetString(47);
                    }
                    if (reader.IsDBNull(48) == false)
                    {
                        model.RateO5 = reader.GetString(48);
                    }
                    if (reader.IsDBNull(49) == false)
                    {
                        model.TotalAmountO5 = reader.GetString(49);
                    }
                    if (reader.IsDBNull(50) == false)
                    {
                        model.TotalAmountO = reader.GetString(50);
                    }
                    if (reader.IsDBNull(51) == false)
                    {
                        model.TotalAmountCC = reader.GetString(51);
                    }
                    if (reader.IsDBNull(52) == false)
                    {
                        model.TotalAmountDC = reader.GetString(52);
                    }
                    if (reader.IsDBNull(53) == false)
                    {
                        model.TotalAmountF = reader.GetString(53);
                    }
                    if (reader.IsDBNull(54) == false)
                    {
                        model.TotalAmountS = reader.GetString(54);
                    }
                    if (reader.IsDBNull(55) == false)
                    {
                        model.Customer_Name = reader.GetString(55);
                    }
                    if (reader.IsDBNull(56) == false)
                    {
                        model.JobType = reader.GetString(56);
                    }
                }
                viewDetail.Add(model);
            }
            cn.Close();

            //return Json(new { data = viewFileStore }, JsonRequestBehavior.AllowGet);
            return Json(viewDetail);
        }



    }


    public ActionResult tblBillGridPI(string Id)
    {
        var ID = Session["Id"];
        ViewBag.Id = Id;



        List<TblBilling> viewDetail = new List<TblBilling>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil = 1;
            cn.Open();
            command.CommandText = @"SELECT TblBilling.Id, TblBilling.CreatedOn, TblBilling.Sst, TblBilling.ServiceChange, TblBilling.VolumeService, TblBilling.RateServie, TblBilling.Postage, TblBilling.ValuePostage, TblBilling.RatePostage, TblBilling.TotalAmountService, TblBilling.TotalAmountPostage, TblBilling.Mix, TblBilling.VolumeMix, TblBilling.RateMix, TblBilling.TotalAmountMix, TblBilling.CourierChanges, TblBilling.VolumeCC, TblBilling.RateCC, TblBilling.DeliveryCharge, TblBilling.VolumeDC, TblBilling.RateDC, TblBilling.Franking, TblBilling.VolumeF, TblBilling.RateF, TblBilling.SelfMailer, TblBilling.VolumeS, TblBilling.RateS, 
                                   TblBilling.Others, TblBilling.VolumeO, TblBilling.RateO, TblBilling.Imprest, TblBilling.ValueImprest, TblBilling.RateImprest, TblBilling.TotalAmountImprest, TblBilling.Others2, TblBilling.VolumeO2, TblBilling.RateO2, TblBilling.TotalAmountO2, TblBilling.Others3, TblBilling.VolumeO3, TblBilling.RateO3, TblBilling.TotalAmountO3, TblBilling.Others4, TblBilling.VolumeO4, TblBilling.RateO4, TblBilling.TotalAmountO4, TblBilling.Others5, TblBilling.VolumeO5, TblBilling.RateO5, TblBilling.TotalAmountO5, TblBilling.TotalAmountO, TblBilling.TotalAmountCC, TblBilling.TotalAmountDC, 
                                   TblBilling.TotalAmountF, TblBilling.TotalAmountS, JobInstruction.Customer_Name, TblBilling.JobType
                                   FROM  TblBilling INNER JOIN
                                   JobInstruction ON TblBilling.JobInstructionId = JobInstruction.Id                       
                                   WHERE TblBilling.JobInstructionId=@JobInstructionId AND TblBilling.JobType ='PrintInsert'
                                   ORDER BY CreatedOn DESC";
            command.Parameters.AddWithValue("@JobInstructionId", Session["ID"].ToString());
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                TblBilling model = new TblBilling();
                {
                    model.Bil = _bil++;
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Id = reader.GetGuid(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        model.CreatedOnTxt = String.Format("{0:dd/MM/yyyy}", (DateTime)reader.GetDateTime(1));
                    }

                    if (reader.IsDBNull(2) == false)
                    {
                        model.Sst = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        model.ServiceChange = reader.GetString(3);
                    }

                    if (reader.IsDBNull(4) == false)
                    {
                        model.VolumeService = reader.GetString(4);
                    }

                    if (reader.IsDBNull(5) == false)
                    {
                        model.RateServie = reader.GetString(5);
                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        model.Postage = reader.GetString(6);
                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        model.ValuePostage = reader.GetString(7);
                    }
                    if (reader.IsDBNull(8) == false)
                    {
                        model.RatePostage = reader.GetString(8);
                    }
                    if (reader.IsDBNull(9) == false)
                    {
                        model.TotalAmountService = reader.GetString(9);
                    }
                    if (reader.IsDBNull(10) == false)
                    {
                        model.TotalAmountPostage = reader.GetString(10);
                    }
                    if (reader.IsDBNull(11) == false)
                    {
                        model.Mix = reader.GetString(11);
                    }
                    if (reader.IsDBNull(12) == false)
                    {
                        model.RateMix = reader.GetString(12);
                    }
                    if (reader.IsDBNull(13) == false)
                    {
                        model.VolumeMix = reader.GetString(13);
                    }
                    if (reader.IsDBNull(14) == false)
                    {
                        model.TotalAmountMix = reader.GetString(14);
                    }
                    if (reader.IsDBNull(15) == false)
                    {
                        model.CourierChanges = reader.GetString(15);
                    }
                    if (reader.IsDBNull(16) == false)
                    {
                        model.VolumeCC = reader.GetString(16);
                    }
                    if (reader.IsDBNull(17) == false)
                    {
                        model.RateCC = reader.GetString(17);
                    }
                    if (reader.IsDBNull(18) == false)
                    {
                        model.DeliveryCharge = reader.GetString(18);
                    }
                    if (reader.IsDBNull(19) == false)
                    {
                        model.VolumeDC = reader.GetString(19);
                    }
                    if (reader.IsDBNull(20) == false)
                    {
                        model.RateDC = reader.GetString(20);
                    }
                    if (reader.IsDBNull(21) == false)
                    {
                        model.Franking = reader.GetString(21);
                    }
                    if (reader.IsDBNull(22) == false)
                    {
                        model.VolumeF = reader.GetString(22);
                    }
                    if (reader.IsDBNull(23) == false)
                    {
                        model.RateF = reader.GetString(23);
                    }
                    if (reader.IsDBNull(24) == false)
                    {
                        model.SelfMailer = reader.GetString(24);
                    }
                    if (reader.IsDBNull(25) == false)
                    {
                        model.VolumeS = reader.GetString(25);
                    }
                    if (reader.IsDBNull(26) == false)
                    {
                        model.RateS = reader.GetString(26);
                    }
                    if (reader.IsDBNull(27) == false)
                    {
                        model.Others = reader.GetString(27);
                    }
                    if (reader.IsDBNull(28) == false)
                    {
                        model.VolumeO = reader.GetString(28);
                    }
                    if (reader.IsDBNull(29) == false)
                    {
                        model.RateO = reader.GetString(29);
                    }
                    if (reader.IsDBNull(30) == false)
                    {
                        model.Imprest = reader.GetString(30);
                    }
                    if (reader.IsDBNull(31) == false)
                    {
                        model.ValueImprest = reader.GetString(31);
                    }
                    if (reader.IsDBNull(32) == false)
                    {
                        model.RateImprest = reader.GetString(32);
                    }
                    if (reader.IsDBNull(33) == false)
                    {
                        model.TotalAmountImprest = reader.GetString(33);
                    }
                    if (reader.IsDBNull(34) == false)
                    {
                        model.Others2 = reader.GetString(34);
                    }
                    if (reader.IsDBNull(35) == false)
                    {
                        model.VolumeO2 = reader.GetString(35);
                    }
                    if (reader.IsDBNull(36) == false)
                    {
                        model.RateO2 = reader.GetString(36);
                    }
                    if (reader.IsDBNull(37) == false)
                    {
                        model.TotalAmountO2 = reader.GetString(37);
                    }
                    if (reader.IsDBNull(38) == false)
                    {
                        model.Others3 = reader.GetString(38);
                    }
                    if (reader.IsDBNull(39) == false)
                    {
                        model.VolumeO3 = reader.GetString(39);
                    }
                    if (reader.IsDBNull(40) == false)
                    {
                        model.RateO3 = reader.GetString(40);
                    }
                    if (reader.IsDBNull(41) == false)
                    {
                        model.TotalAmountO3 = reader.GetString(41);
                    }
                    if (reader.IsDBNull(42) == false)
                    {
                        model.OthersO4 = reader.GetString(42);
                    }
                    if (reader.IsDBNull(43) == false)
                    {
                        model.VolumeO4 = reader.GetString(43);
                    }
                    if (reader.IsDBNull(44) == false)
                    {
                        model.RateO4 = reader.GetString(44);
                    }
                    if (reader.IsDBNull(45) == false)
                    {
                        model.TotalAmountO4 = reader.GetString(45);
                    }

                    if (reader.IsDBNull(46) == false)
                    {
                        model.OthersO5 = reader.GetString(46);
                    }
                    if (reader.IsDBNull(47) == false)
                    {
                        model.VolumeO5 = reader.GetString(47);
                    }
                    if (reader.IsDBNull(48) == false)
                    {
                        model.RateO5 = reader.GetString(48);
                    }
                    if (reader.IsDBNull(49) == false)
                    {
                        model.TotalAmountO5 = reader.GetString(49);
                    }
                    if (reader.IsDBNull(50) == false)
                    {
                        model.TotalAmountO = reader.GetString(50);
                    }
                    if (reader.IsDBNull(51) == false)
                    {
                        model.TotalAmountCC = reader.GetString(51);
                    }
                    if (reader.IsDBNull(52) == false)
                    {
                        model.TotalAmountDC = reader.GetString(52);
                    }
                    if (reader.IsDBNull(53) == false)
                    {
                        model.TotalAmountF = reader.GetString(53);
                    }
                    if (reader.IsDBNull(54) == false)
                    {
                        model.TotalAmountS = reader.GetString(54);
                    }
                    if (reader.IsDBNull(55) == false)
                    {
                        model.Customer_Name = reader.GetString(55);
                    }
                    if (reader.IsDBNull(56) == false)
                    {
                        model.JobType = reader.GetString(56);
                    }
                }
                viewDetail.Add(model);
            }
            cn.Close();

            //return Json(new { data = viewFileStore }, JsonRequestBehavior.AllowGet);
            return Json(viewDetail);
        }



    }


    public ActionResult tblBillGridSM(string Id)
    {
        var ID = Session["Id"];
        ViewBag.Id = Id;



        List<TblBilling> viewDetail = new List<TblBilling>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil = 1;
            cn.Open();
            command.CommandText = @"SELECT TblBilling.Id, TblBilling.CreatedOn, TblBilling.Sst, TblBilling.ServiceChange, TblBilling.VolumeService, TblBilling.RateServie, TblBilling.Postage, TblBilling.ValuePostage, TblBilling.RatePostage, TblBilling.TotalAmountService, TblBilling.TotalAmountPostage, TblBilling.Mix, TblBilling.VolumeMix, TblBilling.RateMix, TblBilling.TotalAmountMix, TblBilling.CourierChanges, TblBilling.VolumeCC, TblBilling.RateCC, TblBilling.DeliveryCharge, TblBilling.VolumeDC, TblBilling.RateDC, TblBilling.Franking, TblBilling.VolumeF, TblBilling.RateF, TblBilling.SelfMailer, TblBilling.VolumeS, TblBilling.RateS, 
                                   TblBilling.Others, TblBilling.VolumeO, TblBilling.RateO, TblBilling.Imprest, TblBilling.ValueImprest, TblBilling.RateImprest, TblBilling.TotalAmountImprest, TblBilling.Others2, TblBilling.VolumeO2, TblBilling.RateO2, TblBilling.TotalAmountO2, TblBilling.Others3, TblBilling.VolumeO3, TblBilling.RateO3, TblBilling.TotalAmountO3, TblBilling.Others4, TblBilling.VolumeO4, TblBilling.RateO4, TblBilling.TotalAmountO4, TblBilling.Others5, TblBilling.VolumeO5, TblBilling.RateO5, TblBilling.TotalAmountO5, TblBilling.TotalAmountO, TblBilling.TotalAmountCC, TblBilling.TotalAmountDC, 
                                   TblBilling.TotalAmountF, TblBilling.TotalAmountS, JobInstruction.Customer_Name, TblBilling.JobType
                                   FROM  TblBilling INNER JOIN
                                   JobInstruction ON TblBilling.JobInstructionId = JobInstruction.Id                       
                                   WHERE TblBilling.JobInstructionId=@JobInstructionId AND TblBilling.JobType ='SelfMailer'
                                   ORDER BY CreatedOn DESC";
            command.Parameters.AddWithValue("@JobInstructionId", Session["ID"].ToString());
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                TblBilling model = new TblBilling();
                {
                    model.Bil = _bil++;
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Id = reader.GetGuid(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        model.CreatedOnTxt = String.Format("{0:dd/MM/yyyy}", (DateTime)reader.GetDateTime(1));
                    }

                    if (reader.IsDBNull(2) == false)
                    {
                        model.Sst = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        model.ServiceChange = reader.GetString(3);
                    }

                    if (reader.IsDBNull(4) == false)
                    {
                        model.VolumeService = reader.GetString(4);
                    }

                    if (reader.IsDBNull(5) == false)
                    {
                        model.RateServie = reader.GetString(5);
                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        model.Postage = reader.GetString(6);
                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        model.ValuePostage = reader.GetString(7);
                    }
                    if (reader.IsDBNull(8) == false)
                    {
                        model.RatePostage = reader.GetString(8);
                    }
                    if (reader.IsDBNull(9) == false)
                    {
                        model.TotalAmountService = reader.GetString(9);
                    }
                    if (reader.IsDBNull(10) == false)
                    {
                        model.TotalAmountPostage = reader.GetString(10);
                    }
                    if (reader.IsDBNull(11) == false)
                    {
                        model.Mix = reader.GetString(11);
                    }
                    if (reader.IsDBNull(12) == false)
                    {
                        model.RateMix = reader.GetString(12);
                    }
                    if (reader.IsDBNull(13) == false)
                    {
                        model.VolumeMix = reader.GetString(13);
                    }
                    if (reader.IsDBNull(14) == false)
                    {
                        model.TotalAmountMix = reader.GetString(14);
                    }
                    if (reader.IsDBNull(15) == false)
                    {
                        model.CourierChanges = reader.GetString(15);
                    }
                    if (reader.IsDBNull(16) == false)
                    {
                        model.VolumeCC = reader.GetString(16);
                    }
                    if (reader.IsDBNull(17) == false)
                    {
                        model.RateCC = reader.GetString(17);
                    }
                    if (reader.IsDBNull(18) == false)
                    {
                        model.DeliveryCharge = reader.GetString(18);
                    }
                    if (reader.IsDBNull(19) == false)
                    {
                        model.VolumeDC = reader.GetString(19);
                    }
                    if (reader.IsDBNull(20) == false)
                    {
                        model.RateDC = reader.GetString(20);
                    }
                    if (reader.IsDBNull(21) == false)
                    {
                        model.Franking = reader.GetString(21);
                    }
                    if (reader.IsDBNull(22) == false)
                    {
                        model.VolumeF = reader.GetString(22);
                    }
                    if (reader.IsDBNull(23) == false)
                    {
                        model.RateF = reader.GetString(23);
                    }
                    if (reader.IsDBNull(24) == false)
                    {
                        model.SelfMailer = reader.GetString(24);
                    }
                    if (reader.IsDBNull(25) == false)
                    {
                        model.VolumeS = reader.GetString(25);
                    }
                    if (reader.IsDBNull(26) == false)
                    {
                        model.RateS = reader.GetString(26);
                    }
                    if (reader.IsDBNull(27) == false)
                    {
                        model.Others = reader.GetString(27);
                    }
                    if (reader.IsDBNull(28) == false)
                    {
                        model.VolumeO = reader.GetString(28);
                    }
                    if (reader.IsDBNull(29) == false)
                    {
                        model.RateO = reader.GetString(29);
                    }
                    if (reader.IsDBNull(30) == false)
                    {
                        model.Imprest = reader.GetString(30);
                    }
                    if (reader.IsDBNull(31) == false)
                    {
                        model.ValueImprest = reader.GetString(31);
                    }
                    if (reader.IsDBNull(32) == false)
                    {
                        model.RateImprest = reader.GetString(32);
                    }
                    if (reader.IsDBNull(33) == false)
                    {
                        model.TotalAmountImprest = reader.GetString(33);
                    }
                    if (reader.IsDBNull(34) == false)
                    {
                        model.Others2 = reader.GetString(34);
                    }
                    if (reader.IsDBNull(35) == false)
                    {
                        model.VolumeO2 = reader.GetString(35);
                    }
                    if (reader.IsDBNull(36) == false)
                    {
                        model.RateO2 = reader.GetString(36);
                    }
                    if (reader.IsDBNull(37) == false)
                    {
                        model.TotalAmountO2 = reader.GetString(37);
                    }
                    if (reader.IsDBNull(38) == false)
                    {
                        model.Others3 = reader.GetString(38);
                    }
                    if (reader.IsDBNull(39) == false)
                    {
                        model.VolumeO3 = reader.GetString(39);
                    }
                    if (reader.IsDBNull(40) == false)
                    {
                        model.RateO3 = reader.GetString(40);
                    }
                    if (reader.IsDBNull(41) == false)
                    {
                        model.TotalAmountO3 = reader.GetString(41);
                    }
                    if (reader.IsDBNull(42) == false)
                    {
                        model.OthersO4 = reader.GetString(42);
                    }
                    if (reader.IsDBNull(43) == false)
                    {
                        model.VolumeO4 = reader.GetString(43);
                    }
                    if (reader.IsDBNull(44) == false)
                    {
                        model.RateO4 = reader.GetString(44);
                    }
                    if (reader.IsDBNull(45) == false)
                    {
                        model.TotalAmountO4 = reader.GetString(45);
                    }

                    if (reader.IsDBNull(46) == false)
                    {
                        model.OthersO5 = reader.GetString(46);
                    }
                    if (reader.IsDBNull(47) == false)
                    {
                        model.VolumeO5 = reader.GetString(47);
                    }
                    if (reader.IsDBNull(48) == false)
                    {
                        model.RateO5 = reader.GetString(48);
                    }
                    if (reader.IsDBNull(49) == false)
                    {
                        model.TotalAmountO5 = reader.GetString(49);
                    }
                    if (reader.IsDBNull(50) == false)
                    {
                        model.TotalAmountO = reader.GetString(50);
                    }
                    if (reader.IsDBNull(51) == false)
                    {
                        model.TotalAmountCC = reader.GetString(51);
                    }
                    if (reader.IsDBNull(52) == false)
                    {
                        model.TotalAmountDC = reader.GetString(52);
                    }
                    if (reader.IsDBNull(53) == false)
                    {
                        model.TotalAmountF = reader.GetString(53);
                    }
                    if (reader.IsDBNull(54) == false)
                    {
                        model.TotalAmountS = reader.GetString(54);
                    }
                    if (reader.IsDBNull(55) == false)
                    {
                        model.Customer_Name = reader.GetString(55);
                    }
                    if (reader.IsDBNull(56) == false)
                    {
                        model.JobType = reader.GetString(56);
                    }
                }
                viewDetail.Add(model);
            }
            cn.Close();

            //return Json(new { data = viewFileStore }, JsonRequestBehavior.AllowGet);
            return Json(viewDetail);
        }



    }


    public ActionResult tblBillGridMMP(string Id)
    {
        var ID = Session["Id"];
        ViewBag.Id = Id;



        List<TblBilling> viewDetail = new List<TblBilling>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil = 1;
            cn.Open();
            command.CommandText = @"SELECT TblBilling.Id, TblBilling.CreatedOn, TblBilling.Sst, TblBilling.ServiceChange, TblBilling.VolumeService, TblBilling.RateServie, TblBilling.Postage, TblBilling.ValuePostage, TblBilling.RatePostage, TblBilling.TotalAmountService, TblBilling.TotalAmountPostage, TblBilling.Mix, TblBilling.VolumeMix, TblBilling.RateMix, TblBilling.TotalAmountMix, TblBilling.CourierChanges, TblBilling.VolumeCC, TblBilling.RateCC, TblBilling.DeliveryCharge, TblBilling.VolumeDC, TblBilling.RateDC, TblBilling.Franking, TblBilling.VolumeF, TblBilling.RateF, TblBilling.SelfMailer, TblBilling.VolumeS, TblBilling.RateS, 
                                   TblBilling.Others, TblBilling.VolumeO, TblBilling.RateO, TblBilling.Imprest, TblBilling.ValueImprest, TblBilling.RateImprest, TblBilling.TotalAmountImprest, TblBilling.Others2, TblBilling.VolumeO2, TblBilling.RateO2, TblBilling.TotalAmountO2, TblBilling.Others3, TblBilling.VolumeO3, TblBilling.RateO3, TblBilling.TotalAmountO3, TblBilling.Others4, TblBilling.VolumeO4, TblBilling.RateO4, TblBilling.TotalAmountO4, TblBilling.Others5, TblBilling.VolumeO5, TblBilling.RateO5, TblBilling.TotalAmountO5, TblBilling.TotalAmountO, TblBilling.TotalAmountCC, TblBilling.TotalAmountDC, 
                                   TblBilling.TotalAmountF, TblBilling.TotalAmountS, JobInstruction.Customer_Name, TblBilling.JobType
                                   FROM  TblBilling INNER JOIN
                                   JobInstruction ON TblBilling.JobInstructionId = JobInstruction.Id                       
                                   WHERE TblBilling.JobInstructionId=@JobInstructionId AND TblBilling.JobType ='MMP'
                                   ORDER BY CreatedOn DESC";
            command.Parameters.AddWithValue("@JobInstructionId", Session["ID"].ToString());
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                TblBilling model = new TblBilling();
                {
                    model.Bil = _bil++;
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Id = reader.GetGuid(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        model.CreatedOnTxt = String.Format("{0:dd/MM/yyyy}", (DateTime)reader.GetDateTime(1));
                    }

                    if (reader.IsDBNull(2) == false)
                    {
                        model.Sst = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        model.ServiceChange = reader.GetString(3);
                    }

                    if (reader.IsDBNull(4) == false)
                    {
                        model.VolumeService = reader.GetString(4);
                    }

                    if (reader.IsDBNull(5) == false)
                    {
                        model.RateServie = reader.GetString(5);
                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        model.Postage = reader.GetString(6);
                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        model.ValuePostage = reader.GetString(7);
                    }
                    if (reader.IsDBNull(8) == false)
                    {
                        model.RatePostage = reader.GetString(8);
                    }
                    if (reader.IsDBNull(9) == false)
                    {
                        model.TotalAmountService = reader.GetString(9);
                    }
                    if (reader.IsDBNull(10) == false)
                    {
                        model.TotalAmountPostage = reader.GetString(10);
                    }
                    if (reader.IsDBNull(11) == false)
                    {
                        model.Mix = reader.GetString(11);
                    }
                    if (reader.IsDBNull(12) == false)
                    {
                        model.RateMix = reader.GetString(12);
                    }
                    if (reader.IsDBNull(13) == false)
                    {
                        model.VolumeMix = reader.GetString(13);
                    }
                    if (reader.IsDBNull(14) == false)
                    {
                        model.TotalAmountMix = reader.GetString(14);
                    }
                    if (reader.IsDBNull(15) == false)
                    {
                        model.CourierChanges = reader.GetString(15);
                    }
                    if (reader.IsDBNull(16) == false)
                    {
                        model.VolumeCC = reader.GetString(16);
                    }
                    if (reader.IsDBNull(17) == false)
                    {
                        model.RateCC = reader.GetString(17);
                    }
                    if (reader.IsDBNull(18) == false)
                    {
                        model.DeliveryCharge = reader.GetString(18);
                    }
                    if (reader.IsDBNull(19) == false)
                    {
                        model.VolumeDC = reader.GetString(19);
                    }
                    if (reader.IsDBNull(20) == false)
                    {
                        model.RateDC = reader.GetString(20);
                    }
                    if (reader.IsDBNull(21) == false)
                    {
                        model.Franking = reader.GetString(21);
                    }
                    if (reader.IsDBNull(22) == false)
                    {
                        model.VolumeF = reader.GetString(22);
                    }
                    if (reader.IsDBNull(23) == false)
                    {
                        model.RateF = reader.GetString(23);
                    }
                    if (reader.IsDBNull(24) == false)
                    {
                        model.SelfMailer = reader.GetString(24);
                    }
                    if (reader.IsDBNull(25) == false)
                    {
                        model.VolumeS = reader.GetString(25);
                    }
                    if (reader.IsDBNull(26) == false)
                    {
                        model.RateS = reader.GetString(26);
                    }
                    if (reader.IsDBNull(27) == false)
                    {
                        model.Others = reader.GetString(27);
                    }
                    if (reader.IsDBNull(28) == false)
                    {
                        model.VolumeO = reader.GetString(28);
                    }
                    if (reader.IsDBNull(29) == false)
                    {
                        model.RateO = reader.GetString(29);
                    }
                    if (reader.IsDBNull(30) == false)
                    {
                        model.Imprest = reader.GetString(30);
                    }
                    if (reader.IsDBNull(31) == false)
                    {
                        model.ValueImprest = reader.GetString(31);
                    }
                    if (reader.IsDBNull(32) == false)
                    {
                        model.RateImprest = reader.GetString(32);
                    }
                    if (reader.IsDBNull(33) == false)
                    {
                        model.TotalAmountImprest = reader.GetString(33);
                    }
                    if (reader.IsDBNull(34) == false)
                    {
                        model.Others2 = reader.GetString(34);
                    }
                    if (reader.IsDBNull(35) == false)
                    {
                        model.VolumeO2 = reader.GetString(35);
                    }
                    if (reader.IsDBNull(36) == false)
                    {
                        model.RateO2 = reader.GetString(36);
                    }
                    if (reader.IsDBNull(37) == false)
                    {
                        model.TotalAmountO2 = reader.GetString(37);
                    }
                    if (reader.IsDBNull(38) == false)
                    {
                        model.Others3 = reader.GetString(38);
                    }
                    if (reader.IsDBNull(39) == false)
                    {
                        model.VolumeO3 = reader.GetString(39);
                    }
                    if (reader.IsDBNull(40) == false)
                    {
                        model.RateO3 = reader.GetString(40);
                    }
                    if (reader.IsDBNull(41) == false)
                    {
                        model.TotalAmountO3 = reader.GetString(41);
                    }
                    if (reader.IsDBNull(42) == false)
                    {
                        model.OthersO4 = reader.GetString(42);
                    }
                    if (reader.IsDBNull(43) == false)
                    {
                        model.VolumeO4 = reader.GetString(43);
                    }
                    if (reader.IsDBNull(44) == false)
                    {
                        model.RateO4 = reader.GetString(44);
                    }
                    if (reader.IsDBNull(45) == false)
                    {
                        model.TotalAmountO4 = reader.GetString(45);
                    }

                    if (reader.IsDBNull(46) == false)
                    {
                        model.OthersO5 = reader.GetString(46);
                    }
                    if (reader.IsDBNull(47) == false)
                    {
                        model.VolumeO5 = reader.GetString(47);
                    }
                    if (reader.IsDBNull(48) == false)
                    {
                        model.RateO5 = reader.GetString(48);
                    }
                    if (reader.IsDBNull(49) == false)
                    {
                        model.TotalAmountO5 = reader.GetString(49);
                    }
                    if (reader.IsDBNull(50) == false)
                    {
                        model.TotalAmountO = reader.GetString(50);
                    }
                    if (reader.IsDBNull(51) == false)
                    {
                        model.TotalAmountCC = reader.GetString(51);
                    }
                    if (reader.IsDBNull(52) == false)
                    {
                        model.TotalAmountDC = reader.GetString(52);
                    }
                    if (reader.IsDBNull(53) == false)
                    {
                        model.TotalAmountF = reader.GetString(53);
                    }
                    if (reader.IsDBNull(54) == false)
                    {
                        model.TotalAmountS = reader.GetString(54);
                    }
                    if (reader.IsDBNull(55) == false)
                    {
                        model.Customer_Name = reader.GetString(55);
                    }
                    if (reader.IsDBNull(56) == false)
                    {
                        model.JobType = reader.GetString(56);
                    }
                }
                viewDetail.Add(model);
            }
            cn.Close();

            //return Json(new { data = viewFileStore }, JsonRequestBehavior.AllowGet);
            return Json(viewDetail);
        }



    }

    public ActionResult tblBillGridRM(string Id)
    {
        var ID = Session["Id"];
        ViewBag.Id = Id;



        List<TblBilling> viewDetail = new List<TblBilling>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil = 1;
            cn.Open();
            command.CommandText = @"SELECT TblBilling.Id, TblBilling.CreatedOn, TblBilling.Sst, TblBilling.ServiceChange, TblBilling.VolumeService, TblBilling.RateServie, TblBilling.Postage, TblBilling.ValuePostage, TblBilling.RatePostage, TblBilling.TotalAmountService, TblBilling.TotalAmountPostage, TblBilling.Mix, TblBilling.VolumeMix, TblBilling.RateMix, TblBilling.TotalAmountMix, TblBilling.CourierChanges, TblBilling.VolumeCC, TblBilling.RateCC, TblBilling.DeliveryCharge, TblBilling.VolumeDC, TblBilling.RateDC, TblBilling.Franking, TblBilling.VolumeF, TblBilling.RateF, TblBilling.SelfMailer, TblBilling.VolumeS, TblBilling.RateS, 
                                   TblBilling.Others, TblBilling.VolumeO, TblBilling.RateO, TblBilling.Imprest, TblBilling.ValueImprest, TblBilling.RateImprest, TblBilling.TotalAmountImprest, TblBilling.Others2, TblBilling.VolumeO2, TblBilling.RateO2, TblBilling.TotalAmountO2, TblBilling.Others3, TblBilling.VolumeO3, TblBilling.RateO3, TblBilling.TotalAmountO3, TblBilling.Others4, TblBilling.VolumeO4, TblBilling.RateO4, TblBilling.TotalAmountO4, TblBilling.Others5, TblBilling.VolumeO5, TblBilling.RateO5, TblBilling.TotalAmountO5, TblBilling.TotalAmountO, TblBilling.TotalAmountCC, TblBilling.TotalAmountDC, 
                                   TblBilling.TotalAmountF, TblBilling.TotalAmountS, JobInstruction.Customer_Name, TblBilling.JobType
                                   FROM  TblBilling INNER JOIN
                                   JobInstruction ON TblBilling.JobInstructionId = JobInstruction.Id                       
                                   WHERE TblBilling.JobInstructionId=@JobInstructionId AND TblBilling.JobType ='RegisterMail'
                                   ORDER BY CreatedOn DESC";
            command.Parameters.AddWithValue("@JobInstructionId", Session["ID"].ToString());
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                TblBilling model = new TblBilling();
                {
                    model.Bil = _bil++;
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Id = reader.GetGuid(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        model.CreatedOnTxt = String.Format("{0:dd/MM/yyyy}", (DateTime)reader.GetDateTime(1));
                    }

                    if (reader.IsDBNull(2) == false)
                    {
                        model.Sst = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        model.ServiceChange = reader.GetString(3);
                    }

                    if (reader.IsDBNull(4) == false)
                    {
                        model.VolumeService = reader.GetString(4);
                    }

                    if (reader.IsDBNull(5) == false)
                    {
                        model.RateServie = reader.GetString(5);
                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        model.Postage = reader.GetString(6);
                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        model.ValuePostage = reader.GetString(7);
                    }
                    if (reader.IsDBNull(8) == false)
                    {
                        model.RatePostage = reader.GetString(8);
                    }
                    if (reader.IsDBNull(9) == false)
                    {
                        model.TotalAmountService = reader.GetString(9);
                    }
                    if (reader.IsDBNull(10) == false)
                    {
                        model.TotalAmountPostage = reader.GetString(10);
                    }
                    if (reader.IsDBNull(11) == false)
                    {
                        model.Mix = reader.GetString(11);
                    }
                    if (reader.IsDBNull(12) == false)
                    {
                        model.RateMix = reader.GetString(12);
                    }
                    if (reader.IsDBNull(13) == false)
                    {
                        model.VolumeMix = reader.GetString(13);
                    }
                    if (reader.IsDBNull(14) == false)
                    {
                        model.TotalAmountMix = reader.GetString(14);
                    }
                    if (reader.IsDBNull(15) == false)
                    {
                        model.CourierChanges = reader.GetString(15);
                    }
                    if (reader.IsDBNull(16) == false)
                    {
                        model.VolumeCC = reader.GetString(16);
                    }
                    if (reader.IsDBNull(17) == false)
                    {
                        model.RateCC = reader.GetString(17);
                    }
                    if (reader.IsDBNull(18) == false)
                    {
                        model.DeliveryCharge = reader.GetString(18);
                    }
                    if (reader.IsDBNull(19) == false)
                    {
                        model.VolumeDC = reader.GetString(19);
                    }
                    if (reader.IsDBNull(20) == false)
                    {
                        model.RateDC = reader.GetString(20);
                    }
                    if (reader.IsDBNull(21) == false)
                    {
                        model.Franking = reader.GetString(21);
                    }
                    if (reader.IsDBNull(22) == false)
                    {
                        model.VolumeF = reader.GetString(22);
                    }
                    if (reader.IsDBNull(23) == false)
                    {
                        model.RateF = reader.GetString(23);
                    }
                    if (reader.IsDBNull(24) == false)
                    {
                        model.SelfMailer = reader.GetString(24);
                    }
                    if (reader.IsDBNull(25) == false)
                    {
                        model.VolumeS = reader.GetString(25);
                    }
                    if (reader.IsDBNull(26) == false)
                    {
                        model.RateS = reader.GetString(26);
                    }
                    if (reader.IsDBNull(27) == false)
                    {
                        model.Others = reader.GetString(27);
                    }
                    if (reader.IsDBNull(28) == false)
                    {
                        model.VolumeO = reader.GetString(28);
                    }
                    if (reader.IsDBNull(29) == false)
                    {
                        model.RateO = reader.GetString(29);
                    }
                    if (reader.IsDBNull(30) == false)
                    {
                        model.Imprest = reader.GetString(30);
                    }
                    if (reader.IsDBNull(31) == false)
                    {
                        model.ValueImprest = reader.GetString(31);
                    }
                    if (reader.IsDBNull(32) == false)
                    {
                        model.RateImprest = reader.GetString(32);
                    }
                    if (reader.IsDBNull(33) == false)
                    {
                        model.TotalAmountImprest = reader.GetString(33);
                    }
                    if (reader.IsDBNull(34) == false)
                    {
                        model.Others2 = reader.GetString(34);
                    }
                    if (reader.IsDBNull(35) == false)
                    {
                        model.VolumeO2 = reader.GetString(35);
                    }
                    if (reader.IsDBNull(36) == false)
                    {
                        model.RateO2 = reader.GetString(36);
                    }
                    if (reader.IsDBNull(37) == false)
                    {
                        model.TotalAmountO2 = reader.GetString(37);
                    }
                    if (reader.IsDBNull(38) == false)
                    {
                        model.Others3 = reader.GetString(38);
                    }
                    if (reader.IsDBNull(39) == false)
                    {
                        model.VolumeO3 = reader.GetString(39);
                    }
                    if (reader.IsDBNull(40) == false)
                    {
                        model.RateO3 = reader.GetString(40);
                    }
                    if (reader.IsDBNull(41) == false)
                    {
                        model.TotalAmountO3 = reader.GetString(41);
                    }
                    if (reader.IsDBNull(42) == false)
                    {
                        model.OthersO4 = reader.GetString(42);
                    }
                    if (reader.IsDBNull(43) == false)
                    {
                        model.VolumeO4 = reader.GetString(43);
                    }
                    if (reader.IsDBNull(44) == false)
                    {
                        model.RateO4 = reader.GetString(44);
                    }
                    if (reader.IsDBNull(45) == false)
                    {
                        model.TotalAmountO4 = reader.GetString(45);
                    }

                    if (reader.IsDBNull(46) == false)
                    {
                        model.OthersO5 = reader.GetString(46);
                    }
                    if (reader.IsDBNull(47) == false)
                    {
                        model.VolumeO5 = reader.GetString(47);
                    }
                    if (reader.IsDBNull(48) == false)
                    {
                        model.RateO5 = reader.GetString(48);
                    }
                    if (reader.IsDBNull(49) == false)
                    {
                        model.TotalAmountO5 = reader.GetString(49);
                    }
                    if (reader.IsDBNull(50) == false)
                    {
                        model.TotalAmountO = reader.GetString(50);
                    }
                    if (reader.IsDBNull(51) == false)
                    {
                        model.TotalAmountCC = reader.GetString(51);
                    }
                    if (reader.IsDBNull(52) == false)
                    {
                        model.TotalAmountDC = reader.GetString(52);
                    }
                    if (reader.IsDBNull(53) == false)
                    {
                        model.TotalAmountF = reader.GetString(53);
                    }
                    if (reader.IsDBNull(54) == false)
                    {
                        model.TotalAmountS = reader.GetString(54);
                    }
                    if (reader.IsDBNull(55) == false)
                    {
                        model.Customer_Name = reader.GetString(55);
                    }
                    if (reader.IsDBNull(56) == false)
                    {
                        model.JobType = reader.GetString(56);
                    }
                }
                viewDetail.Add(model);
            }
            cn.Close();

            //return Json(new { data = viewFileStore }, JsonRequestBehavior.AllowGet);
            return Json(viewDetail);
        }



    }





    public ActionResult tblBillGridPostage(string Id)
    {
        var ID = Session["Id"];
        ViewBag.Id = Id;



        List<TblBilling> viewDetail = new List<TblBilling>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil = 1;
            cn.Open();
            command.CommandText = @"SELECT  [Id],[Postage] ,[Description],[CreatedOn] ,[ValuePostage],[RatePostage],[TotalAmountPostage]
                                  FROM [IflowSeed].[dbo].[TblBilling]                             
                                   WHERE JobInstructionId=@Id AND Postage='Postage'
                                     ORDER BY CreatedOn DESC";
            command.Parameters.AddWithValue("@Id", Session["ID"].ToString());
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                TblBilling model = new TblBilling();
                {
                    model.Bil = _bil++;
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Id = reader.GetGuid(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        model.Postage = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        model.Description = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        model.CreatedOnTxt = String.Format("{0:dd/MM/yyyy}", (DateTime)reader.GetDateTime(3));
                    }

                    if (reader.IsDBNull(4) == false)
                    {
                        model.ValuePostage = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        model.RatePostage = reader.GetString(5);
                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        model.TotalAmountPostage = reader.GetString(6);
                    }
                }
                viewDetail.Add(model);
            }
            cn.Close();

            //return Json(new { data = viewFileStore }, JsonRequestBehavior.AllowGet);
            return Json(viewDetail);
        }



    }


    public ActionResult tblBillBatch(string Id)
    {
        var ID = Session["Id"];
        ViewBag.Id = Id;



        List<TblBilling> viewDetail = new List<TblBilling>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil = 1;
            cn.Open();
            command.CommandText = @"SELECT  [Id],[Process] ,[Description],[CreatedOn],[TotalAmount] ,[Volume],[Rate],[Sst]
                                  FROM [IflowSeed].[dbo].[TblBilling]
                                      WHERE JobInstructionId=@Id
                                     ORDER BY CreatedOn DESC";
            command.Parameters.AddWithValue("@Id", Session["ID"].ToString());
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                TblBilling model = new TblBilling();
                {
                    model.Bil = _bil++;
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Id = reader.GetGuid(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        model.Process = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        model.Description = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        model.CreatedOnTxt = String.Format("{0:dd/MM/yyyy}", (DateTime)reader.GetDateTime(3));
                    }

                    if (reader.IsDBNull(4) == false)
                    {
                        model.TotalAmount = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        model.Volume = reader.GetString(5);
                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        model.Rate = reader.GetString(6);
                    }


                    if (reader.IsDBNull(7) == false)
                    {
                        model.Sst = reader.GetString(7);
                    }


                }
                viewDetail.Add(model);
            }
            cn.Close();

            //return Json(new { data = viewFileStore }, JsonRequestBehavior.AllowGet);
            return Json(viewDetail);
        }

    }

    public ActionResult tblBillGridLogtag(string Id, string LogTagNo)
    {
        var ID = Session["ID"].ToString();
        ViewBag.Idx = ID;



        List<TblBilling> viewDetail = new List<TblBilling>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil = 1;
            cn.Open();
            command.CommandText = @" SELECT DISTINCT JobInstruction.Id, JobAuditTrailDetail.LogTagNo,JobAuditTrailDetail.AccQty,JobAuditTrailDetail.ImpQty,JobAuditTrailDetail.PageQty,JobInstruction.Customer_Name,JobAuditTrailDetail.ProcessDate,JobAuditTrailDetail.TimeProcessIt
                                        FROM  JobInstruction INNER JOIN
                                        JobAuditTrailDetail ON JobInstruction.Id = JobAuditTrailDetail.JobAuditTrailId
                                      WHERE JobInstruction.Id=@Id 
                                     ORDER BY LogTagNo DESC";
            command.Parameters.AddWithValue("@Id", ID);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                TblBilling model = new TblBilling();
                {
                    model.Bil = _bil++;
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Id = reader.GetGuid(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        model.LogTagNo = reader.GetString(1);

                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        model.AccQty = reader.GetString(2);

                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        model.ImpQty = reader.GetString(3);

                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        model.PageQty = reader.GetString(4);

                    }

                    if (reader.IsDBNull(5) == false)
                    {
                        model.Customer_Name = reader.GetString(5);

                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        model.ProcessDate = reader.GetDateTime(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        model.TimeProcessIt = reader.GetString(7);

                    }
                }
                viewDetail.Add(model);
            }
            cn.Close();

            //return Json(new { data = viewFileStore }, JsonRequestBehavior.AllowGet);
            return Json(viewDetail);
        }


    }



    public ActionResult tblHoldLogtag(string Id, string LogTagNo)
    {
        var ID = Session["ID"].ToString();
        ViewBag.Idx = ID;



        List<TblChecklistlogTag> viewDetail = new List<TblChecklistlogTag>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil = 1;
            cn.Open();
            command.CommandText = @" SELECT [Gid] ,[LogTagNo],[StatLogTag]      
                                 FROM [IflowSeed].[dbo].[TblChecklistlogTagNo]
                                      WHERE JobInstructionId=@Id 
                                     ORDER BY LogTagNo DESC";
            command.Parameters.AddWithValue("@Id", ID);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                TblChecklistlogTag model = new TblChecklistlogTag();
                {
                    model.Bil = _bil++;
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Gid = reader.GetGuid(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        model.LogTagNo = reader.GetString(1);

                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        model.StatLogTag = reader.GetString(2);

                    }

                }
                viewDetail.Add(model);
            }
            cn.Close();

            //return Json(new { data = viewFileStore }, JsonRequestBehavior.AllowGet);
            return Json(viewDetail);
        }


    }


    public ActionResult tblBillGrid2(string Id)
    {
        var ID = Session["ID"].ToString();
        ViewBag.Idx = Id;



        List<TblBilling> viewDetail = new List<TblBilling>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil = 1;
            cn.Open();
            command.CommandText = @"SELECT [Id],[DescriptionMaterials] ,[CreatedOn],[TotalAmountPaper],[VolumePaper],[RatePaper],[Paper],[Env],[RateEnv] ,[VolumeEnv],[TotalAmountEnv]
                                    FROM [IflowSeed].[dbo].[TblMaterials]
                                      WHERE JobInstructionId=@Id
                                     ORDER BY CreatedOn DESC";
            command.Parameters.AddWithValue("@Id", Session["ID"].ToString());
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                TblBilling model = new TblBilling();
                {
                    model.Bil = _bil++;
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Id = reader.GetGuid(0);
                    }

                    if (reader.IsDBNull(1) == false)
                    {
                        model.Description = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        model.CreatedOnTxt = String.Format("{0:dd/MM/yyyy}", (DateTime)reader.GetDateTime(2));
                    }

                    if (reader.IsDBNull(3) == false)
                    {
                        model.TotalAmountPaper = reader.GetString(3);
                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        model.VolumePaper = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        model.RatePaper = reader.GetString(5);
                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        model.Paper = reader.GetString(6);
                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        model.Env = reader.GetString(7);
                    }
                    if (reader.IsDBNull(8) == false)
                    {
                        model.RateEnv = reader.GetString(8);
                    }

                    if (reader.IsDBNull(9) == false)
                    {
                        model.VolumeEnv = reader.GetString(9);
                    }

                    if (reader.IsDBNull(10) == false)
                    {
                        model.TotalAmountEnv = reader.GetString(10);
                    }
                }
                viewDetail.Add(model);
            }
            cn.Close();

            //return Json(new { data = viewFileStore }, JsonRequestBehavior.AllowGet);
            return Json(viewDetail);
        }


    }



    public ActionResult tblBillGridLogtag2(string Id, string LogTagNo)
    {
        var ID = Session["ID"].ToString();
        ViewBag.Idx = ID;



        List<JobInstruction> viewDetail2 = new List<JobInstruction>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil = 1;

            cn.Open();
            command.CommandText = @"SELECT  JobInstruction.Id, JobInstruction.Customer_Name,  JobAuditTrailDetail.LogTagNo, JobAuditTrailDetail.AccQty, JobAuditTrailDetail.ImpQty, JobAuditTrailDetail.PageQty
                                 FROM  JobInstruction INNER JOIN
                                 JobAuditTrailDetail ON JobInstruction.Id = JobAuditTrailDetail.JobAuditTrailId
                                     WHERE JobInstruction.Id=@Id  ";
            command.Parameters.AddWithValue("@Id", Session["ID"].ToString());
            var reader = command.ExecuteReader();
            while (reader.Read())
            {

                JobInstruction model = new JobInstruction();
                {

                    model.Bil = _bil++;

                    if (reader.IsDBNull(0) == false)
                    {
                        model.Id = reader.GetGuid(0);
                        ViewBag.Id = reader.GetGuid(0);
                    }

                    if (reader.IsDBNull(1) == false)
                    {
                        model.Customer_Name = reader.GetString(1);
                        ViewBag.Customer_Name = reader.GetString(1);
                    }

                    if (reader.IsDBNull(2) == false)
                    {
                        model.LogTagNo = reader.GetString(2);
                        ViewBag.LogTagNo = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        model.AccQty = reader.GetString(3);
                        ViewBag.AccQty = reader.GetString(3);
                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        model.ImpQty = reader.GetString(4);
                        ViewBag.ImpQty = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        model.PageQty = reader.GetString(5);
                        ViewBag.PageQty = reader.GetString(5);
                    }


                }

            }
            cn.Close();

            //return Json(new { data = viewFileStore }, JsonRequestBehavior.AllowGet);
            return Json(viewDetail2);
        }


    }



    public ActionResult DeletetblClaimGrid(string line, string TblBilling)

    {

        string[] parts = line.Split('|');
        string Id = parts[0].Trim();


        var IdentityName = @Session["Fullname"];
        ViewBag.IdentityName = @Session["Fullname"];
        string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");




        if (!string.IsNullOrEmpty(Id))
        {
            using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            {
                cn2.Open();
                SqlCommand command3;
                command3 = new SqlCommand("DELETE [IflowSeed].[dbo].[TblBilling]  WHERE Id=@Id", cn2);
                command3.Parameters.AddWithValue("@Id", Id);
                command3.ExecuteNonQuery();
                cn2.Close();

            }



        }
        return RedirectToAction("ManageFin", "Finance", new { Id = Id });


    }

    public ActionResult DeletetblBatch(string line, string TblBilling)

    {

        string[] parts = line.Split('|');
        string Id = parts[0].Trim();


        var IdentityName = @Session["Fullname"];
        ViewBag.IdentityName = @Session["Fullname"];
        string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");




        if (!string.IsNullOrEmpty(Id))
        {
            using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            {
                cn2.Open();
                SqlCommand command3;
                command3 = new SqlCommand("DELETE [IflowSeed].[dbo].[TblBilling]  WHERE Id=@Id", cn2);
                command3.Parameters.AddWithValue("@Id", Id);
                command3.ExecuteNonQuery();
                cn2.Close();

            }



        }
        return RedirectToAction("ManageBatch", "Finance", new { Id = Id });


    }



    public ActionResult DeletetblBatchLogtag(string line, string TblBilling)

    {

        string[] parts = line.Split('|');
        string Id = parts[0].Trim();


        var IdentityName = @Session["Fullname"];
        ViewBag.IdentityName = @Session["Fullname"];
        string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");




        if (!string.IsNullOrEmpty(Id))
        {
            using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            {
                cn2.Open();
                SqlCommand command3;
                command3 = new SqlCommand("DELETE [IflowSeed].[dbo].[TblChecklistlogTagNo]  WHERE Gid=@Gid", cn2);
                command3.Parameters.AddWithValue("@Gid", Id);
                command3.ExecuteNonQuery();
                cn2.Close();

            }



        }
        return RedirectToAction("ManageBatch", "Finance", new { Id = Id });


    }


    public ActionResult DeletetblClaimGrid2(string line, string TblBilling)

    {

        string[] parts = line.Split('|');
        string Id = parts[0].Trim();


        var IdentityName = @Session["Fullname"];
        ViewBag.IdentityName = @Session["Fullname"];
        string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");




        if (!string.IsNullOrEmpty(Id))
        {
            using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            {
                cn2.Open();
                SqlCommand command3;
                command3 = new SqlCommand("DELETE [IflowSeed].[dbo].[TblMaterials]  WHERE Id=@Id", cn2);
                command3.Parameters.AddWithValue("@Id", Id);
                command3.ExecuteNonQuery();
                cn2.Close();

            }



        }
        return RedirectToAction("ManageFin", "Finance", new { Id = Id });


    }



    [ValidateInput(false)]
    public ActionResult CreatePricingSchedule(string set, string Id, string Customer_Name, string JobType, string JobName, string CreatedBy, string PrintingDuplex, string Inserting1,
                                              string Inserting2, string Inserting3, string Inserting4, string BrochureInsert, string MailBelow_5K, string Handling, string Sealing,
                                              string Tearing, string Folding, string Sticking, string Labelling, string Matching, string CDArchiving, string Npc, string EnvelopeType,
                                              string EnvelopePrice, string Paper, string PaperPrice, string SM_PrintingSM, string SM_SM_Material, string SM_FirstInsert, string SM_SecondInsert,
                                              string SM_BrochureInsert, string SM_MailBelow_5K, string SM_Handling, string SM_Sealing, string SM_Tearing, string SM_Folding,
                                              string SM_Sticking, string SM_Labelling, string SM_Matching, string SM_CDArchiving, string SM_EnvelopeType, string SM_EnvelopePrice,
                                              string SM_Paper, string SM_PaperPrice, string MMP_PrintingDuplex, string MMP_FirstInsert, string MMP_SecondInsert,
                                              string MMP_InsertingMMP, string MMP_BrochureInsert, string MMP_MailBelow_5K, string MMP_Handling, string MMP_Sealing, string MMP_Tearing,
                                              string MMP_Folding, string MMP_Sticking, string MMP_Labelling, string MMP_Matching, string MMP_CDArchiving, string MMP_EnvelopeType, string MMP_EnvelopePrice, string MMP_Paper,
                                              string MMP_PaperPrice, string DCP_FoldingCharges, string DCP_SupplyPrintLabel, string DCP_PrintingDuplex, string DCP_FirstInsert,
                                              string DCP_SecondInsert, string DCP_BrochureInsert, string DCP_MailBelow_5K, string DCP_Handling, string DCP_Sealing, string DCP_Tearing,
                                              string DCP_Folding, string DCP_Sticking, string DCP_Labelling, string DCP_Matching, string DCP_CDArchiving, string DCP_EnvelopeType,
                                              string DCP_EnvelopePrice, string DCP_Paper, string DCP_PaperPrice, string RM_Printing, string RM_Selfmailer, string RM_FirstInsert, string RM_SecondInsert,
                                              string RM_BrochureInsert, string RM_MailBelow_5K, string RM_Handling, string RM_Sealing, string RM_Tearing, string RM_Folding, string RM_Sticking, string RM_Labelling,
                                              string RM_Matching, string RM_CDArchiving, string RM_Mix, string RM_LabellingRegsterMails, string RM_EnvelopeType, string RM_EnvelopePrice, string RM_Paper, string RM_PaperPrice)
    {
        var IdentityName = @Session["Fullname"];
        var Role = @Session["Role"];
        ViewBag.IsDepart = @Session["Department"];
        Session["Id"] = Id;
        Guid Idx = Guid.NewGuid();
        Session["Idx"] = Idx;


        int _bil20 = 1;
        List<SelectListItem> li7 = new List<SelectListItem>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT DISTINCT Description FROM [IflowSeed].[dbo].[MaterialCharges]          
                                    WHERE MaterialType='Envelope' ";
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                JobInstruction model = new JobInstruction();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        model.EnvelopeType = reader.GetString(0);
                    }
                }
                int i = _bil20++;
                if (i == 1)
                {
                    li7.Add(new SelectListItem { Text = "Please Select" });
                    li7.Add(new SelectListItem { Text = model.EnvelopeType });

                }
                else
                {
                    li7.Add(new SelectListItem { Text = model.EnvelopeType });
                }
            }
            cn.Close();
        }
        ViewData["EnvelopeType_"] = li7;

        int _bil21 = 1;
        List<SelectListItem> li2 = new List<SelectListItem>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT DISTINCT Paper FROM [IflowSeed].[dbo].[PaperInfo]                          
                                     ORDER BY Paper";
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                JobInstruction model = new JobInstruction();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Paper = reader.GetString(0);
                    }
                }
                int i = _bil21++;
                if (i == 1)
                {
                    li2.Add(new SelectListItem { Text = "Please Select" });
                    li2.Add(new SelectListItem { Text = model.Paper });

                }
                else
                {
                    li2.Add(new SelectListItem { Text = model.Paper });
                }
            }
            cn.Close();
        }
        ViewData["Paper_"] = li2;


        List<JobInstruction> viewPosting = new List<JobInstruction>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil3 = 1;
            cn.Open();
            command.CommandText = @"SELECT Customer_Name, JobName, JobType, PrintingDuplex, Inserting1, Inserting2, Inserting3, Inserting4, BrochureInsert,MailBelow_5K,Handling, Tearing, Folding, Sticking, Labelling, Matching, CDArchiving, Npc, 
                             EnvelopeType, EnvelopePrice, Paper, PaperPrice, SM_PrintingSM, SM_SM_Material, SM_FirstInsert, SM_SecondInsert, SM_BrochureInsert, SM_MailBelow_5K, SM_Handling, SM_Sealing, SM_Tearing, SM_Folding, SM_Sticking, SM_Labelling, SM_Matching,SM_CDArchiving, 
                            SM_EnvelopeType, SM_EnvelopePrice, SM_Paper, SM_PaperPrice, MMP_PrintingDuplex, MMP_FirstInsert, MMP_SecondInsert, MMP_InsertingMMP,MMP_BrochureInsert, MMP_MailBelow_5K, MMP_Handling, PricingSchedule.MMP_Sealing, MMP_Tearing, MMP_Folding, MMP_Sticking, MMP_Labelling, 
                             MMP_Matching,MMP_EnvelopeType, MMP_CDArchiving, MMP_EnvelopePrice, MMP_Paper, MMP_PaperPrice, DCP_FoldingCharges, DCP_SupplyPrintLabel, DCP_PrintingDuplex, DCP_FirstInsert, DCP_SecondInsert, DCP_BrochureInsert, DCP_MailBelow_5K, PricingSchedule.DCP_Handling, DCP_Sealing, DCP_Tearing, 
                            DCP_Folding, DCP_Sticking, DCP_Labelling, DCP_Matching, DCP_CDArchiving,DCP_EnvelopeType, DCP_EnvelopePrice, DCP_Paper, DCP_PaperPrice, PricingSchedule.RM_Printing, PricingSchedule.RM_FirstInsert, PricingSchedule.RM_SecondInsert, PricingSchedule.RM_Selfmailer, PricingSchedule.RM_BrochureInsert, PricingSchedule.RM_MailBelow_5K, RM_Handling, RM_Sealing, 
                             RM_Tearing, RM_Folding, RM_Sticking, RM_Labelling, RM_LabellingRegsterMails, RM_Matching, RM_CDArchiving, RM_Mix, RM_EnvelopeType, PricingSchedule.RM_EnvelopePrice, RM_Paper,RM_PaperPrice
                             FROM  PricingSchedule 
                              WHERE Id =@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                JobInstruction model = new JobInstruction();
                {
                    model.Bil = _bil3++;

                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Customer_Name = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.JobName = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.JobType = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.PrintingDuplex = reader.GetString(3);
                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Inserting1 = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Inserting2 = reader.GetString(5);
                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Inserting3 = reader.GetString(6);
                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.Inserting4 = reader.GetString(7);
                    }
                    if (reader.IsDBNull(8) == false)
                    {
                        ViewBag.BrochureInsert = reader.GetString(8);
                    }
                    if (reader.IsDBNull(9) == false)
                    {
                        ViewBag.MailBelow_5K = reader.GetString(9);
                    }
                    if (reader.IsDBNull(10) == false)
                    {
                        ViewBag.Handling = reader.GetString(10);
                    }
                    if (reader.IsDBNull(11) == false)
                    {
                        ViewBag.Sealing = reader.GetString(11);
                    }
                    if (reader.IsDBNull(12) == false)
                    {
                        ViewBag.Tearing = reader.GetString(12);
                    }
                    if (reader.IsDBNull(13) == false)
                    {
                        ViewBag.Folding = reader.GetString(13);
                    }
                    if (reader.IsDBNull(14) == false)
                    {
                        ViewBag.Sticking = reader.GetString(14);
                    }
                    if (reader.IsDBNull(15) == false)
                    {
                        ViewBag.Labelling = reader.GetString(15);
                    }
                    if (reader.IsDBNull(16) == false)
                    {
                        ViewBag.Matching = reader.GetString(16);
                    }
                    if (reader.IsDBNull(17) == false)
                    {
                        ViewBag.CDArchiving = reader.GetString(17);
                    }
                    if (reader.IsDBNull(18) == false)
                    {
                        ViewBag.Npc = reader.GetString(18);
                    }
                    if (reader.IsDBNull(19) == false)
                    {
                        ViewBag.EnvelopeType = reader.GetString(19);
                    }
                    if (reader.IsDBNull(20) == false)
                    {
                        ViewBag.EnvelopePrice = reader.GetString(20);
                    }
                    if (reader.IsDBNull(21) == false)
                    {
                        ViewBag.Paper = reader.GetString(21);
                    }
                    if (reader.IsDBNull(22) == false)
                    {
                        ViewBag.PaperPrice = reader.GetString(22);
                    }
                    if (reader.IsDBNull(23) == false)
                    {
                        ViewBag.SM_PrintingSM = reader.GetString(23);
                    }
                    if (reader.IsDBNull(24) == false)
                    {
                        ViewBag.SM_SM_Material = reader.GetString(24);
                    }
                    if (reader.IsDBNull(25) == false)
                    {
                        ViewBag.SM_FirstInsert = reader.GetString(25);
                    }
                    if (reader.IsDBNull(26) == false)
                    {
                        ViewBag.SM_SecondInsert = reader.GetString(26);
                    }
                    if (reader.IsDBNull(27) == false)
                    {
                        ViewBag.SM_BrochureInsert = reader.GetString(27);
                    }
                    if (reader.IsDBNull(28) == false)
                    {
                        ViewBag.SM_MailBelow_5K = reader.GetString(28);
                    }
                    if (reader.IsDBNull(29) == false)
                    {
                        ViewBag.SM_Handling = reader.GetString(29);
                    }
                    if (reader.IsDBNull(30) == false)
                    {
                        ViewBag.SM_Sealing = reader.GetString(30);
                    }
                    if (reader.IsDBNull(31) == false)
                    {
                        ViewBag.SM_Tearing = reader.GetString(31);
                    }
                    if (reader.IsDBNull(32) == false)
                    {
                        ViewBag.SM_Folding = reader.GetString(32);
                    }
                    if (reader.IsDBNull(33) == false)
                    {
                        ViewBag.SM_Sticking = reader.GetString(33);
                    }
                    if (reader.IsDBNull(34) == false)
                    {
                        ViewBag.SM_Labelling = reader.GetString(34);
                    }
                    if (reader.IsDBNull(35) == false)
                    {
                        ViewBag.SM_Matching = reader.GetString(35);
                    }
                    if (reader.IsDBNull(36) == false)
                    {
                        ViewBag.SM_CDArchiving = reader.GetString(36);
                    }
                    if (reader.IsDBNull(37) == false)
                    {
                        ViewBag.SM_EnvelopeType = reader.GetString(37);
                    }
                    if (reader.IsDBNull(38) == false)
                    {
                        ViewBag.SM_EnvelopePrice = reader.GetString(38);
                    }
                    if (reader.IsDBNull(39) == false)
                    {
                        ViewBag.SM_Paper = reader.GetString(39);
                    }
                    if (reader.IsDBNull(40) == false)
                    {
                        ViewBag.SM_PaperPrice = reader.GetString(40);
                    }
                    if (reader.IsDBNull(41) == false)
                    {
                        ViewBag.MMP_PrintingDuplex = reader.GetString(41);
                    }
                    if (reader.IsDBNull(42) == false)
                    {
                        ViewBag.MMP_FirstInsert = reader.GetString(42);
                    }
                    if (reader.IsDBNull(43) == false)
                    {
                        ViewBag.MMP_SecondInsert = reader.GetString(43);
                    }
                    if (reader.IsDBNull(43) == false)
                    {
                        ViewBag.MMP_InsertingMMP = reader.GetString(43);
                    }
                    if (reader.IsDBNull(44) == false)
                    {
                        ViewBag.MMP_BrochureInsert = reader.GetString(44);
                    }
                    if (reader.IsDBNull(45) == false)
                    {
                        ViewBag.MMP_MailBelow_5K = reader.GetString(45);
                    }
                    if (reader.IsDBNull(46) == false)
                    {
                        ViewBag.MMP_Handling = reader.GetString(46);
                    }
                    if (reader.IsDBNull(47) == false)
                    {
                        ViewBag.MMP_Sealing = reader.GetString(47);
                    }
                    if (reader.IsDBNull(48) == false)
                    {
                        ViewBag.MMP_Tearing = reader.GetString(48);
                    }
                    if (reader.IsDBNull(48) == false)
                    {
                        ViewBag.MMP_Folding = reader.GetString(48);
                    }
                    if (reader.IsDBNull(49) == false)
                    {
                        ViewBag.MMP_Sticking = reader.GetString(49);
                    }
                    if (reader.IsDBNull(50) == false)
                    {
                        ViewBag.MMP_Labelling = reader.GetString(50);
                    }
                    if (reader.IsDBNull(51) == false)
                    {
                        ViewBag.MMP_Matching = reader.GetString(51);
                    }
                    if (reader.IsDBNull(52) == false)
                    {
                        ViewBag.MMP_CDArchiving = reader.GetString(52);
                    }
                    if (reader.IsDBNull(53) == false)
                    {
                        ViewBag.MMP_EnvelopeType = reader.GetString(53);
                    }
                    if (reader.IsDBNull(54) == false)
                    {
                        ViewBag.MMP_EnvelopePrice = reader.GetString(54);
                    }
                    if (reader.IsDBNull(55) == false)
                    {
                        ViewBag.MMP_Paper = reader.GetString(55);
                    }
                    if (reader.IsDBNull(56) == false)
                    {
                        ViewBag.MMP_PaperPrice = reader.GetString(56);
                    }
                    if (reader.IsDBNull(57) == false)
                    {
                        ViewBag.DCP_FoldingCharges = reader.GetString(57);
                    }
                    if (reader.IsDBNull(58) == false)
                    {
                        ViewBag.DCP_SupplyPrintLabel = reader.GetString(58);
                    }
                    if (reader.IsDBNull(59) == false)
                    {
                        ViewBag.DCP_PrintingDuplex = reader.GetString(59);
                    }
                    if (reader.IsDBNull(60) == false)
                    {
                        ViewBag.DCP_FirstInsert = reader.GetString(60);
                    }
                    if (reader.IsDBNull(61) == false)
                    {
                        ViewBag.DCP_SecondInsert = reader.GetString(61);
                    }
                    if (reader.IsDBNull(62) == false)
                    {
                        ViewBag.DCP_BrochureInsert = reader.GetString(62);
                    }
                    if (reader.IsDBNull(63) == false)
                    {
                        ViewBag.DCP_MailBelow_5K = reader.GetString(63);
                    }
                    if (reader.IsDBNull(64) == false)
                    {
                        ViewBag.DCP_Handling = reader.GetString(64);
                    }
                    if (reader.IsDBNull(65) == false)
                    {
                        ViewBag.DCP_Sealing = reader.GetString(65);
                    }
                    if (reader.IsDBNull(66) == false)
                    {
                        ViewBag.DCP_Tearing = reader.GetString(66);
                    }
                    if (reader.IsDBNull(67) == false)
                    {
                        ViewBag.DCP_Folding = reader.GetString(67);
                    }
                    if (reader.IsDBNull(68) == false)
                    {
                        ViewBag.DCP_Sticking = reader.GetString(68);
                    }
                    if (reader.IsDBNull(69) == false)
                    {
                        ViewBag.DCP_Labelling = reader.GetString(69);
                    }
                    if (reader.IsDBNull(70) == false)
                    {
                        ViewBag.DCP_Matching = reader.GetString(70);
                    }
                    if (reader.IsDBNull(71) == false)
                    {
                        ViewBag.DCP_CDArchiving = reader.GetString(71);
                    }
                    if (reader.IsDBNull(72) == false)
                    {
                        ViewBag.DCP_EnvelopeType = reader.GetString(72);
                    }
                    if (reader.IsDBNull(73) == false)
                    {
                        ViewBag.DCP_EnvelopePrice = reader.GetString(73);
                    }
                    if (reader.IsDBNull(74) == false)
                    {
                        ViewBag.DCP_Paper = reader.GetString(74);
                    }
                    if (reader.IsDBNull(75) == false)
                    {
                        ViewBag.DCP_PaperPrice = reader.GetString(75);
                    }
                    if (reader.IsDBNull(76) == false)
                    {
                        ViewBag.RM_Printing = reader.GetString(76);
                    }
                    if (reader.IsDBNull(77) == false)
                    {
                        ViewBag.RM_FirstInsert = reader.GetString(77);
                    }
                    if (reader.IsDBNull(77) == false)
                    {
                        ViewBag.RM_SecondInsert = reader.GetString(77);
                    }
                    if (reader.IsDBNull(78) == false)
                    {
                        ViewBag.RM_Selfmailer = reader.GetString(78);
                    }

                    if (reader.IsDBNull(79) == false)
                    {
                        ViewBag.RM_BrochureInsert = reader.GetString(79);
                    }

                    if (reader.IsDBNull(80) == false)
                    {
                        ViewBag.RM_Handling = reader.GetString(80);
                    }
                    if (reader.IsDBNull(81) == false)
                    {
                        ViewBag.RM_Sealing = reader.GetString(81);
                    }
                    if (reader.IsDBNull(82) == false)
                    {
                        ViewBag.RM_Tearing = reader.GetString(82);
                    }
                    if (reader.IsDBNull(83) == false)
                    {
                        ViewBag.RM_Folding = reader.GetString(83);
                    }
                    if (reader.IsDBNull(84) == false)
                    {
                        ViewBag.RM_Sticking = reader.GetString(84);
                    }
                    if (reader.IsDBNull(85) == false)
                    {
                        ViewBag.RM_Labelling = reader.GetString(85);
                    }
                    if (reader.IsDBNull(86) == false)
                    {
                        ViewBag.RM_LabellingRegsterMails = reader.GetString(86);
                    }
                    if (reader.IsDBNull(87) == false)
                    {
                        ViewBag.RM_Matching = reader.GetString(87);
                    }
                    if (reader.IsDBNull(88) == false)
                    {
                        ViewBag.RM_CDArchiving = reader.GetString(88);
                    }
                    if (reader.IsDBNull(89) == false)
                    {
                        ViewBag.RM_Mix = reader.GetString(89);
                    }
                    if (reader.IsDBNull(90) == false)
                    {
                        ViewBag.RM_EnvelopeType = reader.GetString(90);
                    }
                    if (reader.IsDBNull(91) == false)
                    {
                        ViewBag.RM_EnvelopeType = reader.GetString(91);
                    }
                    if (reader.IsDBNull(92) == false)
                    {
                        ViewBag.RM_EnvelopePrice = reader.GetString(92);
                    }
                    if (reader.IsDBNull(93) == false)
                    {
                        ViewBag.RM_Paper = reader.GetString(93);
                    }
                    if (reader.IsDBNull(94) == false)
                    {
                        ViewBag.RM_PaperPrice = reader.GetString(94);
                    }
                }
                viewPosting.Add(model);
            }
            cn.Close();


        }




        if (set == "PrintInsert")
        {
            if (!string.IsNullOrEmpty(Id))
            {


                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {
                    cn.Open();
                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[PricingSchedule](PrintingDuplex, Inserting1, Inserting2, Inserting3, Inserting4, BrochureInsert, MailBelow_5K, Handling, Sealing, Tearing, Folding, Sticking, Matching, CDArchiving, Npc, EnvelopeType, EnvelopePrice, Paper, PaperPrice, JobType, CreatedBy,Id,JobInstructionId)  " +
                                   "VALUES(@PrintingDuplex,@Inserting1,@Inserting2,@Inserting3,@Inserting4,@BrochureInsert,@MailBelow_5K,@Handling,@Sealing,@Tearing,@Folding,@Sticking,@Matching,@CDArchiving,@Npc,@EnvelopeType,@EnvelopePrice,@Paper,@PaperPrice,@JobType,@CreatedBy,@Id,@JobInstructionId)", cn);

                    if (!string.IsNullOrEmpty(PrintingDuplex))
                    {
                        command.Parameters.AddWithValue("@PrintingDuplex", PrintingDuplex);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@PrintingDuplex", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(Inserting1))
                    {
                        command.Parameters.AddWithValue("@Inserting1", Inserting1);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Inserting1", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(Inserting2))
                    {
                        command.Parameters.AddWithValue("@Inserting2", Inserting2);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Inserting2", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(Inserting3))
                    {
                        command.Parameters.AddWithValue("@Inserting3", Inserting3);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Inserting3", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(Inserting4))
                    {
                        command.Parameters.AddWithValue("@Inserting4", Inserting4);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Inserting4", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(BrochureInsert))
                    {
                        command.Parameters.AddWithValue("@BrochureInsert", BrochureInsert);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@BrochureInsert", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(MailBelow_5K))
                    {
                        command.Parameters.AddWithValue("@MailBelow_5K", MailBelow_5K);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MailBelow_5K", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(Handling))
                    {
                        command.Parameters.AddWithValue("@Handling", Handling);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Handling", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(Sealing))
                    {
                        command.Parameters.AddWithValue("@Sealing", Sealing);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Sealing", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(Tearing))
                    {
                        command.Parameters.AddWithValue("@Tearing", Tearing);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Tearing", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(Folding))
                    {
                        command.Parameters.AddWithValue("@Folding", Folding);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Folding", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(Sticking))
                    {
                        command.Parameters.AddWithValue("@Sticking", Sticking);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Sticking", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(Matching))
                    {
                        command.Parameters.AddWithValue("@Matching", Matching);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Matching", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(CDArchiving))
                    {
                        command.Parameters.AddWithValue("@CDArchiving", CDArchiving);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@CDArchiving", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(Npc))
                    {
                        command.Parameters.AddWithValue("@Npc", Npc);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Npc", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(EnvelopeType))
                    {
                        command.Parameters.AddWithValue("@EnvelopeType", EnvelopeType);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@EnvelopeType", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(EnvelopePrice))
                    {
                        command.Parameters.AddWithValue("@EnvelopePrice", EnvelopePrice);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@EnvelopePrice", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(Paper))
                    {
                        command.Parameters.AddWithValue("@Paper", Paper);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Paper", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(PaperPrice))
                    {
                        command.Parameters.AddWithValue("@PaperPrice", PaperPrice);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@PaperPrice", DBNull.Value);
                    }

                    command.Parameters.AddWithValue("@JobType", "Print Insert");
                    command.Parameters.AddWithValue("@CreatedBy", IdentityName.ToString());
                    command.Parameters.AddWithValue("@Id", Idx);
                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.ExecuteNonQuery();
                    cn.Close();
                }
            }

        }
        else if (set == "SelfMailer")
        {
            if (!string.IsNullOrEmpty(Id) && SM_EnvelopeType != "Please Select" && SM_Paper != "Please Select")
            {
                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {
                    cn.Open();
                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[PricingSchedule] (SM_PrintingSM,SM_SM_Material,SM_FirstInsert,SM_SecondInsert,SM_BrochureInsert,SM_MailBelow_5K, SM_Handling, SM_Sealing, SM_Tearing,SM_Folding,SM_Sticking, SM_Labelling ,SM_Matching, SM_CDArchiving, SM_EnvelopeType, SM_EnvelopePrice, SM_Paper, SM_PaperPrice,JobType, CreatedBy,JobInstructionId)  " +
                                   "VALUES(@SM_PrintingSM,@SM_SM_Material,@SM_FirstInsert,@SM_SecondInsert,@SM_BrochureInsert,@SM_MailBelow_5K,@SM_Handling,@SM_Sealing,@SM_Tearing,@SM_Folding,@SM_Sticking,@SM_Labelling,@SM_Matching,@SM_CDArchiving,@SM_EnvelopeType,@SM_EnvelopePrice,@SM_Paper,@SM_PaperPrice,@JobType,@CreatedBy,@JobInstructionId)", cn);
                    if (!string.IsNullOrEmpty(SM_PrintingSM))
                    {
                        command.Parameters.AddWithValue("@SM_PrintingSM", SM_PrintingSM);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_PrintingSM", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_SM_Material))
                    {
                        command.Parameters.AddWithValue("@SM_SM_Material", SM_SM_Material);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_SM_Material", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(SM_FirstInsert))
                    {
                        command.Parameters.AddWithValue("@SM_FirstInsert", SM_FirstInsert);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_FirstInsert", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(SM_SecondInsert))
                    {
                        command.Parameters.AddWithValue("@SM_SecondInsert", SM_SecondInsert);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_SecondInsert", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_BrochureInsert))
                    {

                        command.Parameters.AddWithValue("@SM_BrochureInsert", SM_BrochureInsert);
                    }
                    else
                    {

                        command.Parameters.AddWithValue("@SM_BrochureInsert", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(SM_MailBelow_5K))
                    {
                        command.Parameters.AddWithValue("@SM_MailBelow_5K", SM_MailBelow_5K);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_MailBelow_5K", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(SM_Handling))
                    {
                        command.Parameters.AddWithValue("@SM_Handling", SM_Handling);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_Handling", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_Sealing))
                    {
                        command.Parameters.AddWithValue("@SM_Sealing", SM_Sealing);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_Sealing", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_Tearing))
                    {
                        command.Parameters.AddWithValue("@SM_Tearing", SM_Tearing);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_Tearing", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_Folding))
                    {
                        command.Parameters.AddWithValue("@SM_Folding", SM_Folding);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_Folding", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_Sticking))
                    {
                        command.Parameters.AddWithValue("@SM_Sticking", SM_Sticking);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_Sticking", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_Labelling))
                    {
                        command.Parameters.AddWithValue("@SM_Labelling", SM_Labelling);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_Labelling", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_Matching))
                    {
                        command.Parameters.AddWithValue("@SM_Matching", SM_Matching);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_Matching", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_CDArchiving))
                    {
                        command.Parameters.AddWithValue("@SM_CDArchiving", SM_CDArchiving);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_CDArchiving", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_EnvelopeType))
                    {
                        command.Parameters.AddWithValue("@SM_EnvelopeType", SM_EnvelopeType);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_EnvelopeType", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_EnvelopePrice))
                    {
                        command.Parameters.AddWithValue("@SM_EnvelopePrice", SM_EnvelopePrice);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_EnvelopePrice", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(SM_Paper))
                    {
                        command.Parameters.AddWithValue("@SM_Paper", SM_Paper);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_Paper", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_PaperPrice))
                    {
                        command.Parameters.AddWithValue("@SM_PaperPrice", SM_PaperPrice);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_PaperPrice", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobType", "Self Mailer");
                    command.Parameters.AddWithValue("@CreatedBy", IdentityName.ToString());
                    command.Parameters.AddWithValue("@Id", Idx);
                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.ExecuteNonQuery();
                    cn.Close();
                }
            }
        }
        else if (set == "")
        {
            if (!string.IsNullOrEmpty(Id) && MMP_EnvelopeType != "Please Select" && MMP_Paper != "Please Select")
            {
                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {
                    cn.Open();
                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[PricingSchedule] (MMP_PrintingDuplex, MMP_InsertingMMP ,MMP_FirstInsert, MMP_SecondInsert,MMP_BrochureInsert, MMP_MailBelow_5K,MMP_Handling, MMP_Sealing, MMP_Tearing ,MMP_Folding, MMP_Sticking, MMP_Labelling, MMP_Matching,MMP_CDArchiving, MMP_EnvelopeType, MMP_EnvelopePrice, MMP_Paper,MMP_PaperPrice, JobType, CreatedBy,JobInstructionId)  " +
                                   "VALUES(@MMP_PrintingDuplex,@MMP_InsertingMMP,@MMP_FirstInsert,@MMP_SecondInsert,@MMP_BrochureInsert,@MMP_MailBelow_5K,@MMP_Handling,@MMP_Sealing,@MMP_Sealing,@MMP_Tearing,@MMP_Folding,@MMP_Sticking,@MMP_Labelling,@MMP_Matching,@MMP_CDArchiving,@MMP_EnvelopeType,@MMP_EnvelopePrice,@MMP_Paper,@MMP_PaperPrice,@JobType,@ CreatedBy,@JobInstructionId)", cn);

                    if (!string.IsNullOrEmpty(MMP_PrintingDuplex))
                    {
                        command.Parameters.AddWithValue("@MMP_PrintingDuplex", MMP_PrintingDuplex);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP_PrintingDuplex", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMP_InsertingMMP))
                    {
                        command.Parameters.AddWithValue("@MMP_Inserting", MMP_InsertingMMP);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP_Inserting", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMP_FirstInsert))
                    {
                        command.Parameters.AddWithValue("@MMP_FirstInsert", MMP_FirstInsert);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP_FirstInsert", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMP_SecondInsert))
                    {
                        command.Parameters.AddWithValue("@MMP_SecondInsert", MMP_SecondInsert);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP_SecondInsert", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(MMP_BrochureInsert))
                    {
                        command.Parameters.AddWithValue("@MMP_BrochureInsert", MMP_BrochureInsert);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP_BrochureInsert", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(MMP_MailBelow_5K))
                    {
                        command.Parameters.AddWithValue("@MMP_MailBelow_5K", MMP_MailBelow_5K);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP_MailBelow_5K", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMP_Handling))
                    {
                        command.Parameters.AddWithValue("@MMP_Handling", MMP_Handling);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP_Handling", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMP_Sealing))
                    {
                        command.Parameters.AddWithValue("@MMP_Sealing", MMP_Sealing);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP_Sealing", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMP_Tearing))
                    {
                        command.Parameters.AddWithValue("@MMP_Tearing", MMP_Tearing);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP_Tearing", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMP_Folding))
                    {
                        command.Parameters.AddWithValue("@MMP_Folding", MMP_Folding);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP_Folding", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(MMP_Sticking))
                    {
                        command.Parameters.AddWithValue("@MMP_Sticking", MMP_Sticking);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP_Sticking", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(MMP_Labelling))
                    {
                        command.Parameters.AddWithValue("@MMP_Labelling", MMP_Labelling);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP_Labelling", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(MMP_Matching))
                    {
                        command.Parameters.AddWithValue("@MMP_Matching", MMP_Matching);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP_Matching", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(MMP_CDArchiving))
                    {
                        command.Parameters.AddWithValue("@MMP_CDArchiving", MMP_CDArchiving);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP_CDArchiving", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(MMP_EnvelopeType))
                    {
                        command.Parameters.AddWithValue("@MMP_EnvelopeType", MMP_EnvelopeType);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP_EnvelopeType", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMP_EnvelopePrice))
                    {
                        command.Parameters.AddWithValue("@MMP_EnvelopePrice", MMP_EnvelopePrice);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP_EnvelopePrice", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMP_EnvelopePrice))
                    {
                        command.Parameters.AddWithValue("@MMP_Paper", MMP_Paper);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP_EnvelopePrice", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMP_PaperPrice))
                    {
                        command.Parameters.AddWithValue("@MMP_PaperPrice", MMP_PaperPrice);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP_PaperPrice", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobType", "");
                    command.Parameters.AddWithValue("@CreatedBy", IdentityName.ToString());
                    command.Parameters.AddWithValue("@Id", Id);
                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.ExecuteNonQuery();
                    cn.Close();
                }
            }
        }

        else if (set == "DCP")
        {
            if (!string.IsNullOrEmpty(Id) && MMP_EnvelopeType != "Please Select" && MMP_Paper != "Please Select")
            {
                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {
                    cn.Open();
                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[PricingSchedule] (DCP_FoldingCharges, DCP_SupplyPrintLabel,DCP_PrintingDuplex, DCP_FirstInsert,DCP_SecondInsert, DCP_BrochureInsert, DCP_MailBelow_5K , DCP_Handling, DCP_Sealing ,DCP_Tearing, DCP_Folding, DCP_Sticking, DCP_Labelling,DCP_Matching, DCP_CDArchiving, DCP_EnvelopeType, DCP_EnvelopePrice,DCP_Paper , DCP_PaperPrice, JobType, CreatedBy)  " +
                                   "VALUES(@DCP_FoldingCharges,@DCP_SupplyPrintLabel,@DCP_FirstInsert,@DCP_SecondInsert,@DCP_BrochureInsert,@DCP_MailBelow_5K,@DCP_Handling,@DCP_Sealing,@DCP_Tearing,@DCP_Folding,@DCP_Sticking,@DCP_Labelling,@DCP_Matching,@DCP_CDArchiving,@DCP_EnvelopeType,@DCP_EnvelopePrice,@DCP_Paper,@DCP_PaperPrice,@JobType,@CreatedBy)", cn);

                    if (!string.IsNullOrEmpty(DCP_FoldingCharges))
                    {
                        command.Parameters.AddWithValue("@DCP_FoldingCharges", DCP_FoldingCharges);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_FoldingCharges", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCP_SupplyPrintLabel))
                    {
                        command.Parameters.AddWithValue("@DCP_SupplyPrintLabel", DCP_SupplyPrintLabel);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_SupplyPrintLabel", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(DCP_PrintingDuplex))
                    {
                        command.Parameters.AddWithValue("@DCP_PrintingDuplex", DCP_PrintingDuplex);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_PrintingDuplex", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(DCP_FirstInsert))
                    {
                        command.Parameters.AddWithValue("@DCP_FirstInsert", DCP_FirstInsert);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_FirstInsert", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCP_SecondInsert))
                    {
                        command.Parameters.AddWithValue("@DCP_SecondInsert", DCP_SecondInsert);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_SecondInsert", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCP_BrochureInsert))
                    {

                        command.Parameters.AddWithValue("@DCP_BrochureInsert", DCP_BrochureInsert);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_BrochureInsert", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCP_MailBelow_5K))
                    {
                        command.Parameters.AddWithValue("@DCP_MailBelow_5K", DCP_MailBelow_5K);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_MailBelow_5K", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(DCP_Handling))
                    {
                        command.Parameters.AddWithValue("@DCP_Handling", DCP_Handling);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_Handling", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCP_Sealing))
                    {
                        command.Parameters.AddWithValue("@DCP_Sealing", DCP_Sealing);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_Sealing", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCP_Sealing))
                    {
                        command.Parameters.AddWithValue("@DCP_Tearing", DCP_Tearing);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_Tearing", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCP_Folding))
                    {
                        command.Parameters.AddWithValue("@DCP_Folding", DCP_Folding);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_Folding", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCP_Sticking))
                    {
                        command.Parameters.AddWithValue("@DCP_Sticking", DCP_Sticking);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_Sticking", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCP_Labelling))
                    {
                        command.Parameters.AddWithValue("@DCP_Labelling", DCP_Labelling);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_Labelling", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCP_Matching))
                    {
                        command.Parameters.AddWithValue("@DCP_Matching", DCP_Matching);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_Matching", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCP_CDArchiving))
                    {
                        command.Parameters.AddWithValue("@DCP_CDArchiving", DCP_CDArchiving);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_CDArchiving", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCP_EnvelopeType))
                    {

                        command.Parameters.AddWithValue("@DCP_EnvelopeType", DCP_EnvelopeType);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_EnvelopeType", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCP_EnvelopePrice))
                    {
                        command.Parameters.AddWithValue("@DCP_EnvelopePrice", DCP_EnvelopePrice);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_EnvelopePrice", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCP_EnvelopePrice))
                    {
                        command.Parameters.AddWithValue("@DCP_Paper", DCP_Paper);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_Paper", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(DCP_EnvelopePrice))
                    {
                        command.Parameters.AddWithValue("@DCP_PaperPrice", DCP_PaperPrice);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_PaperPrice", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobType", "DCP");
                    command.Parameters.AddWithValue("@CreatedBy", IdentityName.ToString());
                    command.Parameters.AddWithValue("@Id", Id);
                    command.ExecuteNonQuery();
                    cn.Close();
                }
            }
        }





        else if (set == "RegisterMail")
        {
            if (!string.IsNullOrEmpty(Id) && RM_EnvelopeType != "Please Select" && RM_Paper != "Please Select")
            {
                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {
                    cn.Open();
                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[PricingSchedule]  (RM_Printing, RM_Selfmailer,  RM_FirstInsert, RM_SecondInsert,RM_BrochureInsert, RM_MailBelow_5K, RM_Handling , RM_Sealing, RM_Tearing,RM_Folding , RM_Sticking , RM_Labelling, RM_Matching, RM_CDArchiving,RM_Mix , RM_LabellingRegsterMails, RM_EnvelopeType , RM_EnvelopePrice , RM_Paper , RM_PaperPrice , JobType , CreatedBy)  " +
                                   "VALUES(@RM_Printing,@RM_Selfmailer,@RM_FirstInsert,@RM_SecondInsert,@RM_BrochureInsert,@RM_MailBelow_5K,@RM_Handling,@RM_Sealing,@RM_Tearing,@RM_Folding,@RM_Sticking,@RM_Labelling,@RM_Matching,@RM_CDArchiving,@RM_Mix,@RM_LabellingRegsterMails,@RM_EnvelopeType,@RM_EnvelopePrice,@RM_Paper,@RM_PaperPrice,@JobType,@CreatedBy)", cn);

                    if (!string.IsNullOrEmpty(RM_Printing))
                    {
                        command.Parameters.AddWithValue("@RM_Printing", RM_Printing);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM_Printing", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RM_Selfmailer))
                    {
                        command.Parameters.AddWithValue("@RM_Selfmailer", RM_Selfmailer);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM_Selfmailer", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RM_FirstInsert))
                    {

                        command.Parameters.AddWithValue("@RM_FirstInsert", RM_FirstInsert);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM_FirstInsert", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RM_SecondInsert))
                    {
                        command.Parameters.AddWithValue("@RM_SecondInsert", RM_SecondInsert);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM_SecondInsert", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RM_BrochureInsert))
                    {
                        command.Parameters.AddWithValue("@RM_BrochureInsert", RM_BrochureInsert);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM_BrochureInsert", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RM_MailBelow_5K))
                    {
                        command.Parameters.AddWithValue("@RM_MailBelow_5K", RM_MailBelow_5K);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM_MailBelow_5K", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RM_Handling))
                    {
                        command.Parameters.AddWithValue("@RM_Handling", RM_Handling);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM_Handling", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RM_Sealing))
                    {
                        command.Parameters.AddWithValue("@RM_Sealing", RM_Sealing);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM_Sealing", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RM_Tearing))
                    {
                        command.Parameters.AddWithValue("@RM_Tearing", RM_Tearing);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM_Tearing", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RM_Folding))
                    {
                        command.Parameters.AddWithValue("@RM_Folding", RM_Folding);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM_Tearing", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RM_Folding))
                    {
                        command.Parameters.AddWithValue("@RM_Sticking", RM_Sticking);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM_Sticking", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RM_Labelling))
                    {
                        command.Parameters.AddWithValue("@RM_Labelling", RM_Labelling);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM_Labelling", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RM_Matching))
                    {
                        command.Parameters.AddWithValue("@RM_Matching", RM_Matching);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM_Matching", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RM_CDArchiving))
                    {

                        command.Parameters.AddWithValue("@RM_CDArchiving", RM_CDArchiving);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM_CDArchiving", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(RM_LabellingRegsterMails))
                    {
                        command.Parameters.AddWithValue("@RM_LabellingRegsterMails", RM_LabellingRegsterMails);

                    }
                    else
                    {

                        command.Parameters.AddWithValue("@RM_LabellingRegsterMails", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RM_LabellingRegsterMails))
                    {

                        command.Parameters.AddWithValue("@RM_Mix", RM_Mix);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM_LabellingRegsterMails", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RM_EnvelopeType))
                    {
                        command.Parameters.AddWithValue("@RM_EnvelopeType", RM_EnvelopeType);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM_EnvelopeType", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RM_EnvelopeType))
                    {
                        command.Parameters.AddWithValue("@RM_EnvelopePrice", RM_EnvelopePrice);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM_EnvelopeType", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RM_Paper))
                    {
                        command.Parameters.AddWithValue("@RM_Paper", RM_Paper);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM_Paper", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RM_PaperPrice))
                    {
                        command.Parameters.AddWithValue("@RM_PaperPrice", RM_PaperPrice);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM_PaperPrice", DBNull.Value);
                    }

                    command.Parameters.AddWithValue("@JobType", "Register Mail");
                    command.Parameters.AddWithValue("@CreatedBy", IdentityName.ToString());
                    command.Parameters.AddWithValue("@Id", Id);
                    command.ExecuteNonQuery();
                    cn.Close();
                }
            }

        }

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT Id, JobName, PrintingDuplex, Inserting1,   
                                               Inserting2, Inserting3, Inserting4, BrochureInsert, MailBelow_5K, Handling, Sealing,
                                               Tearing, Folding, Sticking, Labelling, Matching, CDArchiving, Npc,EnvelopeType,
                                               EnvelopePrice, Paper, PaperPrice, SM_PrintingSM, SM_SM_Material, SM_FirstInsert, SM_SecondInsert,
                                               SM_BrochureInsert, SM_MailBelow_5K, SM_Handling, SM_Sealing, SM_Tearing, SM_Folding,
                                               SM_Sticking, SM_Labelling, SM_Matching, SM_CDArchiving, SM_EnvelopeType, SM_EnvelopePrice,
                                               SM_Paper, SM_PaperPrice, MMP_PrintingDuplex, MMP_FirstInsert, MMP_SecondInsert,
                                               MMP_InsertingMMP, MMP_BrochureInsert, MMP_MailBelow_5K, MMP_Handling, MMP_Sealing, MMP_Tearing, 
                                               MMP_Folding, MMP_Sticking, MMP_Labelling, MMP_Matching, MMP_CDArchiving, MMP_EnvelopeType,  
                                               MMP_EnvelopePrice, MMP_Paper, MMP_PaperPrice, DCP_FoldingCharges, DCP_SupplyPrintLabel, 
                                               DCP_PrintingDuplex, DCP_FirstInsert, DCP_SecondInsert, DCP_BrochureInsert, DCP_MailBelow_5K, DCP_Handling, 
                                               DCP_Sealing, DCP_Tearing, DCP_Folding, DCP_Sticking, DCP_Labelling, DCP_Matching, DCP_CDArchiving, DCP_EnvelopeType,
                                               DCP_EnvelopePrice, DCP_Paper, DCP_PaperPrice, RM_Printing, RM_Selfmailer, RM_FirstInsert, RM_SecondInsert,
                                               RM_BrochureInsert, RM_MailBelow_5K, RM_Handling, RM_Sealing, RM_Tearing, RM_Folding, RM_Sticking, RM_Labelling,
                                               RM_Matching, RM_CDArchiving, RM_Mix, RM_LabellingRegsterMails, RM_EnvelopeType, RM_EnvelopePrice, RM_Paper,RM_PaperPrice
                                    FROM [IflowSeed].[dbo].[PricingSchedule]
                                    WHERE Id=@Id";
            command.Parameters.AddWithValue("@Id", Id.ToString());
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    ViewBag.Id = reader.GetGuid(0);
                }
                if (reader.IsDBNull(1) == false)
                {
                    ViewBag.JobName = reader.GetString(1);
                }
                if (reader.IsDBNull(2) == false)
                {
                    ViewBag.PrintingDuplex = reader.GetString(2);
                }
                if (reader.IsDBNull(3) == false)
                {
                    ViewBag.Inserting1 = reader.GetString(3);
                }
                if (reader.IsDBNull(4) == false)
                {
                    ViewBag.Inserting2 = reader.GetString(4);
                }
                if (reader.IsDBNull(5) == false)
                {
                    ViewBag.Inserting3 = reader.GetString(5);
                }
                if (reader.IsDBNull(6) == false)
                {
                    ViewBag.Inserting4 = reader.GetString(6);
                }
                if (reader.IsDBNull(7) == false)
                {
                    ViewBag.BrochureInsert = reader.GetString(7);
                }
                if (reader.IsDBNull(8) == false)
                {
                    ViewBag.MailBelow_5K = reader.GetString(8);
                }
                if (reader.IsDBNull(9) == false)
                {
                    ViewBag.Handling = reader.GetString(9);
                }
                if (reader.IsDBNull(10) == false)
                {
                    ViewBag.Sealing = reader.GetString(10);
                }
                if (reader.IsDBNull(11) == false)
                {
                    ViewBag.Tearing = reader.GetString(11);
                }
                if (reader.IsDBNull(12) == false)
                {
                    ViewBag.Folding = reader.GetString(12);
                }
                if (reader.IsDBNull(13) == false)
                {
                    ViewBag.Sticking = reader.GetString(13);
                }
                if (reader.IsDBNull(14) == false)
                {
                    ViewBag.Labelling = reader.GetString(14);
                }
                if (reader.IsDBNull(15) == false)
                {
                    ViewBag.Matching = reader.GetString(15);
                }
                if (reader.IsDBNull(16) == false)
                {
                    ViewBag.CDArchiving = reader.GetString(16);
                }
                if (reader.IsDBNull(17) == false)
                {
                    ViewBag.Npc = reader.GetString(17);
                }
                if (reader.IsDBNull(18) == false)
                {
                    ViewBag.EnvelopeType = reader.GetString(18);
                }
                if (reader.IsDBNull(19) == false)
                {
                    ViewBag.EnvelopePrice = reader.GetString(19);
                }
                if (reader.IsDBNull(20) == false)
                {
                    ViewBag.Paper = reader.GetString(20);
                }
                if (reader.IsDBNull(21) == false)
                {
                    ViewBag.PaperPrice = reader.GetString(21);
                }
                if (reader.IsDBNull(22) == false)
                {
                    ViewBag.SM_PrintingSM = reader.GetString(22);
                }
                if (reader.IsDBNull(23) == false)
                {
                    ViewBag.SM_SM_Material = reader.GetString(23);
                }
                if (reader.IsDBNull(24) == false)
                {
                    ViewBag.SM_FirstInsert = reader.GetString(24);
                }
                if (reader.IsDBNull(25) == false)
                {
                    ViewBag.SM_SecondInsert = reader.GetString(25);
                }
                if (reader.IsDBNull(26) == false)
                {
                    ViewBag.SM_BrochureInsert = reader.GetString(26);
                }
                if (reader.IsDBNull(27) == false)
                {
                    ViewBag.SM_MailBelow_5K = reader.GetString(27);
                }
                if (reader.IsDBNull(28) == false)
                {
                    ViewBag.SM_Handling = reader.GetString(28);
                }
                if (reader.IsDBNull(29) == false)
                {
                    ViewBag.SM_Sealing = reader.GetString(29);
                }
                if (reader.IsDBNull(30) == false)
                {
                    ViewBag.SM_Tearing = reader.GetString(30);
                }
                if (reader.IsDBNull(31) == false)
                {
                    ViewBag.SM_Folding = reader.GetString(31);
                }
                if (reader.IsDBNull(32) == false)
                {
                    ViewBag.SM_Sticking = reader.GetString(32);
                }
                if (reader.IsDBNull(33) == false)
                {
                    ViewBag.SM_Labelling = reader.GetString(33);
                }
                if (reader.IsDBNull(34) == false)
                {
                    ViewBag.SM_Matching = reader.GetString(34);
                }
                if (reader.IsDBNull(35) == false)
                {
                    ViewBag.SM_CDArchiving = reader.GetString(35);
                }
                if (reader.IsDBNull(36) == false)
                {
                    ViewBag.SM_EnvelopeType = reader.GetString(36);
                }
                if (reader.IsDBNull(37) == false)
                {
                    ViewBag.SM_EnvelopePrice = reader.GetString(37);
                }
                if (reader.IsDBNull(38) == false)
                {
                    ViewBag.SM_Paper = reader.GetString(38);
                }
                if (reader.IsDBNull(39) == false)
                {
                    ViewBag.SM_PaperPrice = reader.GetString(39);
                }
                if (reader.IsDBNull(40) == false)
                {
                    ViewBag.MMP_PrintingDuplex = reader.GetString(40);
                }
                if (reader.IsDBNull(41) == false)
                {
                    ViewBag.MMP_FirstInsert = reader.GetString(41);
                }
                if (reader.IsDBNull(42) == false)
                {
                    ViewBag.MMP_SecondInsert = reader.GetString(42);
                }
                if (reader.IsDBNull(43) == false)
                {
                    ViewBag.MMP_InsertingMMP = reader.GetString(43);
                }
                if (reader.IsDBNull(44) == false)
                {
                    ViewBag.MMP_BrochureInsert = reader.GetString(44);
                }
                if (reader.IsDBNull(45) == false)
                {
                    ViewBag.MMP_MailBelow_5K = reader.GetString(45);
                }
                if (reader.IsDBNull(46) == false)
                {
                    ViewBag.MMP_Handling = reader.GetString(46);
                }
                if (reader.IsDBNull(47) == false)
                {
                    ViewBag.MMP_Sealing = reader.GetString(47);
                }
                if (reader.IsDBNull(48) == false)
                {
                    ViewBag.MMP_Tearing = reader.GetString(48);
                }
                if (reader.IsDBNull(49) == false)
                {
                    ViewBag.MMP_Folding = reader.GetString(49);
                }
                if (reader.IsDBNull(50) == false)
                {
                    ViewBag.MMP_Sticking = reader.GetString(50);
                }
                if (reader.IsDBNull(51) == false)
                {
                    ViewBag.MMP_Labelling = reader.GetString(51);
                }
                if (reader.IsDBNull(52) == false)
                {
                    ViewBag.MMP_Matching = reader.GetString(52);
                }
                if (reader.IsDBNull(53) == false)
                {
                    ViewBag.MMP_CDArchiving = reader.GetString(53);
                }
                if (reader.IsDBNull(54) == false)
                {
                    ViewBag.MMP_EnvelopeType = reader.GetString(54);
                }
                if (reader.IsDBNull(55) == false)
                {
                    ViewBag.MMP_EnvelopePrice = reader.GetString(55);
                }
                if (reader.IsDBNull(56) == false)
                {
                    ViewBag.MMP_Paper = reader.GetString(56);
                }
                if (reader.IsDBNull(57) == false)
                {
                    ViewBag.MMP_PaperPrice = reader.GetString(57);
                }
                if (reader.IsDBNull(58) == false)
                {
                    ViewBag.DCP_FoldingCharges = reader.GetString(58);
                }
                if (reader.IsDBNull(59) == false)
                {
                    ViewBag.DCP_SupplyPrintLabel = reader.GetString(59);
                }
                if (reader.IsDBNull(60) == false)
                {
                    ViewBag.DCP_PrintingDuplex = reader.GetString(60);
                }
                if (reader.IsDBNull(61) == false)
                {
                    ViewBag.DCP_FirstInsert = reader.GetString(61);
                }
                if (reader.IsDBNull(62) == false)
                {
                    ViewBag.DCP_SecondInsert = reader.GetString(62);
                }
                if (reader.IsDBNull(63) == false)
                {
                    ViewBag.DCP_BrochureInsert = reader.GetString(63);
                }
                if (reader.IsDBNull(64) == false)
                {
                    ViewBag.DCP_MailBelow_5K = reader.GetString(64);
                }
                if (reader.IsDBNull(65) == false)
                {
                    ViewBag.DCP_Handling = reader.GetString(65);
                }
                if (reader.IsDBNull(66) == false)
                {
                    ViewBag.DCP_Sealing = reader.GetString(66);
                }
                if (reader.IsDBNull(67) == false)
                {
                    ViewBag.DCP_Tearing = reader.GetString(67);
                }
                if (reader.IsDBNull(68) == false)
                {
                    ViewBag.DCP_Folding = reader.GetString(68);
                }
                if (reader.IsDBNull(69) == false)
                {
                    ViewBag.DCP_Sticking = reader.GetString(69);
                }
                if (reader.IsDBNull(70) == false)
                {
                    ViewBag.DCP_Labelling = reader.GetString(70);
                }
                if (reader.IsDBNull(71) == false)
                {
                    ViewBag.DCP_Matching = reader.GetString(71);
                }
                if (reader.IsDBNull(72) == false)
                {
                    ViewBag.DCP_CDArchiving = reader.GetString(72);
                }
                if (reader.IsDBNull(73) == false)
                {
                    ViewBag.DCP_EnvelopeType = reader.GetString(73);
                }
                if (reader.IsDBNull(74) == false)
                {
                    ViewBag.DCP_EnvelopePrice = reader.GetString(74);
                }
                if (reader.IsDBNull(75) == false)
                {
                    ViewBag.DCP_Paper = reader.GetString(75);
                }
                if (reader.IsDBNull(76) == false)
                {
                    ViewBag.DCP_PaperPrice = reader.GetString(76);
                }
                if (reader.IsDBNull(77) == false)
                {
                    ViewBag.RM_Printing = reader.GetString(77);
                }
                if (reader.IsDBNull(78) == false)
                {
                    ViewBag.RM_Selfmailer = reader.GetString(78);
                }
                if (reader.IsDBNull(79) == false)
                {
                    ViewBag.RM_FirstInsert = reader.GetString(79);
                }
                if (reader.IsDBNull(80) == false)
                {
                    ViewBag.RM_SecondInsert = reader.GetString(80);
                }
                if (reader.IsDBNull(81) == false)
                {
                    ViewBag.RM_BrochureInsert = reader.GetString(81);
                }
                if (reader.IsDBNull(82) == false)
                {
                    ViewBag.RM_MailBelow_5K = reader.GetString(82);
                }
                if (reader.IsDBNull(83) == false)
                {
                    ViewBag.RM_Handling = reader.GetString(83);
                }
                if (reader.IsDBNull(84) == false)
                {
                    ViewBag.RM_Sealing = reader.GetString(84);
                }
                if (reader.IsDBNull(85) == false)
                {
                    ViewBag.RM_Tearing = reader.GetString(85);
                }
                if (reader.IsDBNull(86) == false)
                {
                    ViewBag.RM_Folding = reader.GetString(86);
                }
                if (reader.IsDBNull(87) == false)
                {
                    ViewBag.RM_Sticking = reader.GetString(87);
                }
                if (reader.IsDBNull(88) == false)
                {
                    ViewBag.RM_Labelling = reader.GetString(88);
                }
                if (reader.IsDBNull(89) == false)
                {
                    ViewBag.RM_Matching = reader.GetString(89);
                }
                if (reader.IsDBNull(90) == false)
                {
                    ViewBag.RM_CDArchiving = reader.GetString(90);
                }
                if (reader.IsDBNull(91) == false)
                {
                    ViewBag.RM_Mix = reader.GetString(91);
                }
                if (reader.IsDBNull(92) == false)
                {
                    ViewBag.RM_LabellingRegsterMails = reader.GetString(92);
                }
                if (reader.IsDBNull(93) == false)
                {
                    ViewBag.RM_EnvelopeType = reader.GetString(93);
                }
                if (reader.IsDBNull(94) == false)
                {
                    ViewBag.RM_EnvelopePrice = reader.GetString(94);
                }
                if (reader.IsDBNull(95) == false)
                {
                    ViewBag.RM_Paper = reader.GetString(95);
                }
                if (reader.IsDBNull(96) == false)
                {
                    ViewBag.RM_PaperPrice = reader.GetString(96);
                }
            }
            cn.Close();
        }

        return View();

    }



    /// 

    [ValidateInput(false)]
    public ActionResult CreatePricingBillingBatch(string set, string Id, string Customer_Name, string JobType, string JobName, string CreatedBy, string PrintingDuplex, string Inserting1,
                                             string Inserting2, string Inserting3, string Inserting4, string BrochureInsert, string MailBelow_5K, string Handling, string PI_Sealing, string Sealing, string Tearing, string Folding,
                                             string PI_Tearing, string PI_Folding, string Sticking, string Labelling, string Matching, string CDArchiving, string Npc, string EnvelopeType,
                                             string EnvelopePrice, string Paper, string PaperPrice, string PI_EnvelopeType,
                                             string PI_EnvelopePrice, string PI_Paper, string PI_PaperPrice, string SM_PrintingSM, string SM_SM_Material, string SM_FirstInsert, string SM_SecondInsert,
                                             string SM_BrochureInsert, string SM_MailBelow_5K, string SM_Handling, string SM_Sealing, string SM_Tearing, string SM_Folding,
                                             string SM_Sticking, string SM_Labelling, string SM_Matching, string SM_CDArchiving, string SM_EnvelopeType, string SM_EnvelopePrice,
                                             string SM_Paper, string SM_PaperPrice, string SM_Paper2, string SM_PaperPrice2, string MMP_PrintingDuplex, string MMP_FirstInsert, string MMP_SecondInsert,
                                             string MMP_InsertingMMP, string MMP_BrochureInsert, string MMP_MailBelow_5K, string MMP_Handling, string MMP_Sealing, string MMP_Tearing,
                                             string MMP_Folding, string MMP_Sticking, string MMP_Labelling, string MMP_Matching, string MMP_CDArchiving, string MMP_EnvelopeType, string MMP_EnvelopePrice, string MMP_Paper,
                                             string MMP_PaperPrice, string DCP_FoldingCharges, string DCP_SupplyPrintLabel, string DCP_PrintingDuplex, string DCP_FirstInsert,
                                             string DCP_SecondInsert, string DCP_BrochureInsert, string DCP_MailBelow_5K, string DCP_Handling, string DCP_Sealing, string DCP_Tearing,
                                             string DCP_Folding, string DCP_Sticking, string DCP_Labelling, string DCP_Matching, string DCP_CDArchiving, string DCP_EnvelopeType,
                                             string DCP_EnvelopePrice, string DCP_Paper, string DCP_PaperPrice, string RM_Printing, string RM_Selfmailer, string RM_FirstInsert, string RM_SecondInsert,
                                             string RM_BrochureInsert, string RM_MailBelow_5K, string RM_Handling, string RM_Sealing, string RM_Tearing, string RM_Folding, string RM_Sticking, string RM_Labelling,
                                             string RM_Matching, string RM_CDArchiving, string RM_Mix, string RM_LabellingRegsterMails, string RM_EnvelopeType, string RM_EnvelopePrice, string RM_Paper, string RM_PaperPrice,
                                             string VolumeService, string RateServie, string ValuePostage, string RatePostage, string ServiceChange, string Postage, string TotalAmountService, string TotalAmountPostage, string Mix, string VolumeMix, string RateMix, string TotalAmountMix, string CourierChanges, string VolumeCC, string RateCC, string DeliveryCharge, string VolumeDC, string RateDC, string Franking, string VolumeF, string RateF, string SelfMailer, string VolumeS, string RateS, string Others, string VolumeO, string RateO, string Imprest, string ValueImprest, string RateImprest
                                            , string TotalAmountImprest, string Others2, string VolumeO2, string RateO2, string TotalAmountO2, string Others3, string VolumeO3, string RateO3, string TotalAmountO3, string Others4, string VolumeO4, string RateO4, string TotalAmountO4, string Others5, string VolumeO5, string RateO5, string TotalAmountO5, string TotalAmountO, string TotalAmountCC, string TotalAmountDC, string TotalAmountF, string TotalAmountS, string ServiceCharges, string Rate, string Sst, string Description,
                                             string PD_Rate, string PD_Volume, string PD_Total, string IS1_Rate, string IS1_Volume, string IS1_Total, string IS2_Rate, string IS2_Volume, string IS2_Total, string IS3_Rate, string IS3_Volume, string IS3_Total, string IS4_Rate, string IS4_Volume, string IS4_Total,
                                            string BI_Rate, string BI_Volume, string BI_Total, string M5_Rate, string M5_Volume, string M5_Total, string HL_Rate, string HL_Volume, string HL_Total, string PIS_Rate, string PIS_Volume, string PIS_Total, string PIT_Rate, string PIT_Volume, string PIT_Total, string PIF_Rate, string PIF_Volume, string PIF_Total,
                                              string SK_Rate, string SK_Volume, string SK_Total, string LG_Rate, string LG_Volume, string LG_Total, string MG_Rate, string MG_Volume, string MG_Total, string CDA_Rate, string CDA_Volume, string CDA_Total, string NPC_Rate, string NPC_Volume, string NPC_Total, string ET_Rate, string ET_Volume, string ET_Total,
                                            string EP_Rate, string EP_Volume, string EP_Total, string P_Rate, string P_Volume, string P_Total, string PP_Rate, string PP_Volume, string PP_Total,
                                            string SMPG_Rate, string SMPG_Volume, string SMPG_Total, string SMM_Rate, string SMM_Volume, string SMM_Total, string SM5_Rate, string SM5_Volume, string SM5_Total, string SMH_Rate, string SMH_Volume, string SMH_Total, string SMP_Rate, string SMP_Volume, string SMP_Total,
                                             string SMPP_Rate, string SMPP_Volume, string SMPP_Total, string SMP2_Rate, string SMP2_Volume, string SMP2_Total, string SMPP2_Rate, string SMPP2_Volume, string SMPP2_Total,
                                             string MMPPD_Rate, string MMPPD_Volume, string MMPPD_Total, string MMPFI_Rate, string MMPFI_Volume, string MMPFI_Total, string MMPSI_Rate, string MMPSI_Volume, string MMPSI_Total, string MMPI_Rate, string MMPI_Volume, string MMPI_Total, string MMPBI_Rate, string MMPBI_Volume, string MMPBI_Total,
                                            string MMP5_Rate, string MMP5_Volume, string MMP5_Total, string MMPH_Rate, string MMPH_Volume, string MMPH_Total, string MMPS_Rate, string MMPS_Volume, string MMPS_Total, string MMPT_Rate, string MMPT_Volume, string MMPT_Total, string MMPF_Rate, string MMPF_Volume, string MMPF_Total, string MMPST_Rate, string MMPST_Volume, string MMPST_Total,
                                             string MMPL_Rate, string MMPL_Volume, string MMPL_Total, string MMPM_Rate, string MMPM_Volume, string MMPM_Total, string MMPCD_Rate, string MMPCD_Volume, string MMPCD_Total, string MMPET_Rate, string MMPET_Volume, string MMPET_Total, string MMPEP_Rate, string MMPEP_Volume, string MMPEP_Total, string MMPPR_Rate, string MMPPR_Volume, string MMPPR_Total,
                                              string MMPPP_Rate, string MMPPP_Volume, string MMPPP_Total, string DCPFC_Rate, string DCPFC_Volume, string DCPFC_Total, string DCPSP_Rate, string DCPSP_Volume, string DCPSP_Total, string DCPPD_Rate, string DCPPD_Volume, string DCPPD_Total, string DCPFI_Rate, string DCPFI_Volume, string DCPFI_Total, string DCPSI_Rate, string DCPSI_Volume, string DCPSI_Total,
                                            string DCPBI_Rate, string DCPBI_Volume, string DCPBI_Total, string DCP5_Rate, string DCP5_Volume, string DCP5_Total, string DCPH_Rate, string DCPH_Volume, string DCPH_Total, string DCPSL_Rate, string DCPSL_Volume, string DCPSL_Total, string DCPT_Rate, string DCPT_Volume, string DCPT_Total,
                                            string DCPF_Rate, string DCPF_Volume, string DCPF_Total, string DCPS_Rate, string DCPS_Volume, string DCPS_Total, string DCPL_Rate, string DCPL_Volume, string DCPL_Total, string DCPM_Rate, string DCPM_Volume, string DCPM_Total, string DCPCD_Rate, string DCPCD_Volume, string DCPCD_Total,
                                            string DCPET_Rate, string DCPET_Volume, string DCPET_Total, string DCPEP_Rate, string DCPEP_Volume, string DCPEP_Total, string DCPP_Rate, string DCPP_Volume, string DCPP_Total, string DCPPP_Rate, string DCPPP_Volume, string DCPPP_Total,
                                            string LBPrintingDuplex, string LBInserting1, string LBInserting2, string LBInserting3, string LBInserting4, string LBBrochureInsert, string LBMailBelow_5K, string LBHandling, string LBPI_Sealing, string LBPI_Tearing, string LBPI_Folding, string LBSticking, string LBLabelling, string LBMatching, string LBCDArchiving, string LBNpc, string LBPI_EnvelopeType, string LBPI_EnvelopePrice, string LBPI_Paper, string LBPI_PaperPrice, string LBSM_PrintingSM, string LBSM_SM_Material, string LBSM_MailBelow_5K, string LBSM_Handling, string LBSM_Paper, string LBSM_PaperPrice, string LBSM_Paper2, string LBSM_PaperPrice2,
                                      string LBMMP_PrintingDuplex, string LBMMP_FirstInsert, string LBMMP_SecondInsert, string LBMMP_InsertingMMP, string LBMMP_BrochureInsert, string LBMMP_MailBelow_5K, string LBMMP_Handling, string LBMMP_Sealing, string LBMMP_Tearing, string LBMMP_Folding, string LBMMP_Sticking, string LBMMP_Labelling, string LBMMP_Matching, string LBMMP_CDArchiving, string LBMMP_EnvelopeType, string LBMMP_EnvelopePrice, string LBMMP_Paper, string LBMMP_PaperPrice,
                                      string LBDCP_FoldingCharges, string LBDCP_SupplyPrintLabel, string LBDCP_PrintingDuplex, string LBDCP_FirstInsert, string LBDCP_SecondInsert, string LBDCP_BrochureInsert, string LBDCP_MailBelow_5K, string LBDCP_Handling, string LBDCP_Sealing, string LBDCP_Tearing, string LBDCP_Folding, string LBDCP_Sticking, string LBDCP_Labelling, string LBDCP_Matching, string LBDCP_CDArchiving, string LBDCP_EnvelopeType, string LBDCP_EnvelopePrice, string LBDCP_Paper,
                                      string LBDCP_PaperPrice, string LBRM_Printing, string LBRM_Selfmailer, string LBRM_MailBelow_5K, string LBRM_Handling, string LBRM_LabellingRegsterMails, string LBRM_Paper, string LBRM_PaperPrice, string LBPrintingDuplex2, string LBRM_Paper2, string LBRM_PaperPrice2,
                                            string RMPT_Rate, string RMPT_Volume, string RMPT_Total, string RMS_Rate, string RMS_Volume, string RMS_Total, string RM5_Rate, string RM5_Volume, string RM5_Total, string RMH_Rate, string RMH_Volume, string RMH_Total, string RML_Rate, string RML_Volume, string RML_Total, string RMP_Rate, string RMP_Volume, string RMP_Total, string RMPP_Rate, string RMPP_Volume, string RMPP_Total)


    {
        var IdentityName = @Session["Fullname"];
        var Role = @Session["Role"];
        ViewBag.IsDepart = @Session["Department"];
        Session["Id"] = Id;





        List<JobInstruction> viewPosting2 = new List<JobInstruction>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil = 1;
            cn.Open();
            command.CommandText = @"SELECT JobInstruction.Id, JobInstruction.Customer_Name, JobInstruction.ProductName, JobInstruction.Status, JobInstruction.JobType, JobInstruction.JobClass, JobInstruction.Frequency, JobAuditTrailDetail.LogTagNo,JobInstruction.PrintingDuplex,JobInstruction.Inserting1,JobInstruction.Inserting2,JobInstruction.Inserting3
                 ,JobInstruction.Inserting4,JobInstruction.BrochureInsert,JobInstruction.MailBelow_5K,JobInstruction.Handling,JobInstruction.PI_Sealing,JobInstruction.PI_Tearing,JobInstruction.PI_Folding,JobInstruction.Sticking,JobInstruction.Labelling,JobInstruction.Matching,JobInstruction.CDArchiving,JobInstruction.Npc,JobInstruction.PI_EnvelopeType,JobInstruction.PI_EnvelopePrice
                ,JobInstruction.PI_Paper,JobInstruction.PI_PaperPrice,JobInstruction.SM_PrintingSM,JobInstruction.SM_SM_Material,JobInstruction.SM_MailBelow_5K,JobInstruction.SM_Handling,JobInstruction.SM_Paper,JobInstruction.SM_PaperPrice,JobInstruction.SM_Paper2,JobInstruction.SM_PaperPrice2,JobInstruction.MMP_PrintingDuplex,JobInstruction.MMP_FirstInsert
               ,JobInstruction.MMP_SecondInsert,JobInstruction.MMP_InsertingMMP,JobInstruction.MMP_BrochureInsert,JobInstruction.MMP_MailBelow_5K,JobInstruction.MMP_Handling,JobInstruction.MMP_Sealing,JobInstruction.MMP_Tearing,JobInstruction.MMP_Folding,JobInstruction.MMP_Sticking,JobInstruction.MMP_Labelling,JobInstruction.MMP_Matching,JobInstruction.MMP_CDArchiving,JobInstruction.MMP_EnvelopeType,JobInstruction.MMP_EnvelopePrice
               ,JobInstruction.MMP_Paper,JobInstruction.MMP_PaperPrice,JobInstruction.DCP_FoldingCharges,JobInstruction.DCP_SupplyPrintLabel,JobInstruction.DCP_PrintingDuplex,JobInstruction.DCP_FirstInsert,JobInstruction.DCP_SecondInsert,JobInstruction.DCP_BrochureInsert,JobInstruction.DCP_MailBelow_5K,JobInstruction.DCP_Handling,JobInstruction.DCP_Sealing,JobInstruction.DCP_Tearing,JobInstruction.DCP_Folding,JobInstruction.DCP_Sticking
              ,JobInstruction.DCP_Labelling,JobInstruction.DCP_Matching,JobInstruction.DCP_CDArchiving,JobInstruction.DCP_EnvelopeType,JobInstruction.DCP_EnvelopePrice,JobInstruction.DCP_Paper,JobInstruction.DCP_PaperPrice,JobInstruction.RM_Printing,JobInstruction.RM_Selfmailer,JobInstruction.RM_MailBelow_5K

               ,JobInstruction.RM_Handling,JobInstruction.RM_LabellingRegsterMails,JobInstruction.RM_Paper,JobInstruction.RM_PaperPrice,JobInstruction.PrintingDuplex,JobInstruction.RM_PaperPrice2,JobInstruction.RM_Paper2,JobInstruction.PrintingDuplex2
                ,JobInstruction.LBPrintingDuplex2 ,JobInstruction.LBInserting1 ,JobInstruction.LBInserting2 ,JobInstruction.LBInserting3 ,JobInstruction.LBInserting4 ,JobInstruction.LBBrochureInsert ,JobInstruction.LBMailBelow_5K ,JobInstruction.LBHandling ,JobInstruction.LBPI_Sealing ,JobInstruction.LBPI_Tearing ,JobInstruction.LBPI_Folding ,JobInstruction.LBSticking ,JobInstruction.LBLabelling ,JobInstruction.LBMatching ,JobInstruction.LBCDArchiving 
	,JobInstruction.LBNpc ,JobInstruction.LBPI_EnvelopeType ,JobInstruction.LBPI_EnvelopePrice,JobInstruction.LBPI_Paper ,JobInstruction.LBPI_PaperPrice ,JobInstruction.LBSM_PrintingSM ,JobInstruction.LBSM_SM_Material ,JobInstruction.LBSM_MailBelow_5K,JobInstruction.LBSM_Handling,JobInstruction.LBSM_Paper,JobInstruction.LBSM_PaperPrice,JobInstruction.LBSM_Paper2,JobInstruction.LBSM_PaperPrice2,JobInstruction.LBMMP_PrintingDuplex,JobInstruction.LBMMP_FirstInsert,JobInstruction.LBMMP_SecondInsert,JobInstruction.LBMMP_InsertingMMP,JobInstruction.LBMMP_BrochureInsert,JobInstruction.LBMMP_MailBelow_5K,JobInstruction.LBMMP_Handling,JobInstruction.LBMMP_Sealing,JobInstruction.LBMMP_Tearing,JobInstruction.LBMMP_Folding,JobInstruction.LBMMP_Sticking,JobInstruction.LBMMP_Labelling,JobInstruction.LBMMP_Matching
	,JobInstruction.LBMMP_CDArchiving,JobInstruction.LBMMP_EnvelopeType,JobInstruction.LBMMP_EnvelopePrice,JobInstruction.LBMMP_Paper,JobInstruction.LBMMP_PaperPrice,JobInstruction.LBDCP_FoldingCharges,JobInstruction.LBDCP_SupplyPrintLabel,JobInstruction.LBDCP_PrintingDuplex,JobInstruction.LBDCP_FirstInsert,JobInstruction.LBDCP_SecondInsert,JobInstruction.LBDCP_BrochureInsert,JobInstruction.LBDCP_MailBelow_5K ,JobInstruction.LBDCP_Handling,JobInstruction.LBDCP_Sealing,JobInstruction.LBDCP_Tearing,JobInstruction.LBDCP_Folding,JobInstruction.LBDCP_Sticking,JobInstruction.LBDCP_Labelling,JobInstruction.LBDCP_Matching,JobInstruction.LBDCP_CDArchiving,JobInstruction.LBDCP_EnvelopeType,JobInstruction.LBDCP_EnvelopePrice,JobInstruction.LBDCP_Paper,JobInstruction.LBDCP_PaperPrice,JobInstruction.LBRM_Printing,JobInstruction.LBRM_Selfmailer,JobInstruction.LBRM_MailBelow_5K,JobInstruction.LBRM_Handling,JobInstruction.LBRM_LabellingRegsterMails,JobInstruction.LBRM_Paper,JobInstruction.LBRM_PaperPrice
	                     FROM  JobInstruction INNER JOIN
                                        JobAuditTrailDetail ON JobInstruction.Id = JobAuditTrailDetail.JobAuditTrailId
                                         WHERE  JobInstruction.Id =@Id AND JobInstruction.Status= 'FINANCE'                                       
                                        ORDER BY LogTagNo";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();


            while (reader.Read())
            {
                JobInstruction model = new JobInstruction();
                {
                    model.Bil = _bil++;
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Id = reader.GetGuid(0);
                        ViewBag.Id = reader.GetGuid(0);
                    }

                    if (reader.IsDBNull(1) == false)
                    {
                        model.Customer_Name = reader.GetString(1);
                        ViewBag.Customer_Name = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        model.ProductName = reader.GetString(2);
                        ViewBag.ProductName = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        model.Status = reader.GetString(3);
                        ViewBag.Status = reader.GetString(3);
                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        model.JobType = reader.GetString(4);
                        ViewBag.JobType = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        model.JobClass = reader.GetString(5);
                        ViewBag.JobClass = reader.GetString(5);
                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        model.Frequency = reader.GetString(6);
                        ViewBag.Frequency = reader.GetString(6);
                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        model.LogTagNo = reader.GetString(7);
                        ViewBag.LogTagNo = reader.GetString(7);
                    }

                    if (reader.IsDBNull(8) == false)
                    {
                        model.PrintingDuplex = reader.GetString(8);
                        ViewBag.PrintingDuplex = reader.GetString(8);
                    }
                    if (reader.IsDBNull(9) == false)
                    {
                        model.Inserting1 = reader.GetString(9);
                        ViewBag.Inserting1 = reader.GetString(9);
                    }
                    if (reader.IsDBNull(10) == false)
                    {
                        model.Inserting2 = reader.GetString(10);
                        ViewBag.Inserting2 = reader.GetString(10);
                    }
                    if (reader.IsDBNull(11) == false)
                    {
                        model.Inserting3 = reader.GetString(11);
                        ViewBag.Inserting3 = reader.GetString(11);
                    }

                    if (reader.IsDBNull(12) == false)
                    {
                        model.Inserting4 = reader.GetString(12);
                        ViewBag.Inserting4 = reader.GetString(12);
                    }
                    if (reader.IsDBNull(13) == false)
                    {
                        model.BrochureInsert = reader.GetString(13);
                        ViewBag.BrochureInsert = reader.GetString(13);
                    }
                    if (reader.IsDBNull(14) == false)
                    {
                        model.MailBelow_5K = reader.GetString(14);
                        ViewBag.MailBelow_5K = reader.GetString(14);
                    }
                    if (reader.IsDBNull(15) == false)
                    {
                        model.Handling = reader.GetString(15);
                        ViewBag.Handling = reader.GetString(15);

                    }
                    if (reader.IsDBNull(16) == false)
                    {
                        model.PI_Sealing = reader.GetString(16);
                        ViewBag.PI_Sealing = reader.GetString(16);
                    }
                    if (reader.IsDBNull(17) == false)
                    {
                        model.PI_Tearing = reader.GetString(17);
                        ViewBag.PI_Tearing = reader.GetString(17);
                    }
                    if (reader.IsDBNull(18) == false)
                    {
                        model.PI_Folding = reader.GetString(18);
                        ViewBag.PI_Folding = reader.GetString(18);
                    }
                    if (reader.IsDBNull(19) == false)
                    {
                        model.Sticking = reader.GetString(19);
                        ViewBag.Sticking = reader.GetString(19);
                    }
                    if (reader.IsDBNull(20) == false)
                    {
                        model.Labelling = reader.GetString(21);
                        ViewBag.Labelling = reader.GetString(21);
                    }
                    if (reader.IsDBNull(22) == false)
                    {
                        model.Matching = reader.GetString(22);
                        ViewBag.Matching = reader.GetString(22);
                    }
                    if (reader.IsDBNull(23) == false)
                    {
                        model.CDArchiving = reader.GetString(23);
                        ViewBag.CDArchiving = reader.GetString(23);
                    }
                    if (reader.IsDBNull(24) == false)
                    {
                        model.Npc = reader.GetString(24);
                        ViewBag.Npc = reader.GetString(24);
                    }
                    if (reader.IsDBNull(25) == false)
                    {
                        model.PI_EnvelopeType = reader.GetString(25);
                        ViewBag.PI_EnvelopeType = reader.GetString(25);

                    }

                    if (reader.IsDBNull(26) == false)
                    {
                        model.PI_EnvelopePrice = reader.GetString(26);
                        ViewBag.PI_EnvelopePrice = reader.GetString(26);



                    }

                    if (reader.IsDBNull(27) == false)
                    {
                        model.PI_Paper = reader.GetString(27);
                        ViewBag.PI_Paper = reader.GetString(27);

                    }

                    if (reader.IsDBNull(28) == false)
                    {
                        model.PI_PaperPrice = reader.GetString(28);
                        ViewBag.PI_PaperPrice = reader.GetString(28);


                    }
                    if (reader.IsDBNull(29) == false)
                    {
                        model.SM_PrintingSM = reader.GetString(29);
                        ViewBag.SM_PrintingSM = reader.GetString(29);


                    }
                    if (reader.IsDBNull(30) == false)
                    {
                        model.SM_SM_Material = reader.GetString(30);
                        ViewBag.SM_SM_Material = reader.GetString(30);


                    }
                    if (reader.IsDBNull(31) == false)
                    {
                        model.SM_MailBelow_5K = reader.GetString(31);
                        ViewBag.SM_MailBelow_5K = reader.GetString(31);


                    }
                    if (reader.IsDBNull(32) == false)
                    {
                        model.SM_Handling = reader.GetString(32);
                        ViewBag.SM_Handling = reader.GetString(32);


                    }
                    if (reader.IsDBNull(33) == false)
                    {
                        model.SM_Paper = reader.GetString(33);
                        ViewBag.SM_Paper = reader.GetString(33);


                    }
                    if (reader.IsDBNull(34) == false)
                    {
                        model.SM_PaperPrice = reader.GetString(34);
                        ViewBag.SM_PaperPrice = reader.GetString(34);


                    }

                    if (reader.IsDBNull(35) == false)
                    {
                        model.SM_Paper2 = reader.GetString(35);
                        ViewBag.SM_Paper2 = reader.GetString(35);

                    }
                    if (reader.IsDBNull(36) == false)
                    {
                        model.SM_PaperPrice2 = reader.GetString(36);
                        ViewBag.SM_PaperPrice2 = reader.GetString(36);


                    }



                    if (reader.IsDBNull(37) == false)
                    {
                        model.MMP_PrintingDuplex = reader.GetString(37);
                        ViewBag.MMP_PrintingDuplex = reader.GetString(37);


                    }
                    if (reader.IsDBNull(38) == false)
                    {
                        model.MMP_FirstInsert = reader.GetString(38);
                        ViewBag.MMP_FirstInsert = reader.GetString(38);


                    }
                    if (reader.IsDBNull(39) == false)
                    {
                        model.MMP_PrintingDuplex = reader.GetString(39);
                        ViewBag.MMP_PrintingDuplex = reader.GetString(39);


                    }
                    if (reader.IsDBNull(40) == false)
                    {
                        model.MMP_SecondInsert = reader.GetString(40);
                        ViewBag.MMP_SecondInsert = reader.GetString(40);


                    }
                    if (reader.IsDBNull(41) == false)
                    {
                        model.MMP_InsertingMMP = reader.GetString(41);
                        ViewBag.MMP_InsertingMMP = reader.GetString(41);


                    }
                    if (reader.IsDBNull(42) == false)
                    {
                        model.MMP_BrochureInsert = reader.GetString(42);
                        ViewBag.MMP_BrochureInsert = reader.GetString(42);


                    }
                    if (reader.IsDBNull(43) == false)
                    {
                        model.MMP_MailBelow_5K = reader.GetString(43);
                        ViewBag.MMP_MailBelow_5K = reader.GetString(43);


                    }
                    if (reader.IsDBNull(44) == false)
                    {
                        model.MMP_Handling = reader.GetString(44);
                        ViewBag.MMP_Handling = reader.GetString(44);


                    }
                    if (reader.IsDBNull(45) == false)
                    {
                        model.MMP_Sealing = reader.GetString(45);
                        ViewBag.MMP_Sealing = reader.GetString(45);


                    }
                    if (reader.IsDBNull(46) == false)
                    {
                        model.MMP_Tearing = reader.GetString(46);
                        ViewBag.MMP_Tearing = reader.GetString(46);


                    }
                    if (reader.IsDBNull(47) == false)
                    {
                        model.MMP_Folding = reader.GetString(47);
                        ViewBag.MMP_Folding = reader.GetString(47);


                    }
                    if (reader.IsDBNull(48) == false)
                    {
                        model.MMP_Sticking = reader.GetString(48);
                        ViewBag.MMP_Sticking = reader.GetString(48);


                    }
                    if (reader.IsDBNull(49) == false)
                    {
                        model.MMP_Labelling = reader.GetString(49);
                        ViewBag.MMP_Labelling = reader.GetString(49);


                    }
                    if (reader.IsDBNull(50) == false)
                    {
                        model.MMP_Matching = reader.GetString(50);
                        ViewBag.MMP_Matching = reader.GetString(50);


                    }
                    if (reader.IsDBNull(51) == false)
                    {
                        model.MMP_CDArchiving = reader.GetString(51);
                        ViewBag.MMP_CDArchiving = reader.GetString(51);


                    }
                    if (reader.IsDBNull(52) == false)
                    {
                        model.MMP_EnvelopeType = reader.GetString(52);
                        ViewBag.MMP_EnvelopeType = reader.GetString(52);


                    }
                    if (reader.IsDBNull(53) == false)
                    {
                        model.MMP_EnvelopePrice = reader.GetString(53);
                        ViewBag.MMP_EnvelopePrice = reader.GetString(53);


                    }
                    if (reader.IsDBNull(54) == false)
                    {
                        model.MMP_Paper = reader.GetString(54);
                        ViewBag.MMP_Paper = reader.GetString(54);


                    }
                    if (reader.IsDBNull(55) == false)
                    {
                        model.MMP_PaperPrice = reader.GetString(55);
                        ViewBag.MMP_PaperPrice = reader.GetString(55);


                    }





                    if (reader.IsDBNull(56) == false)
                    {
                        model.DCP_FoldingCharges = reader.GetString(56);
                        ViewBag.DCP_FoldingCharges = reader.GetString(56);


                    }
                    if (reader.IsDBNull(57) == false)
                    {
                        model.DCP_SupplyPrintLabel = reader.GetString(57);
                        ViewBag.DCP_SupplyPrintLabel = reader.GetString(57);


                    }
                    if (reader.IsDBNull(58) == false)
                    {
                        model.DCP_PrintingDuplex = reader.GetString(58);
                        ViewBag.DCP_PrintingDuplex = reader.GetString(58);


                    }
                    if (reader.IsDBNull(59) == false)
                    {
                        model.DCP_FirstInsert = reader.GetString(59);
                        ViewBag.DCP_FirstInsert = reader.GetString(59);


                    }

                    if (reader.IsDBNull(60) == false)
                    {
                        model.DCP_SecondInsert = reader.GetString(60);
                        ViewBag.DCP_SecondInsert = reader.GetString(60);


                    }
                    if (reader.IsDBNull(61) == false)
                    {
                        model.DCP_BrochureInsert = reader.GetString(61);
                        ViewBag.DCP_BrochureInsert = reader.GetString(61);


                    }
                    if (reader.IsDBNull(62) == false)
                    {
                        model.DCP_MailBelow_5K = reader.GetString(62);
                        ViewBag.DCP_MailBelow_5K = reader.GetString(62);


                    }
                    if (reader.IsDBNull(63) == false)
                    {
                        model.DCP_Handling = reader.GetString(63);
                        ViewBag.DCP_Handling = reader.GetString(63);


                    }


                    if (reader.IsDBNull(64) == false)
                    {
                        model.DCP_Sealing = reader.GetString(64);
                        ViewBag.DCP_Sealing = reader.GetString(64);


                    }
                    if (reader.IsDBNull(65) == false)
                    {
                        model.DCP_Tearing = reader.GetString(65);
                        ViewBag.DCP_Tearing = reader.GetString(65);


                    }
                    if (reader.IsDBNull(66) == false)
                    {
                        model.DCP_Folding = reader.GetString(66);
                        ViewBag.DCP_Folding = reader.GetString(66);


                    }
                    if (reader.IsDBNull(67) == false)
                    {
                        model.DCP_Sticking = reader.GetString(67);
                        ViewBag.DCP_Sticking = reader.GetString(67);


                    }

                    if (reader.IsDBNull(68) == false)
                    {
                        model.DCP_Labelling = reader.GetString(68);
                        ViewBag.DCP_Labelling = reader.GetString(68);


                    }
                    if (reader.IsDBNull(69) == false)
                    {
                        model.DCP_Matching = reader.GetString(69);
                        ViewBag.DCP_Matching = reader.GetString(69);


                    }
                    if (reader.IsDBNull(70) == false)
                    {
                        model.DCP_CDArchiving = reader.GetString(70);
                        ViewBag.DCP_CDArchiving = reader.GetString(70);


                    }
                    if (reader.IsDBNull(71) == false)
                    {
                        model.DCP_EnvelopeType = reader.GetString(71);
                        ViewBag.DCP_EnvelopeType = reader.GetString(71);


                    }
                    if (reader.IsDBNull(72) == false)
                    {
                        model.DCP_EnvelopePrice = reader.GetString(72);
                        ViewBag.DCP_EnvelopePrice = reader.GetString(72);


                    }
                    if (reader.IsDBNull(73) == false)
                    {
                        model.DCP_Paper = reader.GetString(73);
                        ViewBag.DCP_Paper = reader.GetString(73);


                    }
                    if (reader.IsDBNull(74) == false)
                    {
                        model.DCP_PaperPrice = reader.GetString(74);
                        ViewBag.DCP_PaperPrice = reader.GetString(74);


                    }



                    if (reader.IsDBNull(75) == false)
                    {
                        model.RM_Printing = reader.GetString(75);
                        ViewBag.RM_Printing = reader.GetString(75);


                    }
                    if (reader.IsDBNull(76) == false)
                    {
                        model.RM_Selfmailer = reader.GetString(76);
                        ViewBag.RM_Selfmailer = reader.GetString(76);


                    }
                    if (reader.IsDBNull(77) == false)
                    {
                        model.RM_MailBelow_5K = reader.GetString(77);
                        ViewBag.RM_MailBelow_5K = reader.GetString(77);


                    }
                    if (reader.IsDBNull(78) == false)
                    {
                        model.RM_Handling = reader.GetString(78);
                        ViewBag.RM_Handling = reader.GetString(78);


                    }
                    if (reader.IsDBNull(79) == false)
                    {
                        model.RM_LabellingRegsterMails = reader.GetString(79);
                        ViewBag.RM_LabellingRegsterMails = reader.GetString(79);


                    }
                    if (reader.IsDBNull(80) == false)
                    {
                        model.RM_Paper = reader.GetString(80);
                        ViewBag.RM_Paper = reader.GetString(80);


                    }
                    if (reader.IsDBNull(81) == false)
                    {
                        model.RM_PaperPrice = reader.GetString(81);
                        ViewBag.RM_PaperPrice = reader.GetString(81);


                    }

                    if (reader.IsDBNull(82) == false)
                    {
                        model.RM_PaperPrice = reader.GetString(82);
                        ViewBag.RM_PaperPrice = reader.GetString(82);


                    }





                    if (reader.IsDBNull(83) == false)
                    {
                        model.PrintingDuplex2 = reader.GetString(83);
                        ViewBag.PrintingDuplex2 = reader.GetString(83);

                    }

                    if (reader.IsDBNull(84) == false)
                    {
                        model.LBPrintingDuplex2 = reader.GetString(84);
                        ViewBag.LBPrintingDuplex2 = reader.GetString(84);
                    }

                    if (reader.IsDBNull(85) == false)
                    {
                        model.LBInserting1 = reader.GetString(85);
                        ViewBag.LBInserting1 = reader.GetString(85);
                    }

                    if (reader.IsDBNull(86) == false)
                    {
                        model.LBInserting2 = reader.GetString(86);
                        ViewBag.LBInserting2 = reader.GetString(86);
                    }

                    if (reader.IsDBNull(87) == false)
                    {
                        model.LBInserting3 = reader.GetString(87);
                        ViewBag.LBInserting3 = reader.GetString(87);
                    }

                    if (reader.IsDBNull(88) == false)
                    {
                        model.LBInserting4 = reader.GetString(88);
                        ViewBag.LBInserting4 = reader.GetString(88);
                    }

                    if (reader.IsDBNull(89) == false)
                    {
                        model.LBBrochureInsert = reader.GetString(89);
                        ViewBag.LBBrochureInsert = reader.GetString(89);
                    }

                    if (reader.IsDBNull(90) == false)
                    {
                        model.LBMailBelow_5K = reader.GetString(90);
                        ViewBag.LBMailBelow_5K = reader.GetString(90);
                    }

                    if (reader.IsDBNull(91) == false)
                    {
                        model.LBHandling = reader.GetString(91);
                        ViewBag.LBHandling = reader.GetString(91);
                    }

                    if (reader.IsDBNull(92) == false)
                    {
                        model.LBPI_Sealing = reader.GetString(92);
                        ViewBag.LBPI_Sealing = reader.GetString(92);
                    }

                    if (reader.IsDBNull(93) == false)
                    {
                        model.LBPI_Tearing = reader.GetString(93);
                        ViewBag.LBPI_Tearing = reader.GetString(93);
                    }

                    if (reader.IsDBNull(94) == false)
                    {
                        model.LBPI_Folding = reader.GetString(94);
                        ViewBag.LBPI_Folding = reader.GetString(94);
                    }

                    if (reader.IsDBNull(95) == false)
                    {
                        model.LBSticking = reader.GetString(95);
                        ViewBag.LBSticking = reader.GetString(95);
                    }

                    if (reader.IsDBNull(96) == false)
                    {
                        model.LBLabelling = reader.GetString(96);
                        ViewBag.LBLabelling = reader.GetString(96);
                    }
                    if (reader.IsDBNull(97) == false)
                    {
                        model.LBMatching = reader.GetString(97);
                        ViewBag.LBMatching = reader.GetString(97);
                    }
                    if (reader.IsDBNull(98) == false)
                    {
                        model.LBCDArchiving = reader.GetString(98);
                        ViewBag.LBCDArchiving = reader.GetString(98);
                    }
                    if (reader.IsDBNull(99) == false)
                    {
                        model.LBNpc = reader.GetString(99);
                        ViewBag.LBNpc = reader.GetString(99);
                    }
                    if (reader.IsDBNull(100) == false)
                    {
                        model.LBPI_EnvelopeType = reader.GetString(100);
                        ViewBag.LBPI_EnvelopeType = reader.GetString(100);
                    }
                    if (reader.IsDBNull(101) == false)
                    {
                        model.LBPI_EnvelopePrice = reader.GetString(101);
                        ViewBag.LBPI_EnvelopePrice = reader.GetString(101);
                    }
                    if (reader.IsDBNull(102) == false)
                    {
                        model.LBPI_Paper = reader.GetString(102);
                        ViewBag.LBPI_Paper = reader.GetString(102);
                    }
                    if (reader.IsDBNull(103) == false)
                    {
                        model.LBPI_PaperPrice = reader.GetString(103);
                        ViewBag.LBPI_PaperPrice = reader.GetString(103);
                    }
                    if (reader.IsDBNull(104) == false)
                    {
                        model.LBSM_PrintingSM = reader.GetString(104);
                        ViewBag.LBSM_PrintingSM = reader.GetString(104);
                    }
                    if (reader.IsDBNull(105) == false)
                    {
                        model.LBSM_SM_Material = reader.GetString(105);
                        ViewBag.LBSM_SM_Material = reader.GetString(105);
                    }
                    if (reader.IsDBNull(106) == false)
                    {
                        model.LBSM_MailBelow_5K = reader.GetString(106);
                        ViewBag.LBSM_MailBelow_5K = reader.GetString(106);
                    }
                    if (reader.IsDBNull(107) == false)
                    {
                        model.LBSM_Paper = reader.GetString(107);
                        ViewBag.LBSM_Paper = reader.GetString(107);
                    }
                    if (reader.IsDBNull(108) == false)
                    {
                        model.LBSM_PaperPrice = reader.GetString(108);
                        ViewBag.LBSM_PaperPrice = reader.GetString(108);
                    }
                    if (reader.IsDBNull(109) == false)
                    {
                        model.LBSM_Paper2 = reader.GetString(109);
                        ViewBag.LBSM_Paper2 = reader.GetString(109);
                    }
                    if (reader.IsDBNull(110) == false)
                    {
                        model.LBSM_PaperPrice2 = reader.GetString(110);
                        ViewBag.LBSM_PaperPrice2 = reader.GetString(110);
                    }
                    if (reader.IsDBNull(111) == false)
                    {
                        model.LBMMP_PrintingDuplex = reader.GetString(111);
                        ViewBag.LBMMP_PrintingDuplex = reader.GetString(111);
                    }
                    if (reader.IsDBNull(112) == false)
                    {
                        model.LBMMP_FirstInsert = reader.GetString(112);
                        ViewBag.LBMMP_FirstInsert = reader.GetString(112);
                    }
                    if (reader.IsDBNull(113) == false)
                    {
                        model.LBMMP_SecondInsert = reader.GetString(113);
                        ViewBag.LBMMP_SecondInsert = reader.GetString(113);
                    }
                    if (reader.IsDBNull(114) == false)
                    {
                        model.LBMMP_InsertingMMP = reader.GetString(114);
                        ViewBag.LBMMP_InsertingMMP = reader.GetString(114);
                    }
                    if (reader.IsDBNull(115) == false)
                    {
                        model.LBMMP_BrochureInsert = reader.GetString(115);
                        ViewBag.LBMMP_BrochureInsert = reader.GetString(115);
                    }
                    if (reader.IsDBNull(116) == false)
                    {
                        model.LBMMP_MailBelow_5K = reader.GetString(116);
                        ViewBag.LBMMP_MailBelow_5K = reader.GetString(116);
                    }
                    if (reader.IsDBNull(117) == false)
                    {
                        model.LBMMP_Handling = reader.GetString(117);
                        ViewBag.LBMMP_Handling = reader.GetString(117);
                    }
                    if (reader.IsDBNull(118) == false)
                    {
                        model.LBMMP_Sealing = reader.GetString(118);
                        ViewBag.LBMMP_Sealing = reader.GetString(118);
                    }
                    if (reader.IsDBNull(119) == false)
                    {
                        model.LBMMP_Tearing = reader.GetString(119);
                        ViewBag.LBMMP_Tearing = reader.GetString(119);
                    }
                    if (reader.IsDBNull(120) == false)
                    {
                        model.LBMMP_Folding = reader.GetString(120);
                        ViewBag.LBMMP_Folding = reader.GetString(120);
                    }
                    if (reader.IsDBNull(121) == false)
                    {
                        model.LBMMP_Sticking = reader.GetString(121);
                        ViewBag.LBMMP_Sticking = reader.GetString(121);
                    }
                    if (reader.IsDBNull(122) == false)
                    {
                        model.LBMMP_Matching = reader.GetString(122);
                        ViewBag.LBMMP_Matching = reader.GetString(122);
                    }
                    if (reader.IsDBNull(123) == false)
                    {
                        model.LBMMP_CDArchiving = reader.GetString(123);
                        ViewBag.LBMMP_CDArchiving = reader.GetString(123);
                    }
                    if (reader.IsDBNull(124) == false)
                    {
                        model.LBMMP_EnvelopeType = reader.GetString(124);
                        ViewBag.LBMMP_EnvelopeType = reader.GetString(124);
                    }
                    if (reader.IsDBNull(125) == false)
                    {
                        model.LBMMP_EnvelopePrice = reader.GetString(125);
                        ViewBag.LBMMP_EnvelopePrice = reader.GetString(125);
                    }
                    if (reader.IsDBNull(126) == false)
                    {
                        model.LBMMP_Paper = reader.GetString(126);
                        ViewBag.LBMMP_Paper = reader.GetString(126);
                    }
                    if (reader.IsDBNull(127) == false)
                    {
                        model.LBMMP_PaperPrice = reader.GetString(127);
                        ViewBag.LBMMP_PaperPrice = reader.GetString(127);
                    }
                    if (reader.IsDBNull(128) == false)
                    {
                        model.LBDCP_FoldingCharges = reader.GetString(128);
                        ViewBag.LBDCP_FoldingCharges = reader.GetString(128);
                    }
                    if (reader.IsDBNull(129) == false)
                    {
                        model.LBDCP_SupplyPrintLabel = reader.GetString(129);
                        ViewBag.LBDCP_SupplyPrintLabel = reader.GetString(129);
                    }
                    if (reader.IsDBNull(130) == false)
                    {
                        model.LBDCP_PrintingDuplex = reader.GetString(130);
                        ViewBag.LBDCP_PrintingDuplex = reader.GetString(130);
                    }
                    if (reader.IsDBNull(131) == false)
                    {
                        model.LBDCP_FirstInsert = reader.GetString(131);
                        ViewBag.LBDCP_FirstInsert = reader.GetString(131);
                    }
                    if (reader.IsDBNull(132) == false)
                    {
                        model.LBDCP_SecondInsert = reader.GetString(132);
                        ViewBag.LBDCP_SecondInsert = reader.GetString(132);
                    }
                    if (reader.IsDBNull(132) == false)
                    {
                        model.LBDCP_BrochureInsert = reader.GetString(132);
                        ViewBag.LBDCP_BrochureInsert = reader.GetString(132);
                    }
                    if (reader.IsDBNull(134) == false)
                    {
                        model.LBDCP_MailBelow_5K = reader.GetString(134);
                        ViewBag.LBDCP_MailBelow_5K = reader.GetString(134);
                    }
                    if (reader.IsDBNull(135) == false)
                    {
                        model.LBDCP_Handling = reader.GetString(135);
                        ViewBag.LBDCP_Handling = reader.GetString(135);
                    }
                    if (reader.IsDBNull(136) == false)
                    {
                        model.LBDCP_Sealing = reader.GetString(136);
                        ViewBag.LBDCP_Sealing = reader.GetString(136);
                    }
                    if (reader.IsDBNull(137) == false)
                    {
                        model.LBDCP_Tearing = reader.GetString(137);
                        ViewBag.LBDCP_Tearing = reader.GetString(137);
                    }
                    if (reader.IsDBNull(138) == false)
                    {
                        model.LBDCP_Folding = reader.GetString(138);
                        ViewBag.LBDCP_Folding = reader.GetString(138);
                    }
                    if (reader.IsDBNull(139) == false)
                    {
                        model.LBDCP_Sticking = reader.GetString(139);
                        ViewBag.LBDCP_Sticking = reader.GetString(139);
                    }
                    if (reader.IsDBNull(140) == false)
                    {
                        model.LBDCP_Labelling = reader.GetString(140);
                        ViewBag.LBDCP_Labelling = reader.GetString(140);
                    }
                    if (reader.IsDBNull(141) == false)
                    {
                        model.LBMMP_CDArchiving = reader.GetString(141);
                        ViewBag.LBMMP_CDArchiving = reader.GetString(141);
                    }
                    if (reader.IsDBNull(142) == false)
                    {
                        model.LBDCP_Matching = reader.GetString(142);
                        ViewBag.LBDCP_Matching = reader.GetString(142);
                    }
                    if (reader.IsDBNull(143) == false)
                    {
                        model.LBDCP_CDArchiving = reader.GetString(143);
                        ViewBag.LBDCP_CDArchiving = reader.GetString(143);
                    }
                    if (reader.IsDBNull(144) == false)
                    {
                        model.LBDCP_EnvelopeType = reader.GetString(144);
                        ViewBag.LBDCP_EnvelopeType = reader.GetString(144);
                    }
                    if (reader.IsDBNull(145) == false)
                    {
                        model.LBDCP_EnvelopePrice = reader.GetString(145);
                        ViewBag.LBDCP_EnvelopePrice = reader.GetString(145);
                    }
                    if (reader.IsDBNull(146) == false)
                    {
                        model.LBDCP_Paper = reader.GetString(146);
                        ViewBag.LBDCP_Paper = reader.GetString(146);
                    }
                    if (reader.IsDBNull(147) == false)
                    {
                        model.LBDCP_PaperPrice = reader.GetString(147);
                        ViewBag.LBDCP_PaperPrice = reader.GetString(147);
                    }
                    if (reader.IsDBNull(148) == false)
                    {
                        model.LBRM_Printing = reader.GetString(148);
                        ViewBag.LBRM_Printing = reader.GetString(148);
                    }
                    if (reader.IsDBNull(149) == false)
                    {
                        model.LBRM_Selfmailer = reader.GetString(149);
                        ViewBag.LBRM_Selfmailer = reader.GetString(149);
                    }
                    if (reader.IsDBNull(150) == false)
                    {
                        model.LBRM_MailBelow_5K = reader.GetString(150);
                        ViewBag.LBRM_MailBelow_5K = reader.GetString(150);
                    }
                    if (reader.IsDBNull(151) == false)
                    {
                        model.LBRM_Handling = reader.GetString(151);
                        ViewBag.LBRM_Handling = reader.GetString(151);
                    }
                    if (reader.IsDBNull(152) == false)
                    {
                        model.LBRM_LabellingRegsterMails = reader.GetString(152);
                        ViewBag.LBRM_LabellingRegsterMails = reader.GetString(152);
                    }
                    if (reader.IsDBNull(153) == false)
                    {
                        model.LBRM_Paper = reader.GetString(153);
                        ViewBag.LBRM_Paper = reader.GetString(153);
                    }
                    if (reader.IsDBNull(154) == false)
                    {
                        model.LBRM_PaperPrice = reader.GetString(154);
                        ViewBag.LBRM_PaperPrice = reader.GetString(154);
                    }









                }
                viewPosting2.Add(model);
            }
            cn.Close();
        }

        int _bil20 = 1;
        List<SelectListItem> li7 = new List<SelectListItem>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT DISTINCT Description FROM [IflowSeed].[dbo].[MaterialCharges]          
                                    WHERE MaterialType='Envelope' ";
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                JobInstruction model = new JobInstruction();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        model.EnvelopeType = reader.GetString(0);
                    }
                }
                int i = _bil20++;
                if (i == 1)
                {
                    li7.Add(new SelectListItem { Text = "Please Select" });
                    li7.Add(new SelectListItem { Text = model.EnvelopeType });

                }
                else
                {
                    li7.Add(new SelectListItem { Text = model.EnvelopeType });
                }
            }
            cn.Close();
        }
        ViewData["EnvelopeType_"] = li7;

        int _bil21 = 1;
        List<SelectListItem> li2 = new List<SelectListItem>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT DISTINCT Paper FROM [IflowSeed].[dbo].[PaperInfo]                          
                                     ORDER BY Paper";
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                JobInstruction model = new JobInstruction();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Paper = reader.GetString(0);
                    }
                }
                int i = _bil21++;
                if (i == 1)
                {
                    li2.Add(new SelectListItem { Text = "Please Select" });
                    li2.Add(new SelectListItem { Text = model.Paper });

                }
                else
                {
                    li2.Add(new SelectListItem { Text = model.Paper });
                }
            }
            cn.Close();
        }
        ViewData["Paper_"] = li2;

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(GrandTotal)=1
                                            THEN CONVERT(MONEY,GrandTotal) ELSE 0 END)
                                            )
                                            AS [GrandTotalAll]
                                         FROM [IflowSeed].[dbo].[TblGrandTotal]
                                         WHERE JobInstructionId=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    //ViewBag.GrandTotal = reader.GetDecimal(0);
                    //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                    ViewBag.GrandTotalAll = string.Format("{0:n}", reader.GetDecimal(0));


                }


            }
            cn.Close();

        }


        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(TotalAmountService)=1
                                            THEN CONVERT(MONEY,TotalAmountService) ELSE 0 END)
                                            )
                                            AS [GrandTotal]
                                         FROM [IflowSeed].[dbo].[TblBilling]
                                         WHERE JobInstructionId=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    //ViewBag.GrandTotal = reader.GetDecimal(0);
                    //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                    ViewBag.GrandTotalService = string.Format("{0:n}", reader.GetDecimal(0));


                }


            }
            cn.Close();

        }

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(TotalAmountPostage)=1
                                            THEN CONVERT(MONEY,TotalAmountPostage) ELSE 0 END)
                                            )
                                            AS [GrandTotal]
                                         FROM [IflowSeed].[dbo].[TblBilling]
                                         WHERE JobInstructionId=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    //ViewBag.GrandTotal = reader.GetDecimal(0);
                    //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                    ViewBag.GrandTotalPostage = string.Format("{0:n}", reader.GetDecimal(0));


                }


            }
            cn.Close();

        }


        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(PD_Total)=1
                                            THEN CONVERT(MONEY,PD_Total) ELSE 0 END)
                                            )
                                            AS [GrandTotal]
                                         FROM [IflowSeed].[dbo].[TblBilling]
                                         WHERE JobInstructionId=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    //ViewBag.GrandTotal = reader.GetDecimal(0);
                    //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                    ViewBag.GrandTotalPostage = string.Format("{0:n}", reader.GetDecimal(0));


                }


            }
            cn.Close();

        }

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(Volume)=1
                                            THEN CONVERT(MONEY,Volume) ELSE 0 END)
                                            )
                                            AS [TotalV]
                                         FROM [IflowSeed].[dbo].[TblBilling]
                                         WHERE Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    ViewBag.TotalV = reader.GetDecimal(0);
                    Console.WriteLine();
                    Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
                    Console.WriteLine(value.ToString("N"));


                }


            }
            cn.Close();
        }


        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(ValuePostage)=1
                                            THEN CONVERT(MONEY,ValuePostage) ELSE 0 END)
                                            )
                                            AS [TotalV]
                                         FROM [IflowSeed].[dbo].[TblBilling]
                                         WHERE Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    ViewBag.TotalV = reader.GetDecimal(0);
                    Console.WriteLine();
                    Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
                    Console.WriteLine(value.ToString("N"));


                }


            }
            cn.Close();
        }
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(VolumeService)=1
                                            THEN CONVERT(MONEY,VolumeService) ELSE 0 END)
                                            )
                                            AS [TotalV]
                                         FROM [IflowSeed].[dbo].[TblBilling]
                                         WHERE Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    ViewBag.TotalV = reader.GetDecimal(0);
                    Console.WriteLine();
                    Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
                    Console.WriteLine(value.ToString("N"));


                }


            }
            cn.Close();
        }

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(PD_Volume)=1
                                            THEN CONVERT(MONEY,PD_Volume) ELSE 0 END)
                                            )
                                            AS [TotalV]
                                         FROM [IflowSeed].[dbo].[TblBilling]
                                         WHERE Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    ViewBag.TotalV = reader.GetDecimal(0);
                    Console.WriteLine();
                    Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
                    Console.WriteLine(value.ToString("N"));


                }


            }
            cn.Close();
        }
        ///rate


        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(Rate)=1
                                            THEN CONVERT(MONEY,Rate) ELSE 0 END)
                                            )
                                            AS [TotalR]
                                         FROM [IflowSeed].[dbo].[TblBilling]
                                         WHERE Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    ViewBag.TotalR = reader.GetDecimal(0);
                    Console.WriteLine();
                    Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
                    Console.WriteLine(value.ToString("N"));
                }


            }
            cn.Close();
        }


        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(RateServie)=1
                                            THEN CONVERT(MONEY,RateServie) ELSE 0 END)
                                            )
                                            AS [TotalR]
                                         FROM [IflowSeed].[dbo].[TblBilling]
                                         WHERE Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    ViewBag.TotalR = reader.GetDecimal(0);
                    Console.WriteLine();
                    Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
                    Console.WriteLine(value.ToString("N"));
                }


            }
            cn.Close();
        }



        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(RatePostage)=1
                                            THEN CONVERT(MONEY,RatePostage) ELSE 0 END)
                                            )
                                            AS [TotalR]
                                         FROM [IflowSeed].[dbo].[TblBilling]
                                         WHERE Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    ViewBag.TotalR = reader.GetDecimal(0);
                    Console.WriteLine();
                    Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
                    Console.WriteLine(value.ToString("N"));
                }


            }
            cn.Close();
        }

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(PD_Rate)=1
                                            THEN CONVERT(MONEY,PD_Rate) ELSE 0 END)
                                            )
                                            AS [TotalR]
                                         FROM [IflowSeed].[dbo].[TblBilling]
                                         WHERE Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    ViewBag.TotalR = reader.GetDecimal(0);
                    Console.WriteLine();
                    Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
                    Console.WriteLine(value.ToString("N"));
                }


            }
            cn.Close();
        }


        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(GrandTotal)=1
                                            THEN CONVERT(MONEY,GrandTotal) ELSE 0 END)
                                            )
                                            AS [GrandTotalAll]
                                         FROM [IflowSeed].[dbo].[TblGrandTotal]
                                         WHERE JobInstructionId=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    //ViewBag.GrandTotal = reader.GetDecimal(0);
                    //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                    ViewBag.GrandTotalAll = string.Format("{0:n}", reader.GetDecimal(0));


                }


            }
            cn.Close();

        }


        //kiraan



        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(ValuePostage) && !string.IsNullOrEmpty(RatePostage))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(ValuePostage);
            if (!string.IsNullOrEmpty(RatePostage))
            {
                double y = Convert.ToDouble(RatePostage);
                totalValuePostage = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(Rate);
                totalValuePostage = z + y;
                double grandtotal = z + y;
            }
        }


        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(VolumeService) && !string.IsNullOrEmpty(RateServie))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(VolumeService);
            if (!string.IsNullOrEmpty(RateServie))
            {
                double y = Convert.ToDouble(RateServie);
                totalValueSevice = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(RateServie);
                totalValueSevice = z + y;
                double grandtotal = z + y;
            }
        }


        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(VolumeMix) && !string.IsNullOrEmpty(RateMix))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(VolumeMix);
            if (!string.IsNullOrEmpty(RateMix))
            {
                double y = Convert.ToDouble(RateMix);
                totalValue_Mix = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(RateMix);
                totalValue_Mix = z + y;
                double grandtotal = z + y;
            }
        }




        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(VolumeCC) && !string.IsNullOrEmpty(RateCC))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(VolumeCC);
            if (!string.IsNullOrEmpty(RateCC))
            {
                double y = Convert.ToDouble(RateCC);
                totalValueCC = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(RateCC);
                totalValueCC = z + y;
                double grandtotal = z + y;
            }
        }





        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(VolumeF) && !string.IsNullOrEmpty(RateF))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(VolumeF);
            if (!string.IsNullOrEmpty(RateF))
            {
                double y = Convert.ToDouble(RateF);
                totalValueF = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(RateF);
                totalValueF = z + y;
                double grandtotal = z + y;
            }
        }
        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(VolumeS) && !string.IsNullOrEmpty(RateS))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(VolumeS);
            if (!string.IsNullOrEmpty(RateF))
            {
                double y = Convert.ToDouble(RateS);
                totalValueS = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(RateS);
                totalValueS = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(VolumeO) && !string.IsNullOrEmpty(RateO))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(VolumeO);
            if (!string.IsNullOrEmpty(RateO))
            {
                double y = Convert.ToDouble(RateO);
                totalValueO = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(RateO);
                totalValueO = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(ValueImprest) && !string.IsNullOrEmpty(RateImprest))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(ValueImprest);
            if (!string.IsNullOrEmpty(RateImprest))
            {
                double y = Convert.ToDouble(RateImprest);
                totalValueI = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(RateImprest);
                totalValueI = z + y;
                double grandtotal = z + y;
            }
        }



        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(VolumeO) && !string.IsNullOrEmpty(RateO))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(VolumeO);
            if (!string.IsNullOrEmpty(RateO))
            {
                double y = Convert.ToDouble(RateO);
                totalValueO2 = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(RateO);
                totalValueO2 = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(VolumeO2) && !string.IsNullOrEmpty(RateO2))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(VolumeO2);
            if (!string.IsNullOrEmpty(RateO2))
            {
                double y = Convert.ToDouble(RateO2);
                totalValueO2 = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(RateO2);
                totalValueO2 = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(VolumeO3) && !string.IsNullOrEmpty(RateO3))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(VolumeO3);
            if (!string.IsNullOrEmpty(RateO3))
            {
                double y = Convert.ToDouble(RateO3);
                totalValueO3 = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(RateO3);
                totalValueO3 = z + y;
                double grandtotal = z + y;
            }
        }


        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(VolumeO4) && !string.IsNullOrEmpty(RateO4))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(VolumeO4);
            if (!string.IsNullOrEmpty(RateO4))
            {
                double y = Convert.ToDouble(RateO4);
                totalValueO4 = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(RateO4);
                totalValueO4 = z + y;
                double grandtotal = z + y;
            }
        }



        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(VolumeO5) && !string.IsNullOrEmpty(RateO5))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(VolumeO5);
            if (!string.IsNullOrEmpty(RateO5))
            {
                double y = Convert.ToDouble(RateO5);
                totalValueO5 = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(RateO5);
                totalValueO5 = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(VolumeDC) && !string.IsNullOrEmpty(RateDC))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(VolumeDC);
            if (!string.IsNullOrEmpty(RateDC))
            {
                double y = Convert.ToDouble(RateDC);
                totalValueDC = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(RateDC);
                totalValueDC = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(PrintingDuplex) && !string.IsNullOrEmpty(PD_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(PrintingDuplex);
            if (!string.IsNullOrEmpty(PD_Rate))
            {
                double y = Convert.ToDouble(PD_Rate);
                totalValuePD = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(PD_Rate);
                totalValuePD = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(Inserting1) && !string.IsNullOrEmpty(IS1_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(Inserting1);
            if (!string.IsNullOrEmpty(IS1_Rate))
            {
                double y = Convert.ToDouble(IS1_Rate);
                totalValueIS1 = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(IS1_Rate);
                totalValueIS1 = z + y;
                double grandtotal = z + y;
            }
        }
        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(Inserting2) && !string.IsNullOrEmpty(IS2_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(Inserting2);
            if (!string.IsNullOrEmpty(IS2_Rate))
            {
                double y = Convert.ToDouble(IS2_Rate);
                totalValueIS2 = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(IS2_Rate);
                totalValueIS2 = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(Inserting3) && !string.IsNullOrEmpty(IS3_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(Inserting3);
            if (!string.IsNullOrEmpty(IS3_Rate))
            {
                double y = Convert.ToDouble(IS3_Rate);
                totalValueIS3 = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(IS3_Rate);
                totalValueIS3 = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(Inserting4) && !string.IsNullOrEmpty(IS4_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(Inserting4);
            if (!string.IsNullOrEmpty(IS4_Rate))
            {
                double y = Convert.ToDouble(IS4_Rate);
                totalValueIS4 = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(IS4_Rate);
                totalValueIS4 = z + y;
                double grandtotal = z + y;
            }
        }


        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(BrochureInsert) && !string.IsNullOrEmpty(BI_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(BrochureInsert);
            if (!string.IsNullOrEmpty(BI_Rate))
            {
                double y = Convert.ToDouble(BI_Rate);
                totalValueBI = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(BI_Rate);
                totalValueBI = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(MailBelow_5K) && !string.IsNullOrEmpty(M5_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(MailBelow_5K);
            if (!string.IsNullOrEmpty(M5_Rate))
            {
                double y = Convert.ToDouble(M5_Rate);
                totalValueM5 = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(M5_Rate);
                totalValueM5 = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(Handling) && !string.IsNullOrEmpty(HL_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(Handling);
            if (!string.IsNullOrEmpty(HL_Rate))
            {
                double y = Convert.ToDouble(HL_Rate);
                totalValueHL = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(HL_Rate);
                totalValueHL = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(PI_Sealing) && !string.IsNullOrEmpty(PIS_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(PI_Sealing);
            if (!string.IsNullOrEmpty(PIS_Rate))
            {
                double y = Convert.ToDouble(PIS_Rate);
                totalValuePIS = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(PIS_Rate);
                totalValuePIS = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(PI_Tearing) && !string.IsNullOrEmpty(PIT_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(PI_Tearing);
            if (!string.IsNullOrEmpty(PIT_Rate))
            {
                double y = Convert.ToDouble(PIT_Rate);
                totalValuePIT = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(PIT_Rate);
                totalValuePIT = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(PI_Folding) && !string.IsNullOrEmpty(PIF_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(PI_Folding);
            if (!string.IsNullOrEmpty(PIF_Rate))
            {
                double y = Convert.ToDouble(PIF_Rate);
                totalValuePIF = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(PIF_Rate);
                totalValuePIF = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(Sticking) && !string.IsNullOrEmpty(SK_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(Sticking);
            if (!string.IsNullOrEmpty(SK_Rate))
            {
                double y = Convert.ToDouble(SK_Rate);
                totalValueSK = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(SK_Rate);
                totalValueSK = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(Labelling) && !string.IsNullOrEmpty(LG_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(Labelling);
            if (!string.IsNullOrEmpty(LG_Rate))
            {
                double y = Convert.ToDouble(LG_Rate);
                totalValueLG = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(LG_Rate);
                totalValueLG = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(Matching) && !string.IsNullOrEmpty(MG_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(Matching);
            if (!string.IsNullOrEmpty(MG_Rate))
            {
                double y = Convert.ToDouble(MG_Rate);
                totalValueMG = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(MG_Rate);
                totalValueMG = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(CDArchiving) && !string.IsNullOrEmpty(CDA_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(CDArchiving);
            if (!string.IsNullOrEmpty(CDA_Rate))
            {
                double y = Convert.ToDouble(CDA_Rate);
                totalValueCDA = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(CDA_Rate);
                totalValueCDA = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(Npc) && !string.IsNullOrEmpty(NPC_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(Npc);
            if (!string.IsNullOrEmpty(NPC_Rate))
            {
                double y = Convert.ToDouble(NPC_Rate);
                totalValueNPC = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(NPC_Rate);
                totalValueNPC = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(PI_EnvelopeType) && !string.IsNullOrEmpty(ET_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(PI_EnvelopeType);
            if (!string.IsNullOrEmpty(ET_Rate))
            {
                double y = Convert.ToDouble(ET_Rate);
                totalValueET = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(ET_Rate);
                totalValueET = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(PI_EnvelopePrice) && !string.IsNullOrEmpty(EP_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(PI_EnvelopePrice);
            if (!string.IsNullOrEmpty(EP_Rate))
            {
                double y = Convert.ToDouble(EP_Rate);
                totalValueEP = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(EP_Rate);
                totalValueEP = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(PI_Paper) && !string.IsNullOrEmpty(P_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(PI_Paper);
            if (!string.IsNullOrEmpty(P_Rate))
            {
                double y = Convert.ToDouble(P_Rate);
                totalValueP = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(P_Rate);
                totalValueP = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(PI_PaperPrice) && !string.IsNullOrEmpty(PP_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(PI_PaperPrice);
            if (!string.IsNullOrEmpty(PP_Rate))
            {
                double y = Convert.ToDouble(PP_Rate);
                totalValuePP = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(PP_Rate);
                totalValuePP = z + y;
                double grandtotal = z + y;
            }
        }



        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(SM_PrintingSM) && !string.IsNullOrEmpty(SMPG_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(SM_PrintingSM);
            if (!string.IsNullOrEmpty(SMPG_Rate))
            {
                double y = Convert.ToDouble(SMPG_Rate);
                totalValueSMPG = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(SMPG_Rate);
                totalValueSMPG = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(SM_SM_Material) && !string.IsNullOrEmpty(SMM_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(SM_SM_Material);
            if (!string.IsNullOrEmpty(SMM_Rate))
            {
                double y = Convert.ToDouble(SMM_Rate);
                totalValueSMM = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(SMM_Rate);
                totalValueSMM = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(SM_MailBelow_5K) && !string.IsNullOrEmpty(SM5_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(SM_MailBelow_5K);
            if (!string.IsNullOrEmpty(SM5_Rate))
            {
                double y = Convert.ToDouble(SM5_Rate);
                totalValueSM5 = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(SM5_Rate);
                totalValueSM5 = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(SM_Handling) && !string.IsNullOrEmpty(SMH_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(SM_Handling);
            if (!string.IsNullOrEmpty(SMH_Rate))
            {
                double y = Convert.ToDouble(SMH_Rate);
                totalValueSMH = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(SMH_Rate);
                totalValueSMH = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(SM_Paper) && !string.IsNullOrEmpty(SMP_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(SM_Paper);
            if (!string.IsNullOrEmpty(SMP_Rate))
            {
                double y = Convert.ToDouble(SMP_Rate);
                totalValueSMP = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(SMP_Rate);
                totalValueSMP = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(SM_PaperPrice) && !string.IsNullOrEmpty(SMPP_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(SM_PaperPrice);
            if (!string.IsNullOrEmpty(SMPP_Rate))
            {
                double y = Convert.ToDouble(SMP_Rate);
                totalValueSMPP = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(SMPP_Rate);
                totalValueSMPP = z + y;
                double grandtotal = z + y;
            }
        }


        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(SM_Paper2) && !string.IsNullOrEmpty(SMP2_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(SM_Paper2);
            if (!string.IsNullOrEmpty(SMP2_Rate))
            {
                double y = Convert.ToDouble(SMP2_Rate);
                totalValueSMP2 = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(SMP2_Rate);
                totalValueSMP2 = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(SM_PaperPrice2) && !string.IsNullOrEmpty(SMPP2_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(SM_PaperPrice2);
            if (!string.IsNullOrEmpty(SMPP2_Rate))
            {
                double y = Convert.ToDouble(SMP2_Rate);
                totalValueSMPP2 = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(SMPP2_Rate);
                totalValueSMPP2 = z + y;
                double grandtotal = z + y;
            }
        }



        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(MMP_PrintingDuplex) && !string.IsNullOrEmpty(MMPPD_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(MMP_PrintingDuplex);
            if (!string.IsNullOrEmpty(MMPPD_Rate))
            {
                double y = Convert.ToDouble(MMPPD_Rate);
                totalValueMMPPD = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(MMPPD_Rate);
                totalValueMMPPD = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(MMP_FirstInsert) && !string.IsNullOrEmpty(MMPFI_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(MMP_FirstInsert);
            if (!string.IsNullOrEmpty(MMPFI_Rate))
            {
                double y = Convert.ToDouble(MMPFI_Rate);
                totalValueMMPFI = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(MMPFI_Rate);
                totalValueMMPFI = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(MMP_SecondInsert) && !string.IsNullOrEmpty(MMPSI_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(MMP_SecondInsert);
            if (!string.IsNullOrEmpty(MMPSI_Rate))
            {
                double y = Convert.ToDouble(MMPSI_Rate);
                totalValueMMPSI = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(MMPSI_Rate);
                totalValueMMPSI = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(MMP_InsertingMMP) && !string.IsNullOrEmpty(MMPI_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(MMP_InsertingMMP);
            if (!string.IsNullOrEmpty(MMPI_Rate))
            {
                double y = Convert.ToDouble(MMPI_Rate);
                totalValueMMPI = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(MMPI_Rate);
                totalValueMMPI = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(MMP_BrochureInsert) && !string.IsNullOrEmpty(MMPBI_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(MMP_BrochureInsert);
            if (!string.IsNullOrEmpty(MMPBI_Rate))
            {
                double y = Convert.ToDouble(MMPBI_Rate);
                totalValueMMPBI = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(MMPBI_Rate);
                totalValueMMPBI = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(MMP_MailBelow_5K) && !string.IsNullOrEmpty(MMP5_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(MMP_MailBelow_5K);
            if (!string.IsNullOrEmpty(MMP5_Rate))
            {
                double y = Convert.ToDouble(MMP5_Rate);
                totalValueMMP5 = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(MMP5_Rate);
                totalValueMMP5 = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(MMP_Handling) && !string.IsNullOrEmpty(MMPH_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(MMP_Handling);
            if (!string.IsNullOrEmpty(MMPH_Rate))
            {
                double y = Convert.ToDouble(MMPH_Rate);
                totalValueMMPH = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(MMPH_Rate);
                totalValueMMPH = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(MMP_Sealing) && !string.IsNullOrEmpty(MMPS_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(MMP_Sealing);
            if (!string.IsNullOrEmpty(MMPS_Rate))
            {
                double y = Convert.ToDouble(MMPS_Rate);
                totalValueMMPS = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(MMPS_Rate);
                totalValueMMPS = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(MMP_Tearing) && !string.IsNullOrEmpty(MMPT_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(MMP_Tearing);
            if (!string.IsNullOrEmpty(MMPT_Rate))
            {
                double y = Convert.ToDouble(MMPT_Rate);
                totalValueMMPT = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(MMPT_Rate);
                totalValueMMPT = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(MMP_Folding) && !string.IsNullOrEmpty(MMPF_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(MMP_Folding);
            if (!string.IsNullOrEmpty(MMPF_Rate))
            {
                double y = Convert.ToDouble(MMPF_Rate);
                totalValueMMPF = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(MMPF_Rate);
                totalValueMMPF = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(MMP_Sticking) && !string.IsNullOrEmpty(MMPST_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(MMP_Sticking);
            if (!string.IsNullOrEmpty(MMPST_Rate))
            {
                double y = Convert.ToDouble(MMPST_Rate);
                totalValueMMPST = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(MMPST_Rate);
                totalValueMMPST = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(MMP_Labelling) && !string.IsNullOrEmpty(MMPL_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(MMP_Labelling);
            if (!string.IsNullOrEmpty(MMPL_Rate))
            {
                double y = Convert.ToDouble(MMPL_Rate);
                totalValueMMPL = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(MMPL_Rate);
                totalValueMMPL = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(MMP_Matching) && !string.IsNullOrEmpty(MMPM_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(MMP_Matching);
            if (!string.IsNullOrEmpty(MMPM_Rate))
            {
                double y = Convert.ToDouble(MMPM_Rate);
                totalValueMMPM = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(MMPM_Rate);
                totalValueMMPM = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(MMP_CDArchiving) && !string.IsNullOrEmpty(MMPCD_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(MMP_CDArchiving);
            if (!string.IsNullOrEmpty(MMPCD_Rate))
            {
                double y = Convert.ToDouble(MMPCD_Rate);
                totalValueMMPCD = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(MMPCD_Rate);
                totalValueMMPCD = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(MMP_EnvelopeType) && !string.IsNullOrEmpty(MMPET_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(MMP_EnvelopeType);
            if (!string.IsNullOrEmpty(MMPET_Rate))
            {
                double y = Convert.ToDouble(MMPET_Rate);
                totalValueMMPET = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(MMPET_Rate);
                totalValueMMPET = z + y;
                double grandtotal = z + y;
            }
        }


        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(MMP_EnvelopePrice) && !string.IsNullOrEmpty(MMPEP_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(MMP_EnvelopePrice);
            if (!string.IsNullOrEmpty(MMPEP_Rate))
            {
                double y = Convert.ToDouble(MMPEP_Rate);
                totalValueMMPEP = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(MMPEP_Rate);
                totalValueMMPEP = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(MMP_Paper) && !string.IsNullOrEmpty(MMPPR_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(MMP_Paper);
            if (!string.IsNullOrEmpty(MMPPR_Rate))
            {
                double y = Convert.ToDouble(MMPPR_Rate);
                totalValueMMPPR = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(MMPPR_Rate);
                totalValueMMPPR = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(MMP_PaperPrice) && !string.IsNullOrEmpty(MMPPP_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(MMP_PaperPrice);
            if (!string.IsNullOrEmpty(MMPPP_Rate))
            {
                double y = Convert.ToDouble(MMPPP_Rate);
                totalValueMMPPP = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(MMPPP_Rate);
                totalValueMMPPP = z + y;
                double grandtotal = z + y;
            }
        }



        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(DCP_FoldingCharges) && !string.IsNullOrEmpty(DCPFC_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(DCP_FoldingCharges);
            if (!string.IsNullOrEmpty(DCPFC_Rate))
            {
                double y = Convert.ToDouble(DCPFC_Rate);
                totalValueDCPFC = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(DCPFC_Rate);
                totalValueDCPFC = z + y;
                double grandtotal = z + y;
            }
        }


        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(DCP_SupplyPrintLabel) && !string.IsNullOrEmpty(DCPSP_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(DCP_SupplyPrintLabel);
            if (!string.IsNullOrEmpty(DCPSP_Rate))
            {
                double y = Convert.ToDouble(DCPSP_Rate);
                totalValueDCPSP = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(DCPSP_Rate);
                totalValueDCPSP = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(DCP_PrintingDuplex) && !string.IsNullOrEmpty(DCPPD_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(DCP_PrintingDuplex);
            if (!string.IsNullOrEmpty(DCPPD_Rate))
            {
                double y = Convert.ToDouble(DCPPD_Rate);
                totalValueDCPPD = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(DCPPD_Rate);
                totalValueDCPPD = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(DCP_FirstInsert) && !string.IsNullOrEmpty(DCPFI_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(DCP_FirstInsert);
            if (!string.IsNullOrEmpty(DCPFI_Rate))
            {
                double y = Convert.ToDouble(DCPFI_Rate);
                totalValueDCPFI = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(DCPFI_Rate);
                totalValueDCPFI = z + y;
                double grandtotal = z + y;
            }
        }
        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(DCP_SecondInsert) && !string.IsNullOrEmpty(DCPSI_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(DCP_SecondInsert);
            if (!string.IsNullOrEmpty(DCPSI_Rate))
            {
                double y = Convert.ToDouble(DCPSI_Rate);
                totalValueDCPSI = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(DCPSI_Rate);
                totalValueDCPSI = z + y;
                double grandtotal = z + y;
            }
        }
        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(DCP_BrochureInsert) && !string.IsNullOrEmpty(DCPBI_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(DCP_BrochureInsert);
            if (!string.IsNullOrEmpty(DCPBI_Rate))
            {
                double y = Convert.ToDouble(DCPBI_Rate);
                totalValueDCPBI = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(DCPBI_Rate);
                totalValueDCPBI = z + y;
                double grandtotal = z + y;
            }
        }
        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(DCP_MailBelow_5K) && !string.IsNullOrEmpty(DCP5_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(DCP_MailBelow_5K);
            if (!string.IsNullOrEmpty(DCP5_Rate))
            {
                double y = Convert.ToDouble(DCP5_Rate);
                totalValueDCP5 = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(DCP5_Rate);
                totalValueDCP5 = z + y;
                double grandtotal = z + y;
            }
        }
        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(DCP_Handling) && !string.IsNullOrEmpty(DCPH_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(DCP_Handling);
            if (!string.IsNullOrEmpty(DCPH_Rate))
            {
                double y = Convert.ToDouble(DCPH_Rate);
                totalValueDCPH = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(DCPH_Rate);
                totalValueDCPH = z + y;
                double grandtotal = z + y;
            }
        }
        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(DCP_Sealing) && !string.IsNullOrEmpty(DCPSL_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(DCP_Sealing);
            if (!string.IsNullOrEmpty(DCPSL_Rate))
            {
                double y = Convert.ToDouble(DCPSL_Rate);
                totalValueDCPSL = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(DCPSL_Rate);
                totalValueDCPSL = z + y;
                double grandtotal = z + y;
            }
        }
        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(DCP_Tearing) && !string.IsNullOrEmpty(DCPT_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(DCP_Tearing);
            if (!string.IsNullOrEmpty(DCPT_Rate))
            {
                double y = Convert.ToDouble(DCPT_Rate);
                totalValueDCPT = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(DCPT_Rate);
                totalValueDCPT = z + y;
                double grandtotal = z + y;
            }
        }
        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(DCP_Folding) && !string.IsNullOrEmpty(DCPF_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(DCP_Folding);
            if (!string.IsNullOrEmpty(DCPF_Rate))
            {
                double y = Convert.ToDouble(DCPF_Rate);
                totalValueDCPF = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(DCPF_Rate);
                totalValueDCPF = z + y;
                double grandtotal = z + y;
            }
        }
        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(DCP_Sticking) && !string.IsNullOrEmpty(DCPS_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(DCP_Sticking);
            if (!string.IsNullOrEmpty(DCPS_Rate))
            {
                double y = Convert.ToDouble(DCPS_Rate);
                totalValueDCPS = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(DCPS_Rate);
                totalValueDCPS = z + y;
                double grandtotal = z + y;
            }
        }
        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(DCP_Labelling) && !string.IsNullOrEmpty(DCPL_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(DCP_Labelling);
            if (!string.IsNullOrEmpty(DCPL_Rate))
            {
                double y = Convert.ToDouble(DCPL_Rate);
                totalValueDCPL = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(DCPL_Rate);
                totalValueDCPL = z + y;
                double grandtotal = z + y;
            }
        }
        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(DCP_Matching) && !string.IsNullOrEmpty(DCPM_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(DCP_Matching);
            if (!string.IsNullOrEmpty(DCPM_Rate))
            {
                double y = Convert.ToDouble(DCPM_Rate);
                totalValueDCPM = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(DCPM_Rate);
                totalValueDCPM = z + y;
                double grandtotal = z + y;
            }
        }
        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(DCP_CDArchiving) && !string.IsNullOrEmpty(DCPCD_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(DCP_CDArchiving);
            if (!string.IsNullOrEmpty(DCPCD_Rate))
            {
                double y = Convert.ToDouble(DCPCD_Rate);
                totalValueDCPCD = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(DCPCD_Rate);
                totalValueDCPCD = z + y;
                double grandtotal = z + y;
            }
        }
        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(DCP_EnvelopeType) && !string.IsNullOrEmpty(DCPET_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(DCP_EnvelopeType);
            if (!string.IsNullOrEmpty(DCPET_Rate))
            {
                double y = Convert.ToDouble(DCPET_Rate);
                totalValueDCPET = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(DCPET_Rate);
                totalValueDCPET = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(DCP_EnvelopePrice) && !string.IsNullOrEmpty(DCPEP_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(DCP_EnvelopePrice);
            if (!string.IsNullOrEmpty(DCPEP_Rate))
            {
                double y = Convert.ToDouble(DCPEP_Rate);
                totalValueDCPEP = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(DCPEP_Rate);
                totalValueDCPEP = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(DCP_Paper) && !string.IsNullOrEmpty(DCPP_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(DCP_Paper);
            if (!string.IsNullOrEmpty(DCPP_Rate))
            {
                double y = Convert.ToDouble(DCPP_Rate);
                totalValueDCPP = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(DCPP_Rate);
                totalValueDCPP = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(DCP_PaperPrice) && !string.IsNullOrEmpty(DCPPP_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(DCP_PaperPrice);
            if (!string.IsNullOrEmpty(DCPPP_Rate))
            {
                double y = Convert.ToDouble(DCPPP_Rate);
                totalValueDCPPP = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(DCPPP_Rate);
                totalValueDCPPP = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(RM_Printing) && !string.IsNullOrEmpty(RMPT_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(RM_Printing);
            if (!string.IsNullOrEmpty(RMPT_Rate))
            {
                double y = Convert.ToDouble(RMPT_Rate);
                totalValueRMPT = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(RMPT_Rate);
                totalValueRMPT = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(RM_Selfmailer) && !string.IsNullOrEmpty(RMS_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(RM_Selfmailer);
            if (!string.IsNullOrEmpty(RMS_Rate))
            {
                double y = Convert.ToDouble(RMS_Rate);
                totalValueRMS = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(RMS_Rate);
                totalValueRMS = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(RM_MailBelow_5K) && !string.IsNullOrEmpty(RM5_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(RM_MailBelow_5K);
            if (!string.IsNullOrEmpty(RM5_Rate))
            {
                double y = Convert.ToDouble(RM5_Rate);
                totalValueRM5 = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(RM5_Rate);
                totalValueRM5 = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(RM_Handling) && !string.IsNullOrEmpty(RMH_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(RM_Handling);
            if (!string.IsNullOrEmpty(RMH_Rate))
            {
                double y = Convert.ToDouble(RMH_Rate);
                totalValueRMH = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(RMH_Rate);
                totalValueRMH = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(RM_LabellingRegsterMails) && !string.IsNullOrEmpty(RML_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(RM_LabellingRegsterMails);
            if (!string.IsNullOrEmpty(RML_Rate))
            {
                double y = Convert.ToDouble(RML_Rate);
                totalValueRML = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(RML_Rate);
                totalValueRML = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(RM_Paper) && !string.IsNullOrEmpty(RMP_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(RM_Paper);
            if (!string.IsNullOrEmpty(RMP_Rate))
            {
                double y = Convert.ToDouble(RMP_Rate);
                totalValueRMP = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(RMP_Rate);
                totalValueRMP = z + y;
                double grandtotal = z + y;
            }
        }

        if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(RM_PaperPrice) && !string.IsNullOrEmpty(RMPP_Rate))
        {
            ViewBag.Id = Id;



            double z = Convert.ToDouble(RM_PaperPrice);
            if (!string.IsNullOrEmpty(RMPP_Rate))
            {
                double y = Convert.ToDouble(RMPP_Rate);
                totalValueRMPP = z * y;
                double grandtotal = z * y;
            }
            else
            {
                double y = Convert.ToDouble(RMPP_Rate);
                totalValueRMPP = z + y;
                double grandtotal = z + y;
            }
        }



        List<JobInstruction> viewPosting = new List<JobInstruction>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil3 = 1;
            cn.Open();
            command.CommandText = @"SELECT Customer_Name, JobName, JobType, PrintingDuplex, Inserting1, Inserting2, Inserting3, Inserting4, BrochureInsert,MailBelow_5K,Handling, Tearing, Folding, Sticking, Labelling, Matching, CDArchiving, Npc, 
                             EnvelopeType, EnvelopePrice, Paper, PaperPrice, SM_PrintingSM, SM_SM_Material, SM_FirstInsert, SM_SecondInsert, SM_BrochureInsert, SM_MailBelow_5K, SM_Handling, SM_Sealing, SM_Tearing, SM_Folding, SM_Sticking, SM_Labelling, SM_Matching,SM_CDArchiving, 
                            SM_EnvelopeType, SM_EnvelopePrice, SM_Paper, SM_PaperPrice, MMP_PrintingDuplex, MMP_FirstInsert, MMP_SecondInsert, MMP_InsertingMMP,MMP_BrochureInsert, MMP_MailBelow_5K, MMP_Handling, PricingSchedule.MMP_Sealing, MMP_Tearing, MMP_Folding, MMP_Sticking, MMP_Labelling, 
                             MMP_Matching,MMP_EnvelopeType, MMP_CDArchiving, MMP_EnvelopePrice, MMP_Paper, MMP_PaperPrice, DCP_FoldingCharges, DCP_SupplyPrintLabel, DCP_PrintingDuplex, DCP_FirstInsert, DCP_SecondInsert, DCP_BrochureInsert, DCP_MailBelow_5K, PricingSchedule.DCP_Handling, DCP_Sealing, DCP_Tearing, 
                            DCP_Folding, DCP_Sticking, DCP_Labelling, DCP_Matching, DCP_CDArchiving,DCP_EnvelopeType, DCP_EnvelopePrice, DCP_Paper, DCP_PaperPrice, PricingSchedule.RM_Printing, PricingSchedule.RM_FirstInsert, PricingSchedule.RM_SecondInsert, PricingSchedule.RM_Selfmailer, PricingSchedule.RM_BrochureInsert, PricingSchedule.RM_MailBelow_5K, RM_Handling, RM_Sealing, 
                             RM_Tearing, RM_Folding, RM_Sticking, RM_Labelling, RM_LabellingRegsterMails, RM_Matching, RM_CDArchiving, RM_Mix, RM_EnvelopeType, PricingSchedule.RM_EnvelopePrice, RM_Paper,RM_PaperPrice
                             FROM  PricingSchedule 
                              WHERE Id =@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                JobInstruction model = new JobInstruction();
                {
                    model.Bil = _bil3++;

                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Customer_Name = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.JobName = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.JobType = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.PrintingDuplex = reader.GetString(3);
                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Inserting1 = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Inserting2 = reader.GetString(5);
                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Inserting3 = reader.GetString(6);
                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.Inserting4 = reader.GetString(7);
                    }
                    if (reader.IsDBNull(8) == false)
                    {
                        ViewBag.BrochureInsert = reader.GetString(8);
                    }
                    if (reader.IsDBNull(9) == false)
                    {
                        ViewBag.MailBelow_5K = reader.GetString(9);
                    }
                    if (reader.IsDBNull(10) == false)
                    {
                        ViewBag.Handling = reader.GetString(10);
                    }
                    if (reader.IsDBNull(11) == false)
                    {
                        ViewBag.Sealing = reader.GetString(11);
                    }
                    if (reader.IsDBNull(12) == false)
                    {
                        ViewBag.Tearing = reader.GetString(12);
                    }
                    if (reader.IsDBNull(13) == false)
                    {
                        ViewBag.Folding = reader.GetString(13);
                    }
                    if (reader.IsDBNull(14) == false)
                    {
                        ViewBag.Sticking = reader.GetString(14);
                    }
                    if (reader.IsDBNull(15) == false)
                    {
                        ViewBag.Labelling = reader.GetString(15);
                    }
                    if (reader.IsDBNull(16) == false)
                    {
                        ViewBag.Matching = reader.GetString(16);
                    }
                    if (reader.IsDBNull(17) == false)
                    {
                        ViewBag.CDArchiving = reader.GetString(17);
                    }
                    if (reader.IsDBNull(18) == false)
                    {
                        ViewBag.Npc = reader.GetString(18);
                    }
                    if (reader.IsDBNull(19) == false)
                    {
                        ViewBag.EnvelopeType = reader.GetString(19);
                    }
                    if (reader.IsDBNull(20) == false)
                    {
                        ViewBag.EnvelopePrice = reader.GetString(20);
                    }
                    if (reader.IsDBNull(21) == false)
                    {
                        ViewBag.Paper = reader.GetString(21);
                    }
                    if (reader.IsDBNull(22) == false)
                    {
                        ViewBag.PaperPrice = reader.GetString(22);
                    }
                    if (reader.IsDBNull(23) == false)
                    {
                        ViewBag.SM_PrintingSM = reader.GetString(23);
                    }
                    if (reader.IsDBNull(24) == false)
                    {
                        ViewBag.SM_SM_Material = reader.GetString(24);
                    }
                    if (reader.IsDBNull(25) == false)
                    {
                        ViewBag.SM_FirstInsert = reader.GetString(25);
                    }
                    if (reader.IsDBNull(26) == false)
                    {
                        ViewBag.SM_SecondInsert = reader.GetString(26);
                    }
                    if (reader.IsDBNull(27) == false)
                    {
                        ViewBag.SM_BrochureInsert = reader.GetString(27);
                    }
                    if (reader.IsDBNull(28) == false)
                    {
                        ViewBag.SM_MailBelow_5K = reader.GetString(28);
                    }
                    if (reader.IsDBNull(29) == false)
                    {
                        ViewBag.SM_Handling = reader.GetString(29);
                    }
                    if (reader.IsDBNull(30) == false)
                    {
                        ViewBag.SM_Sealing = reader.GetString(30);
                    }
                    if (reader.IsDBNull(31) == false)
                    {
                        ViewBag.SM_Tearing = reader.GetString(31);
                    }
                    if (reader.IsDBNull(32) == false)
                    {
                        ViewBag.SM_Folding = reader.GetString(32);
                    }
                    if (reader.IsDBNull(33) == false)
                    {
                        ViewBag.SM_Sticking = reader.GetString(33);
                    }
                    if (reader.IsDBNull(34) == false)
                    {
                        ViewBag.SM_Labelling = reader.GetString(34);
                    }
                    if (reader.IsDBNull(35) == false)
                    {
                        ViewBag.SM_Matching = reader.GetString(35);
                    }
                    if (reader.IsDBNull(36) == false)
                    {
                        ViewBag.SM_CDArchiving = reader.GetString(36);
                    }
                    if (reader.IsDBNull(37) == false)
                    {
                        ViewBag.SM_EnvelopeType = reader.GetString(37);
                    }
                    if (reader.IsDBNull(38) == false)
                    {
                        ViewBag.SM_EnvelopePrice = reader.GetString(38);
                    }
                    if (reader.IsDBNull(39) == false)
                    {
                        ViewBag.SM_Paper = reader.GetString(39);
                    }
                    if (reader.IsDBNull(40) == false)
                    {
                        ViewBag.SM_PaperPrice = reader.GetString(40);
                    }
                    if (reader.IsDBNull(41) == false)
                    {
                        ViewBag.MMP_PrintingDuplex = reader.GetString(41);
                    }
                    if (reader.IsDBNull(42) == false)
                    {
                        ViewBag.MMP_FirstInsert = reader.GetString(42);
                    }
                    if (reader.IsDBNull(43) == false)
                    {
                        ViewBag.MMP_SecondInsert = reader.GetString(43);
                    }
                    if (reader.IsDBNull(43) == false)
                    {
                        ViewBag.MMP_InsertingMMP = reader.GetString(43);
                    }
                    if (reader.IsDBNull(44) == false)
                    {
                        ViewBag.MMP_BrochureInsert = reader.GetString(44);
                    }
                    if (reader.IsDBNull(45) == false)
                    {
                        ViewBag.MMP_MailBelow_5K = reader.GetString(45);
                    }
                    if (reader.IsDBNull(46) == false)
                    {
                        ViewBag.MMP_Handling = reader.GetString(46);
                    }
                    if (reader.IsDBNull(47) == false)
                    {
                        ViewBag.MMP_Sealing = reader.GetString(47);
                    }
                    if (reader.IsDBNull(48) == false)
                    {
                        ViewBag.MMP_Tearing = reader.GetString(48);
                    }
                    if (reader.IsDBNull(48) == false)
                    {
                        ViewBag.MMP_Folding = reader.GetString(48);
                    }
                    if (reader.IsDBNull(49) == false)
                    {
                        ViewBag.MMP_Sticking = reader.GetString(49);
                    }
                    if (reader.IsDBNull(50) == false)
                    {
                        ViewBag.MMP_Labelling = reader.GetString(50);
                    }
                    if (reader.IsDBNull(51) == false)
                    {
                        ViewBag.MMP_Matching = reader.GetString(51);
                    }
                    if (reader.IsDBNull(52) == false)
                    {
                        ViewBag.MMP_CDArchiving = reader.GetString(52);
                    }
                    if (reader.IsDBNull(53) == false)
                    {
                        ViewBag.MMP_EnvelopeType = reader.GetString(53);
                    }
                    if (reader.IsDBNull(54) == false)
                    {
                        ViewBag.MMP_EnvelopePrice = reader.GetString(54);
                    }
                    if (reader.IsDBNull(55) == false)
                    {
                        ViewBag.MMP_Paper = reader.GetString(55);
                    }
                    if (reader.IsDBNull(56) == false)
                    {
                        ViewBag.MMP_PaperPrice = reader.GetString(56);
                    }
                    if (reader.IsDBNull(57) == false)
                    {
                        ViewBag.DCP_FoldingCharges = reader.GetString(57);
                    }
                    if (reader.IsDBNull(58) == false)
                    {
                        ViewBag.DCP_SupplyPrintLabel = reader.GetString(58);
                    }
                    if (reader.IsDBNull(59) == false)
                    {
                        ViewBag.DCP_PrintingDuplex = reader.GetString(59);
                    }
                    if (reader.IsDBNull(60) == false)
                    {
                        ViewBag.DCP_FirstInsert = reader.GetString(60);
                    }
                    if (reader.IsDBNull(61) == false)
                    {
                        ViewBag.DCP_SecondInsert = reader.GetString(61);
                    }
                    if (reader.IsDBNull(62) == false)
                    {
                        ViewBag.DCP_BrochureInsert = reader.GetString(62);
                    }
                    if (reader.IsDBNull(63) == false)
                    {
                        ViewBag.DCP_MailBelow_5K = reader.GetString(63);
                    }
                    if (reader.IsDBNull(64) == false)
                    {
                        ViewBag.DCP_Handling = reader.GetString(64);
                    }
                    if (reader.IsDBNull(65) == false)
                    {
                        ViewBag.DCP_Sealing = reader.GetString(65);
                    }
                    if (reader.IsDBNull(66) == false)
                    {
                        ViewBag.DCP_Tearing = reader.GetString(66);
                    }
                    if (reader.IsDBNull(67) == false)
                    {
                        ViewBag.DCP_Folding = reader.GetString(67);
                    }
                    if (reader.IsDBNull(68) == false)
                    {
                        ViewBag.DCP_Sticking = reader.GetString(68);
                    }
                    if (reader.IsDBNull(69) == false)
                    {
                        ViewBag.DCP_Labelling = reader.GetString(69);
                    }
                    if (reader.IsDBNull(70) == false)
                    {
                        ViewBag.DCP_Matching = reader.GetString(70);
                    }
                    if (reader.IsDBNull(71) == false)
                    {
                        ViewBag.DCP_CDArchiving = reader.GetString(71);
                    }
                    if (reader.IsDBNull(72) == false)
                    {
                        ViewBag.DCP_EnvelopeType = reader.GetString(72);
                    }
                    if (reader.IsDBNull(73) == false)
                    {
                        ViewBag.DCP_EnvelopePrice = reader.GetString(73);
                    }
                    if (reader.IsDBNull(74) == false)
                    {
                        ViewBag.DCP_Paper = reader.GetString(74);
                    }
                    if (reader.IsDBNull(75) == false)
                    {
                        ViewBag.DCP_PaperPrice = reader.GetString(75);
                    }
                    if (reader.IsDBNull(76) == false)
                    {
                        ViewBag.RM_Printing = reader.GetString(76);
                    }
                    if (reader.IsDBNull(77) == false)
                    {
                        ViewBag.RM_FirstInsert = reader.GetString(77);
                    }
                    if (reader.IsDBNull(77) == false)
                    {
                        ViewBag.RM_SecondInsert = reader.GetString(77);
                    }
                    if (reader.IsDBNull(78) == false)
                    {
                        ViewBag.RM_Selfmailer = reader.GetString(78);
                    }

                    if (reader.IsDBNull(79) == false)
                    {
                        ViewBag.RM_BrochureInsert = reader.GetString(79);
                    }

                    if (reader.IsDBNull(80) == false)
                    {
                        ViewBag.RM_Handling = reader.GetString(80);
                    }
                    if (reader.IsDBNull(81) == false)
                    {
                        ViewBag.RM_Sealing = reader.GetString(81);
                    }
                    if (reader.IsDBNull(82) == false)
                    {
                        ViewBag.RM_Tearing = reader.GetString(82);
                    }
                    if (reader.IsDBNull(83) == false)
                    {
                        ViewBag.RM_Folding = reader.GetString(83);
                    }
                    if (reader.IsDBNull(84) == false)
                    {
                        ViewBag.RM_Sticking = reader.GetString(84);
                    }
                    if (reader.IsDBNull(85) == false)
                    {
                        ViewBag.RM_Labelling = reader.GetString(85);
                    }
                    if (reader.IsDBNull(86) == false)
                    {
                        ViewBag.RM_LabellingRegsterMails = reader.GetString(86);
                    }
                    if (reader.IsDBNull(87) == false)
                    {
                        ViewBag.RM_Matching = reader.GetString(87);
                    }
                    if (reader.IsDBNull(88) == false)
                    {
                        ViewBag.RM_CDArchiving = reader.GetString(88);
                    }
                    if (reader.IsDBNull(89) == false)
                    {
                        ViewBag.RM_Mix = reader.GetString(89);
                    }
                    if (reader.IsDBNull(90) == false)
                    {
                        ViewBag.RM_EnvelopeType = reader.GetString(90);
                    }
                    if (reader.IsDBNull(91) == false)
                    {
                        ViewBag.RM_EnvelopeType = reader.GetString(91);
                    }
                    if (reader.IsDBNull(92) == false)
                    {
                        ViewBag.RM_EnvelopePrice = reader.GetString(92);
                    }
                    if (reader.IsDBNull(93) == false)
                    {
                        ViewBag.RM_Paper = reader.GetString(93);
                    }
                    if (reader.IsDBNull(94) == false)
                    {
                        ViewBag.RM_PaperPrice = reader.GetString(94);
                    }
                }
                viewPosting.Add(model);
            }
            cn.Close();


        }


        if (set == "PrintInsert")
        {
            if (!string.IsNullOrEmpty(Id))
            {

                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {


                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    Guid Idx = Guid.NewGuid();
                    Session["Idx"] = Idx;
                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");

                    using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                    {

                        cn.Open();

                        SqlCommand command;
                        command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,ServiceChange,VolumeService,RateServie,JobInstructionId,CreatedOn,Postage,ValuePostage,RatePostage,TotalAmountService,TotalAmountPostage,Mix,VolumeMix,RateMix,TotalAmountMix,CourierChanges,VolumeCC,RateCC,DeliveryCharge,VolumeDC,RateDC,Franking,VolumeF,RateF,SelfMailer,VolumeS,RateS,Others,VolumeO,RateO,Imprest,ValueImprest,RateImprest,TotalAmountImprest,Others2,VolumeO2 ,RateO2,TotalAmountO2,Others3,VolumeO3,RateO3,TotalAmountO3,Others4,VolumeO4,RateO4,TotalAmountO4,Others5,VolumeO5,RateO5,TotalAmountO5,TotalAmountO,TotalAmountCC,TotalAmountDC,TotalAmountF,TotalAmountS,Sst,Description,PrintingDuplex, Inserting1, Inserting2, Inserting3, Inserting4, BrochureInsert, MailBelow_5K, Handling, Sealing, Tearing, Folding, Sticking, Matching, CDArchiving, Npc, EnvelopeType, EnvelopePrice, Paper, PaperPrice,PD_Rate, PD_Total, IS1_Rate, IS1_Total, IS2_Rate, IS2_Total, IS3_Rate, IS3_Total, IS4_Rate, IS4_Total,BI_Rate, BI_Total, M5_Rate, M5_Total, HL_Rate, HL_Total, PIS_Rate, PIS_Total, PIT_Rate, PIT_Total, PIF_Rate, PIF_Total,SK_Rate, SK_Total, MG_Rate, MG_Total, CDA_Rate, CDA_Total, NPC_Rate, NPC_Total, ET_Rate, ET_Total,EP_Rate, EP_Total, P_Rate, P_Total, PP_Rate,  PP_Total, LBPrintingDuplex2 ,LBInserting1 ,LBInserting2 ,LBInserting3 ,LBInserting4 ,LBBrochureInsert ,LBMailBelow_5K ,LBHandling ,LBPI_Sealing ,LBPI_Tearing ,LBPI_Folding ,LBSticking ,LBMatching ,LBCDArchiving ,LBNpc ,LBPI_EnvelopeType ,LBPI_EnvelopePrice ,LBPI_Paper ,LBPI_PaperPrice ,Jobtype)" +
                                   "VALUES(@Id,@ServiceChange,@VolumeService,@RateServie,@JobInstructionId,@CreatedOn,@Postage,@ValuePostage,@RatePostage,@TotalAmountService,@TotalAmountPostage,@Mix,@VolumeMix,@RateMix,@TotalAmountMix,@CourierChanges,@VolumeCC,@RateCC,@DeliveryCharge,@VolumeDC,@RateDC,@Franking,@VolumeF,@RateF,@SelfMailer,@VolumeS,@RateS,@Others,@VolumeO,@RateO,@Imprest,@ValueImprest,@RateImprest,@TotalAmountImprest,@Others2,@VolumeO2,@RateO2,@TotalAmountO2,@Others3,@VolumeO3,@RateO3,@TotalAmountO3,@Others4,@VolumeO4,@RateO4,@TotalAmountO4,@Others5,@VolumeO5,@RateO5,@TotalAmountO5,@TotalAmountO,@TotalAmountCC,@TotalAmountDC,@TotalAmountF,@TotalAmountS,@Sst,@Description,@PrintingDuplex,@Inserting1,@Inserting2,@Inserting3,@Inserting4,@BrochureInsert,@MailBelow_5K,@Handling,@Sealing,@Tearing,@Folding,@Sticking,@Matching,@CDArchiving,@Npc,@EnvelopeType,@EnvelopePrice,@Paper,@PaperPrice,@PD_Rate, @PD_Total, @IS1_Rate,  @IS1_Total, @IS2_Rate,  @IS2_Total, @IS3_Rate,  @IS3_Total, @IS4_Rate,  @IS4_Total,@BI_Rate, @BI_Total, @M5_Rate, @M5_Total, @HL_Rate,  @HL_Total, @PIS_Rate, @PIS_Total, @PIT_Rate, @PIT_Total, @PIF_Rate, @PIF_Total,@SK_Rate, @SK_Total, @MG_Rate, @MG_Total, @CDA_Rate,  @CDA_Total, @NPC_Rate,  @NPC_Total, @ET_Rate,  @ET_Total, @EP_Rate,  @EP_Total, @P_Rate,  @P_Total, @PP_Rate,  @PP_Total ,@LBPrintingDuplex2 ,@LBInserting1 ,@LBInserting2 ,@LBInserting3 ,@LBInserting4 ,@LBBrochureInsert ,@LBMailBelow_5K ,@LBHandling ,@LBPI_Sealing ,@LBPI_Tearing ,@LBPI_Folding ,@LBSticking ,@LBMatching ,@LBCDArchiving ,@LBNpc ,@LBPI_EnvelopeType ,@LBPI_EnvelopePrice,@LBPI_Paper ,@LBPI_PaperPrice ,@Jobtype)", cn);
                        command.Parameters.AddWithValue("@Id", Idx);

                        if (!string.IsNullOrEmpty(ServiceChange))
                        {
                            command.Parameters.AddWithValue("@ServiceChange", ServiceChange);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@ServiceChange", DBNull.Value);


                        }
                        if (!string.IsNullOrEmpty(VolumeService))
                        {

                            command.Parameters.AddWithValue("@VolumeService", VolumeService);

                        }
                        else
                        {
                            command.Parameters.AddWithValue("@VolumeService", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(RateServie))
                        {

                            command.Parameters.AddWithValue("@RateServie", RateServie);

                        }
                        else
                        {
                            command.Parameters.AddWithValue("@RateServie", DBNull.Value);
                        }


                        command.Parameters.AddWithValue("@JobInstructionId", Id);
                        command.Parameters.AddWithValue("@CreatedOn", createdOn);

                        if (!string.IsNullOrEmpty(Postage))
                        {
                            command.Parameters.AddWithValue("@Postage", Postage);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Postage", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(ValuePostage))
                        {
                            command.Parameters.AddWithValue("@ValuePostage", ValuePostage);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@ValuePostage", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(RatePostage))
                        {
                            command.Parameters.AddWithValue("@RatePostage", RatePostage);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@RatePostage", DBNull.Value);

                        }


                        command.Parameters.AddWithValue("@TotalAmountService", totalValueSevice.ToString("#,###,##0.00"));



                        command.Parameters.AddWithValue("@TotalAmountPostage", totalValuePostage.ToString("#,###,##0.00"));


                        if (!string.IsNullOrEmpty(Mix))
                        {
                            command.Parameters.AddWithValue("@Mix", Mix);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Mix", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(VolumeMix))
                        {
                            command.Parameters.AddWithValue("@VolumeMix", VolumeMix);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@VolumeMix", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(RateMix))
                        {
                            command.Parameters.AddWithValue("@RateMix", RateMix);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@RateMix", DBNull.Value);

                        }


                        command.Parameters.AddWithValue("@TotalAmountMix", totalValue_Mix.ToString("#,###,##0.00"));


                        if (!string.IsNullOrEmpty(CourierChanges))
                        {
                            command.Parameters.AddWithValue("@CourierChanges", CourierChanges);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@CourierChanges", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(VolumeCC))
                        {
                            command.Parameters.AddWithValue("@VolumeCC", VolumeCC);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@VolumeCC", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(RateCC))
                        {
                            command.Parameters.AddWithValue("@RateCC", RateCC);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@RateCC", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(DeliveryCharge))
                        {
                            command.Parameters.AddWithValue("@DeliveryCharge", DeliveryCharge);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@DeliveryCharge", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(VolumeDC))
                        {
                            command.Parameters.AddWithValue("@VolumeDC", VolumeDC);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@VolumeDC", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(RateDC))
                        {
                            command.Parameters.AddWithValue("@RateDC", RateDC);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@RateDC", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(Franking))
                        {
                            command.Parameters.AddWithValue("@Franking", Franking);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Franking", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(VolumeF))
                        {
                            command.Parameters.AddWithValue("@VolumeF", VolumeF);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@VolumeF", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(RateF))
                        {
                            command.Parameters.AddWithValue("@RateF", RateF);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@RateF", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(SelfMailer))
                        {
                            command.Parameters.AddWithValue("@SelfMailer", SelfMailer);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@SelfMailer", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(VolumeS))
                        {
                            command.Parameters.AddWithValue("@VolumeS", VolumeS);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@VolumeS", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(RateS))
                        {
                            command.Parameters.AddWithValue("@RateS", RateS);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@RateS", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(Others))
                        {
                            command.Parameters.AddWithValue("@Others", Others);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Others", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(VolumeO))
                        {
                            command.Parameters.AddWithValue("@VolumeO", VolumeO);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@VolumeO", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(RateO))
                        {
                            command.Parameters.AddWithValue("@RateO", RateO);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@RateO", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(Imprest))
                        {
                            command.Parameters.AddWithValue("@Imprest", Imprest);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Imprest", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(ValueImprest))
                        {
                            command.Parameters.AddWithValue("@ValueImprest", ValueImprest);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@ValueImprest", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(RateImprest))
                        {
                            command.Parameters.AddWithValue("@RateImprest", RateImprest);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@RateImprest", DBNull.Value);

                        }


                        command.Parameters.AddWithValue("@TotalAmountImprest", totalValueI.ToString("#,###,##0.00"));

                        if (!string.IsNullOrEmpty(Others2))
                        {
                            command.Parameters.AddWithValue("@Others2", Others2);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Others2", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(VolumeO2))
                        {
                            command.Parameters.AddWithValue("@VolumeO2", VolumeO2);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@VolumeO2", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(RateO2))
                        {
                            command.Parameters.AddWithValue("@RateO2", RateO2);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@RateO2", DBNull.Value);

                        }

                        command.Parameters.AddWithValue("@TotalAmountO2", totalValueO2.ToString("#,###,##0.00"));


                        if (!string.IsNullOrEmpty(Others3))
                        {
                            command.Parameters.AddWithValue("@Others3", Others3);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Others3", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(VolumeO3))
                        {
                            command.Parameters.AddWithValue("@VolumeO3", VolumeO3);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@VolumeO3", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(RateO3))
                        {
                            command.Parameters.AddWithValue("@RateO3", RateO3);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@RateO3", DBNull.Value);

                        }


                        command.Parameters.AddWithValue("@TotalAmountO3", totalValueO3.ToString("#,###,##0.00"));



                        if (!string.IsNullOrEmpty(Others4))
                        {
                            command.Parameters.AddWithValue("@Others4", Others4);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Others4", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(VolumeO4))
                        {
                            command.Parameters.AddWithValue("@VolumeO4", VolumeO4);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@VolumeO4", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(RateO4))
                        {
                            command.Parameters.AddWithValue("@RateO4", RateO4);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@RateO4", DBNull.Value);

                        }



                        command.Parameters.AddWithValue("@TotalAmountO4", totalValueO4.ToString("#,###,##0.00"));

                        if (!string.IsNullOrEmpty(Others5))
                        {
                            command.Parameters.AddWithValue("@Others5", Others5);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Others5", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(VolumeO5))
                        {
                            command.Parameters.AddWithValue("@VolumeO5", VolumeO5);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@VolumeO5", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(RateO5))
                        {
                            command.Parameters.AddWithValue("@RateO5", RateO5);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@RateO5", DBNull.Value);

                        }



                        command.Parameters.AddWithValue("@TotalAmountO5", totalValueO5.ToString("#,###,##0.00"));

                        Debug.WriteLine("Rate0 : " + RateO);

                        Debug.WriteLine("Volume0 : " + VolumeO);

                        float TV = (float.Parse(RateO)) * (float.Parse(VolumeO));

                        string TVdecimal = TV.ToString("F2");

                        command.Parameters.AddWithValue("@TotalAmountO", TVdecimal);
                        //command.Parameters.AddWithValue("@TotalAmountO", totalValue.ToString("#,###,##0.00"));

                        Debug.WriteLine("TotalAmount0 : " + TV);


                        command.Parameters.AddWithValue("@TotalAmountCC", totalValueCC.ToString("#,###,##0.00"));


                        command.Parameters.AddWithValue("@TotalAmountDC", totalValueDC.ToString("#,###,##0.00"));


                        command.Parameters.AddWithValue("@TotalAmountF", totalValueF.ToString("#,###,##0.00"));

                        command.Parameters.AddWithValue("@TotalAmountS", totalValueS.ToString("#,###,##0.00"));
                        command.Parameters.AddWithValue("@Sst", Sst);
                        if (!string.IsNullOrEmpty(Description))
                        {

                            command.Parameters.AddWithValue("@Description", Description);

                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Description", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(LBPrintingDuplex2))
                        {

                            command.Parameters.AddWithValue("@LBPrintingDuplex2", LBPrintingDuplex2);

                        }
                        else
                        {
                            command.Parameters.AddWithValue("@LBPrintingDuplex2", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(PD_Rate))
                        {

                            command.Parameters.AddWithValue("@PD_Rate", PD_Rate);

                        }
                        else
                        {
                            command.Parameters.AddWithValue("@PD_Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(PrintingDuplex))
                        {
                            command.Parameters.AddWithValue("@PrintingDuplex", PrintingDuplex);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@PrintingDuplex", DBNull.Value);

                        }




                        if (!string.IsNullOrEmpty(Inserting1))
                        {
                            command.Parameters.AddWithValue("@Inserting1", Inserting1);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Inserting1", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(IS1_Rate))
                        {
                            command.Parameters.AddWithValue("@IS1_Rate", IS1_Rate);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@IS1_Rate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(LBInserting1))
                        {
                            command.Parameters.AddWithValue("@LBInserting1", LBInserting1);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@LBInserting1", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Inserting2))
                        {
                            command.Parameters.AddWithValue("@Inserting2", Inserting2);

                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Inserting2", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(IS2_Rate))
                        {
                            command.Parameters.AddWithValue("@IS2_Rate", IS2_Rate);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@IS2_Rate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(LBInserting2))
                        {
                            command.Parameters.AddWithValue("@LBInserting2", LBInserting2);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@LBInserting2", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Inserting3))
                        {
                            command.Parameters.AddWithValue("@Inserting3", Inserting3);

                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Inserting3", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(IS3_Rate))
                        {
                            command.Parameters.AddWithValue("@IS3_Rate", IS3_Rate);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@IS3_Rate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(LBInserting3))
                        {
                            command.Parameters.AddWithValue("@LBInserting3", LBInserting3);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@LBInserting3", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Inserting4))
                        {
                            command.Parameters.AddWithValue("@Inserting4", Inserting4);

                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Inserting4", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(IS4_Rate))
                        {
                            command.Parameters.AddWithValue("@IS4_Rate", IS4_Rate);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@IS4_Rate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(LBInserting4))
                        {
                            command.Parameters.AddWithValue("@LBInserting4", LBInserting4);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@LBInserting4", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(BrochureInsert))
                        {
                            command.Parameters.AddWithValue("@BrochureInsert", BrochureInsert);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@BrochureInsert", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(BI_Rate))
                        {
                            command.Parameters.AddWithValue("@BI_Rate", BI_Rate);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@BI_Rate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(LBBrochureInsert))
                        {
                            command.Parameters.AddWithValue("@LBBrochureInsert", LBBrochureInsert);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@LBBrochureInsert", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(MailBelow_5K))
                        {
                            command.Parameters.AddWithValue("@MailBelow_5K", MailBelow_5K);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@MailBelow_5K", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(M5_Rate))
                        {
                            command.Parameters.AddWithValue("@M5_Rate", M5_Rate);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@M5_Rate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(LBMailBelow_5K))
                        {
                            command.Parameters.AddWithValue("@LBMailBelow_5K", LBMailBelow_5K);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@LBMailBelow_5K", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Handling))
                        {
                            command.Parameters.AddWithValue("@Handling", Handling);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Handling", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(HL_Rate))
                        {
                            command.Parameters.AddWithValue("@HL_Rate", HL_Rate);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@HL_Rate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(LBHandling))
                        {
                            command.Parameters.AddWithValue("@LBHandling", LBHandling);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@LBHandling", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Sealing))
                        {
                            command.Parameters.AddWithValue("@Sealing", Sealing);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Sealing", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(PIS_Rate))
                        {
                            command.Parameters.AddWithValue("@PIS_Rate", PIS_Rate);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@PIS_Rate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(LBPI_Sealing))
                        {
                            command.Parameters.AddWithValue("@LBPI_Sealing", LBPI_Sealing);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@LBPI_Sealing", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Tearing))
                        {
                            command.Parameters.AddWithValue("@Tearing", Tearing);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Tearing", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(PIT_Rate))
                        {
                            command.Parameters.AddWithValue("@PIT_Rate", PIT_Rate);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@PIT_Rate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(LBPI_Tearing))
                        {
                            command.Parameters.AddWithValue("@LBPI_Tearing", LBPI_Tearing);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@LBPI_Tearing", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Folding))
                        {
                            command.Parameters.AddWithValue("@Folding", Folding);

                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Folding", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(PIF_Rate))
                        {
                            command.Parameters.AddWithValue("@PIF_Rate", PIF_Rate);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@PIF_Rate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(LBPI_Folding))
                        {
                            command.Parameters.AddWithValue("@LBPI_Folding", LBPI_Folding);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@LBPI_Folding", DBNull.Value);
                        }



                        if (!string.IsNullOrEmpty(Sticking))
                        {
                            command.Parameters.AddWithValue("@Sticking", Sticking);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Sticking", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(SK_Rate))
                        {
                            command.Parameters.AddWithValue("@SK_Rate", SK_Rate);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@SK_Rate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(LBSticking))
                        {
                            command.Parameters.AddWithValue("@LBSticking", LBSticking);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@LBSticking", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Matching))
                        {
                            command.Parameters.AddWithValue("@Matching", Matching);

                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Matching", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(MG_Rate))
                        {
                            command.Parameters.AddWithValue("@MG_Rate", MG_Rate);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@MG_Rate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(LBMatching))
                        {
                            command.Parameters.AddWithValue("@LBMatching", LBMatching);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@LBMatching", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(CDArchiving))
                        {
                            command.Parameters.AddWithValue("@CDArchiving", CDArchiving);

                        }
                        else
                        {
                            command.Parameters.AddWithValue("@CDArchiving", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(CDA_Rate))
                        {
                            command.Parameters.AddWithValue("@CDA_Rate", CDA_Rate);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@CDA_Rate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(LBCDArchiving))
                        {
                            command.Parameters.AddWithValue("@LBCDArchiving", LBCDArchiving);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@LBCDArchiving", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Npc))
                        {
                            command.Parameters.AddWithValue("@Npc", Npc);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Npc", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(NPC_Rate))
                        {
                            command.Parameters.AddWithValue("@NPC_Rate", NPC_Rate);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@NPC_Rate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(LBNpc))
                        {
                            command.Parameters.AddWithValue("@LBNpc", LBNpc);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@LBNpc", DBNull.Value);
                        }



                        if (!string.IsNullOrEmpty(EnvelopeType))
                        {
                            command.Parameters.AddWithValue("@EnvelopeType", EnvelopeType);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@EnvelopeType", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(ET_Rate))
                        {
                            command.Parameters.AddWithValue("@ET_Rate", ET_Rate);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@ET_Rate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(LBPI_EnvelopeType))
                        {
                            command.Parameters.AddWithValue("@LBPI_EnvelopeType", LBPI_EnvelopeType);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@LBPI_EnvelopeType", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(EnvelopePrice))
                        {
                            command.Parameters.AddWithValue("@EnvelopePrice", EnvelopePrice);

                        }
                        else
                        {
                            command.Parameters.AddWithValue("@EnvelopePrice", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(EP_Rate))
                        {
                            command.Parameters.AddWithValue("@EP_Rate", EP_Rate);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@EP_Rate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(LBPI_EnvelopePrice))
                        {
                            command.Parameters.AddWithValue("@LBPI_EnvelopePrice", LBPI_EnvelopePrice);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@LBPI_EnvelopePrice", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Paper))
                        {
                            command.Parameters.AddWithValue("@Paper", Paper);

                        }
                        else
                        {
                            command.Parameters.AddWithValue("@Paper", DBNull.Value);

                        }
                        if (!string.IsNullOrEmpty(P_Rate))
                        {
                            command.Parameters.AddWithValue("@P_Rate", P_Rate);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@P_Rate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(LBPI_Paper))
                        {
                            command.Parameters.AddWithValue("@LBPI_Paper ", LBPI_Paper);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@LBPI_Paper ", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(PaperPrice))
                        {
                            command.Parameters.AddWithValue("@PaperPrice", PaperPrice);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@PaperPrice", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(PP_Rate))
                        {
                            command.Parameters.AddWithValue("@PP_Rate", PP_Rate);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@PP_Rate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(LBPI_PaperPrice))
                        {
                            command.Parameters.AddWithValue("@LBPI_PaperPrice", LBPI_PaperPrice);
                        }
                        else
                        {
                            command.Parameters.AddWithValue("@LBPI_PaperPrice", DBNull.Value);
                        }


                        command.Parameters.AddWithValue("@PD_Total", totalValuePD.ToString("#,###,##0.00"));



                        command.Parameters.AddWithValue("@IS1_Total", totalValueIS1.ToString("#,###,##0.00"));



                        command.Parameters.AddWithValue("@IS2_Total", totalValueIS2.ToString("#,###,##0.00"));




                        command.Parameters.AddWithValue("@IS3_Total", totalValueIS3.ToString("#,###,##0.00"));




                        command.Parameters.AddWithValue("@IS4_Total", totalValueIS4.ToString("#,###,##0.00"));




                        command.Parameters.AddWithValue("@BI_Total", totalValueBI.ToString("#,###,##0.00"));




                        command.Parameters.AddWithValue("@M5_Total", totalValueM5.ToString("#,###,##0.00"));


                        command.Parameters.AddWithValue("@HL_Total", totalValueHL.ToString("#,###,##0.00"));

                        command.Parameters.AddWithValue("@PIS_Total", totalValuePIS.ToString("#,###,##0.00"));


                        command.Parameters.AddWithValue("@PIT_Total", totalValuePIT.ToString("#,###,##0.00"));




                        command.Parameters.AddWithValue("@PIF_Total", totalValuePIF.ToString("#,###,##0.00"));




                        command.Parameters.AddWithValue("@SK_Total", totalValueSK.ToString("#,###,##0.00"));




                        command.Parameters.AddWithValue("@LG_Total", totalValueLG.ToString("#,###,##0.00"));


                        command.Parameters.AddWithValue("@MG_Total", totalValueMG.ToString("#,###,##0.00"));



                        command.Parameters.AddWithValue("@CDA_Total", totalValueCDA.ToString("#,###,##0.00"));



                        command.Parameters.AddWithValue("@NPC_Total", totalValueNPC.ToString("#,###,##0.00"));




                        command.Parameters.AddWithValue("@ET_Total", totalValueET.ToString("#,###,##0.00"));




                        command.Parameters.AddWithValue("@P_Total", totalValueP.ToString("#,###,##0.00"));




                        command.Parameters.AddWithValue("@EP_Total", totalValueEP.ToString("#,###,##0.00"));



                        command.Parameters.AddWithValue("@PP_Total", totalValuePP.ToString("#,###,##0.00"));

                        command.Parameters.AddWithValue("@JobType", "PrintInsert");

                        command.ExecuteNonQuery();
                        cn2.Close();


                        if (!string.IsNullOrEmpty(Postage))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValuePostage.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }
                        }


                        if (!string.IsNullOrEmpty(ServiceChange))

                        {

                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValueSevice.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }
                        }





                        if (!string.IsNullOrEmpty(Mix))

                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValue_Mix.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }

                        }

                        if (!string.IsNullOrEmpty(Imprest))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValueI.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }

                        }


                        if (!string.IsNullOrEmpty(Others))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValue.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }

                        }


                        if (!string.IsNullOrEmpty(Others2))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValueO2.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }

                        }

                        if (!string.IsNullOrEmpty(Others3))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValueO3.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }
                        }
                        if (!string.IsNullOrEmpty(Others4))
                        {

                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValueO4.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }
                        }
                        if (!string.IsNullOrEmpty(Others5))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValueO5.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }
                        }


                        if (!string.IsNullOrEmpty(PrintingDuplex))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValuePD.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }
                        }


                        if (!string.IsNullOrEmpty(Inserting1))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValueIS1.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }
                        }
                        if (!string.IsNullOrEmpty(Inserting2))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValueIS2.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }
                        }
                        if (!string.IsNullOrEmpty(Inserting3))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValueIS3.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }
                        }

                        if (!string.IsNullOrEmpty(Inserting4))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValueIS4.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }
                        }
                        if (!string.IsNullOrEmpty(BrochureInsert))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValueBI.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }
                        }
                        if (!string.IsNullOrEmpty(BrochureInsert))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValueBI.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }
                        }

                        if (!string.IsNullOrEmpty(MailBelow_5K))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValueM5.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }
                        }
                        if (!string.IsNullOrEmpty(Handling))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValueHL.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }
                        }
                        if (!string.IsNullOrEmpty(PI_Tearing))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValuePIT.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }


                        }

                        if (!string.IsNullOrEmpty(PI_Folding))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValuePIF.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }


                        }

                        if (!string.IsNullOrEmpty(Sticking))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValueSK.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }


                        }
                        if (!string.IsNullOrEmpty(Labelling))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValueLG.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }


                        }

                        if (!string.IsNullOrEmpty(Matching))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValueMG.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }


                        }


                        if (!string.IsNullOrEmpty(CDArchiving))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValueCDA.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }


                        }

                        if (!string.IsNullOrEmpty(Npc))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValueNPC.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }


                        }

                        if (!string.IsNullOrEmpty(Npc))
                        {
                            using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                            {


                                cn3.Open();

                                SqlCommand command3;
                                command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                           "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                                command3.Parameters.AddWithValue("@Id", Idx);
                                command3.Parameters.AddWithValue("@GrandTotal", totalValueNPC.ToString("#,###,##0.00"));
                                command3.Parameters.AddWithValue("@JobInstructionId", Id);
                                command3.ExecuteNonQuery();
                                cn3.Close();

                                cn3.Open();

                            }


                        }




                    }
                }
            }
        }
        else if (set == "SelfMailer")
        {
            if (!string.IsNullOrEmpty(Id))
            {
                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {

                    Guid Idx = Guid.NewGuid();
                    Session["Idx"] = Idx;
                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");


                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,ServiceChange,VolumeService,RateServie,JobInstructionId,CreatedOn,Postage,ValuePostage,RatePostage,TotalAmountService,TotalAmountPostage,Mix,VolumeMix,RateMix,TotalAmountMix,CourierChanges,VolumeCC,RateCC,DeliveryCharge,VolumeDC,RateDC,Franking,VolumeF,RateF,SelfMailer,VolumeS,RateS,Others,VolumeO,RateO,Imprest,ValueImprest,RateImprest,TotalAmountImprest,Others2,VolumeO2 ,RateO2,TotalAmountO2,Others3,VolumeO3,RateO3,TotalAmountO3,Others4,VolumeO4,RateO4,TotalAmountO4,Others5,VolumeO5,RateO5,TotalAmountO5,TotalAmountO,TotalAmountCC,TotalAmountDC,TotalAmountF,TotalAmountS,Sst,Description,SM_PrintingSM,SMPG_Rate,SMPG_Total,SM_SM_Material,SMM_Rate,SMM_Total,SM_FirstInsert,SM_SecondInsert,SM_BrochureInsert,SM_MailBelow_5K,SM5_Rate,SM5_Total, SM_Handling, SM_Sealing, SM_Tearing,SM_Folding,SM_Sticking, SM_Labelling ,SM_Matching, SM_CDArchiving, SM_EnvelopeType, SM_EnvelopePrice, SM_Paper, SM_PaperPrice,JobType,LBSM_PrintingSM,LBSM_SM_Material,LBSM_MailBelow_5K,LBSM_Handling)" +
                               "VALUES(@Id,@ServiceChange,@VolumeService,@RateServie,@JobInstructionId,@CreatedOn,@Postage,@ValuePostage,@RatePostage,@TotalAmountService,@TotalAmountPostage,@Mix,@VolumeMix,@RateMix,@TotalAmountMix,@CourierChanges,@VolumeCC,@RateCC,@DeliveryCharge,@VolumeDC,@RateDC,@Franking,@VolumeF,@RateF,@SelfMailer,@VolumeS,@RateS,@Others,@VolumeO,@RateO,@Imprest,@ValueImprest,@RateImprest,@TotalAmountImprest,@Others2,@VolumeO2,@RateO2,@TotalAmountO2,@Others3,@VolumeO3,@RateO3,@TotalAmountO3,@Others4,@VolumeO4,@RateO4,@TotalAmountO4,@Others5,@VolumeO5,@RateO5,@TotalAmountO5,@TotalAmountO,@TotalAmountCC,@TotalAmountDC,@TotalAmountF,@TotalAmountS,@Sst,@Description,@SM_PrintingSM,@SMPG_Rate,@SMPG_Total,@SM_SM_Material,@SMM_Rate,@SMM_Total,@SM_FirstInsert,@SM_SecondInsert,@SM_BrochureInsert,@SM_MailBelow_5K,@SM5_Rate,@SM5_Total,@SM_Handling,@SM_Sealing,@SM_Tearing,@SM_Folding,@SM_Sticking,@SM_Labelling ,@SM_Matching,@SM_CDArchiving,@SM_EnvelopeType,@SM_EnvelopePrice,@SM_Paper,@SM_PaperPrice,@JobType,@LBSM_PrintingSM,@LBSM_SM_Material,@LBSM_MailBelow_5K,@LBSM_Handling)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(ServiceChange))
                    {
                        command.Parameters.AddWithValue("@ServiceChange", ServiceChange);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@ServiceChange", DBNull.Value);


                    }
                    if (!string.IsNullOrEmpty(VolumeService))
                    {

                        command.Parameters.AddWithValue("@VolumeService", VolumeService);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeService", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RateServie))
                    {

                        command.Parameters.AddWithValue("@RateServie", RateServie);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateServie", DBNull.Value);
                    }


                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);

                    if (!string.IsNullOrEmpty(Postage))
                    {
                        command.Parameters.AddWithValue("@Postage", Postage);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Postage", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(ValuePostage))
                    {
                        command.Parameters.AddWithValue("@ValuePostage", ValuePostage);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@ValuePostage", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(RatePostage))
                    {
                        command.Parameters.AddWithValue("@RatePostage", RatePostage);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RatePostage", DBNull.Value);

                    }


                    command.Parameters.AddWithValue("@TotalAmountService", totalValueSevice.ToString("#,###,##0.00"));



                    command.Parameters.AddWithValue("@TotalAmountPostage", totalValuePostage.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(Mix))
                    {
                        command.Parameters.AddWithValue("@Mix", Mix);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Mix", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(VolumeMix))
                    {
                        command.Parameters.AddWithValue("@VolumeMix", VolumeMix);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeMix", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateMix))
                    {
                        command.Parameters.AddWithValue("@RateMix", RateMix);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateMix", DBNull.Value);

                    }


                    command.Parameters.AddWithValue("@TotalAmountMix", totalValue_Mix.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(CourierChanges))
                    {
                        command.Parameters.AddWithValue("@CourierChanges", CourierChanges);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@CourierChanges", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeCC))
                    {
                        command.Parameters.AddWithValue("@VolumeCC", VolumeCC);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeCC", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(RateCC))
                    {
                        command.Parameters.AddWithValue("@RateCC", RateCC);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateCC", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(DeliveryCharge))
                    {
                        command.Parameters.AddWithValue("@DeliveryCharge", DeliveryCharge);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DeliveryCharge", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeDC))
                    {
                        command.Parameters.AddWithValue("@VolumeDC", VolumeDC);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeDC", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateDC))
                    {
                        command.Parameters.AddWithValue("@RateDC", RateDC);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateDC", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(Franking))
                    {
                        command.Parameters.AddWithValue("@Franking", Franking);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Franking", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeF))
                    {
                        command.Parameters.AddWithValue("@VolumeF", VolumeF);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeF", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateF))
                    {
                        command.Parameters.AddWithValue("@RateF", RateF);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateF", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(SelfMailer))
                    {
                        command.Parameters.AddWithValue("@SelfMailer", SelfMailer);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SelfMailer", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeS))
                    {
                        command.Parameters.AddWithValue("@VolumeS", VolumeS);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeS", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateS))
                    {
                        command.Parameters.AddWithValue("@RateS", RateS);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateS", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(Others))
                    {
                        command.Parameters.AddWithValue("@Others", Others);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Others", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeO))
                    {
                        command.Parameters.AddWithValue("@VolumeO", VolumeO);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeO", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateO))
                    {
                        command.Parameters.AddWithValue("@RateO", RateO);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateO", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(Imprest))
                    {
                        command.Parameters.AddWithValue("@Imprest", Imprest);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Imprest", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(ValueImprest))
                    {
                        command.Parameters.AddWithValue("@ValueImprest", ValueImprest);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@ValueImprest", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateImprest))
                    {
                        command.Parameters.AddWithValue("@RateImprest", RateImprest);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateImprest", DBNull.Value);

                    }


                    command.Parameters.AddWithValue("@TotalAmountImprest", totalValueI.ToString("#,###,##0.00"));

                    if (!string.IsNullOrEmpty(Others2))
                    {
                        command.Parameters.AddWithValue("@Others2", Others2);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Others2", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeO2))
                    {
                        command.Parameters.AddWithValue("@VolumeO2", VolumeO2);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeO2", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateO2))
                    {
                        command.Parameters.AddWithValue("@RateO2", RateO2);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateO2", DBNull.Value);

                    }

                    command.Parameters.AddWithValue("@TotalAmountO2", totalValueO2.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(Others3))
                    {
                        command.Parameters.AddWithValue("@Others3", Others3);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Others3", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeO3))
                    {
                        command.Parameters.AddWithValue("@VolumeO3", VolumeO3);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeO3", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateO3))
                    {
                        command.Parameters.AddWithValue("@RateO3", RateO3);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateO3", DBNull.Value);

                    }


                    command.Parameters.AddWithValue("@TotalAmountO3", totalValueO3.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(Others4))
                    {
                        command.Parameters.AddWithValue("@Others4", Others4);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Others4", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(VolumeO4))
                    {
                        command.Parameters.AddWithValue("@VolumeO4", VolumeO4);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeO4", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateO4))
                    {
                        command.Parameters.AddWithValue("@RateO4", RateO4);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateO4", DBNull.Value);

                    }



                    command.Parameters.AddWithValue("@TotalAmountO4", totalValueO4.ToString("#,###,##0.00"));

                    if (!string.IsNullOrEmpty(Others5))
                    {
                        command.Parameters.AddWithValue("@Others5", Others5);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Others5", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(VolumeO5))
                    {
                        command.Parameters.AddWithValue("@VolumeO5", VolumeO5);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeO5", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateO5))
                    {
                        command.Parameters.AddWithValue("@RateO5", RateO5);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateO5", DBNull.Value);

                    }



                    command.Parameters.AddWithValue("@TotalAmountO5", totalValueO5.ToString("#,###,##0.00"));


                    command.Parameters.AddWithValue("@TotalAmountO", totalValue.ToString("#,###,##0.00"));


                    command.Parameters.AddWithValue("@TotalAmountCC", totalValueCC.ToString("#,###,##0.00"));


                    command.Parameters.AddWithValue("@TotalAmountDC", totalValueDC.ToString("#,###,##0.00"));


                    command.Parameters.AddWithValue("@TotalAmountF", totalValueF.ToString("#,###,##0.00"));

                    command.Parameters.AddWithValue("@TotalAmountS", totalValueS.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Sst", Sst);
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }






                    if (!string.IsNullOrEmpty(SM_PrintingSM))
                    {
                        command.Parameters.AddWithValue("@SM_PrintingSM", SM_PrintingSM);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_PrintingSM", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(SMPG_Rate))
                    {
                        command.Parameters.AddWithValue("@SMPG_Rate", SMPG_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SMPG_Rate", DBNull.Value);
                    }

                    command.Parameters.AddWithValue("@SMPG_Total", totalValueSMPG.ToString("#,###,##0.00"));





                    if (!string.IsNullOrEmpty(SM_SM_Material))
                    {
                        command.Parameters.AddWithValue("@SM_SM_Material", SM_SM_Material);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_SM_Material", DBNull.Value);
                    }


                    if (!string.IsNullOrEmpty(SMM_Rate))
                    {
                        command.Parameters.AddWithValue("@SMM_Rate", SMM_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SMM_Rate", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@SMM_Total", totalValueSMM.ToString("#,###,##0.00"));






                    if (!string.IsNullOrEmpty(SM_FirstInsert))
                    {
                        command.Parameters.AddWithValue("@SM_FirstInsert", SM_FirstInsert);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_FirstInsert", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(SM_SecondInsert))
                    {
                        command.Parameters.AddWithValue("@SM_SecondInsert", SM_SecondInsert);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_SecondInsert", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_BrochureInsert))
                    {

                        command.Parameters.AddWithValue("@SM_BrochureInsert", SM_BrochureInsert);
                    }
                    else
                    {

                        command.Parameters.AddWithValue("@SM_BrochureInsert", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(SM_MailBelow_5K))
                    {
                        command.Parameters.AddWithValue("@SM_MailBelow_5K", SM_MailBelow_5K);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_MailBelow_5K", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM5_Rate))
                    {
                        command.Parameters.AddWithValue("@SM5_Rate", SM5_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM5_Rate", DBNull.Value);
                    }

                    command.Parameters.AddWithValue("@SM5_Total", totalValueSM5.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(SM_Handling))
                    {
                        command.Parameters.AddWithValue("@SM_Handling", SM_Handling);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_Handling", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SMH_Rate))
                    {
                        command.Parameters.AddWithValue("@SMH_Rate", SMH_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SMH_Rate", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@SMH_Total", totalValueSMH.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(SM_Sealing))
                    {
                        command.Parameters.AddWithValue("@SM_Sealing", SM_Sealing);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_Sealing", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_Tearing))
                    {
                        command.Parameters.AddWithValue("@SM_Tearing", SM_Tearing);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_Tearing", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_Folding))
                    {
                        command.Parameters.AddWithValue("@SM_Folding", SM_Folding);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_Folding", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_Sticking))
                    {
                        command.Parameters.AddWithValue("@SM_Sticking", SM_Sticking);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_Sticking", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_Labelling))
                    {
                        command.Parameters.AddWithValue("@SM_Labelling", SM_Labelling);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_Labelling", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_Matching))
                    {
                        command.Parameters.AddWithValue("@SM_Matching", SM_Matching);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_Matching", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_CDArchiving))
                    {
                        command.Parameters.AddWithValue("@SM_CDArchiving", SM_CDArchiving);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_CDArchiving", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_EnvelopeType))
                    {
                        command.Parameters.AddWithValue("@SM_EnvelopeType", SM_EnvelopeType);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_EnvelopeType", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_EnvelopePrice))
                    {
                        command.Parameters.AddWithValue("@SM_EnvelopePrice", SM_EnvelopePrice);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_EnvelopePrice", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(SM_Paper))
                    {
                        command.Parameters.AddWithValue("@SM_Paper", SM_Paper);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_Paper", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(SM_PaperPrice))
                    {
                        command.Parameters.AddWithValue("@SM_PaperPrice", SM_PaperPrice);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SM_PaperPrice", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobType", "Self Mailer");
                    if (!string.IsNullOrEmpty(LBSM_PrintingSM))
                    {
                        command.Parameters.AddWithValue("@LBSM_PrintingSM", LBSM_PrintingSM);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBSM_PrintingSM", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(LBSM_SM_Material))
                    {
                        command.Parameters.AddWithValue("@LBSM_SM_Material", LBSM_SM_Material);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBSM_SM_Material", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(LBSM_MailBelow_5K))
                    {
                        command.Parameters.AddWithValue("@LBSM_MailBelow_5K", LBSM_MailBelow_5K);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBSM_MailBelow_5K", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(LBSM_Handling))
                    {
                        command.Parameters.AddWithValue("@LBSM_Handling", LBSM_Handling);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBSM_Handling", DBNull.Value);
                    }

                    command.ExecuteNonQuery();
                    cn2.Close();



                    if (!string.IsNullOrEmpty(Postage))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValuePostage.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }
                    }


                    if (!string.IsNullOrEmpty(ServiceChange))

                    {

                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueSevice.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }
                    }





                    if (!string.IsNullOrEmpty(Mix))

                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValue_Mix.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }

                    }

                    if (!string.IsNullOrEmpty(Imprest))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueI.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }

                    }


                    if (!string.IsNullOrEmpty(Others))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValue.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }

                    }


                    if (!string.IsNullOrEmpty(Others2))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueO2.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }

                    }

                    if (!string.IsNullOrEmpty(Others3))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueO3.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }
                    }
                    if (!string.IsNullOrEmpty(Others4))
                    {

                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueO4.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }
                    }
                    if (!string.IsNullOrEmpty(Others5))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueO5.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }
                    }


                }

            }
        }
        else if (set == "")
        {
            if (!string.IsNullOrEmpty(Id))
            {
                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {

                    Guid Idx = Guid.NewGuid();
                    Session["Idx"] = Idx;
                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");


                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,ServiceChange,VolumeService,RateServie,JobInstructionId,CreatedOn,Postage,ValuePostage,RatePostage,TotalAmountService,TotalAmountPostage,Mix,VolumeMix,RateMix,TotalAmountMix,CourierChanges,VolumeCC,RateCC,DeliveryCharge,VolumeDC,RateDC,Franking,VolumeF,RateF,SelfMailer,VolumeS,RateS,Others,VolumeO,RateO,Imprest,ValueImprest,RateImprest,TotalAmountImprest,Others2,VolumeO2 ,RateO2,TotalAmountO2,Others3,VolumeO3,RateO3,TotalAmountO3,Others4,VolumeO4,RateO4,TotalAmountO4,Others5,VolumeO5,RateO5,TotalAmountO5,TotalAmountO,TotalAmountCC,TotalAmountDC,TotalAmountF,TotalAmountS,Sst,Description,MMPPD_Rate, MMPPD_Volume,  MMPPD_Total,  MMPFI_Rate,  MMPFI_Volume,  MMPFI_Total,  MMPSI_Rate,  MMPSI_Volume,  MMPSI_Total,   MMPBI_Rate,  MMPBI_Volume,  MMPBI_Total,MMP5_Rate, MMP5_Volume,  MMP5_Total,  MMPH_Rate,  MMPH_Volume,  MMPH_Total,  MMPS_Rate,  MMPS_Volume,  MMPS_Total,  MMPT_Rate,  MMPT_Volume,  MMPT_Total,  MMPF_Rate,  MMPF_Volume,  MMPF_Total,  MMPST_Rate,  MMPST_Volume,  MMPST_Total, MMPL_Rate, MMPL_Volume,  MMPL_Total,  MMPM_Rate,  MMPM_Volume, MMPM_Total,  MMPCD_Rate,  MMPCD_Volume, MMPCD_Total,  MMPET_Rate,  MMPET_Volume,  MMPET_Total, MMP_Paper , MMPPP_Rate, MMPPP_Volume, MMPPP_Total,JobType,LBMMP_PrintingDuplex,LBMMP_FirstInsert,LBMMP_SecondInsert,LBMMP_InsertingMMP,LBMMP_BrochureInsert,LBMMP_MailBelow_5K,LBMMP_Handling,LBMMP_Sealing,LBMMP_Tearing,LBMMP_Folding,LBMMP_Sticking,LBMMP_Labelling,LBMMP_Matching,LBMMP_CDArchiving)" +
                               "VALUES(@Id,@ServiceChange,@VolumeService,@RateServie,@JobInstructionId,@CreatedOn,@Postage,@ValuePostage,@RatePostage,@TotalAmountService,@TotalAmountPostage,@Mix,@VolumeMix,@RateMix,@TotalAmountMix,@CourierChanges,@VolumeCC,@RateCC,@DeliveryCharge,@VolumeDC,@RateDC,@Franking,@VolumeF,@RateF,@SelfMailer,@VolumeS,@RateS,@Others,@VolumeO,@RateO,@Imprest,@ValueImprest,@RateImprest,@TotalAmountImprest,@Others2,@VolumeO2,@RateO2,@TotalAmountO2,@Others3,@VolumeO3,@RateO3,@TotalAmountO3,@Others4,@VolumeO4,@RateO4,@TotalAmountO4,@Others5,@VolumeO5,@RateO5,@TotalAmountO5,@TotalAmountO,@TotalAmountCC,@TotalAmountDC,@TotalAmountF,@TotalAmountS,@Sst,@Description,@MMPPD_Rate, @MMPPD_Volume,  @MMPPD_Total,  @MMPFI_Rate,  @MMPFI_Volume,  @MMPFI_Total,  @MMPSI_Rate, @MMPSI_Volume, @MMPSI_Total,   @MMPBI_Rate,  @MMPBI_Volume,  @MMPBI_Total,@MMP5_Rate, @MMP5_Volume,  @MMP5_Total,  @MMPH_Rate,  @MMPH_Volume,  @MMPH_Total,  @MMPS_Rate,  @MMPS_Volume,  @MMPS_Total,  @MMPT_Rate,  @MMPT_Volume,  @MMPT_Total, @MMPF_Rate,  @MMPF_Volume,  @MMPF_Total,  @MMPST_Rate,  @MMPST_Volume,  @MMPST_Total, @MMPL_Rate, @MMPL_Volume,  @MMPL_Total,  @MMPM_Rate,  @MMPM_Volume, @MMPM_Total,  @MMPCD_Rate, @MMPCD_Volume, @MMPCD_Total,  @MMPET_Rate,  @MMPET_Volume, @MMPET_Total, @MMP_Paper, @MMPPP_Rate, @MMPPP_Volume,  @MMPPP_Total,@JobType,@LBMMP_PrintingDuplex,@LBMMP_FirstInsert,@LBMMP_SecondInsert,@LBMMP_InsertingMMP,@LBMMP_BrochureInsert,@LBMMP_MailBelow_5K,@LBMMP_Handling,@LBMMP_Sealing,@LBMMP_Tearing,@LBMMP_Folding,@LBMMP_Sticking,@LBMMP_Labelling,@LBMMP_Matching,@LBMMP_CDArchiving)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(ServiceChange))
                    {
                        command.Parameters.AddWithValue("@ServiceChange", ServiceChange);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@ServiceChange", DBNull.Value);


                    }
                    if (!string.IsNullOrEmpty(VolumeService))
                    {

                        command.Parameters.AddWithValue("@VolumeService", VolumeService);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeService", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RateServie))
                    {

                        command.Parameters.AddWithValue("@RateServie", RateServie);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateServie", DBNull.Value);
                    }


                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);

                    if (!string.IsNullOrEmpty(Postage))
                    {
                        command.Parameters.AddWithValue("@Postage", Postage);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Postage", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(ValuePostage))
                    {
                        command.Parameters.AddWithValue("@ValuePostage", ValuePostage);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@ValuePostage", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(RatePostage))
                    {
                        command.Parameters.AddWithValue("@RatePostage", RatePostage);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RatePostage", DBNull.Value);

                    }


                    command.Parameters.AddWithValue("@TotalAmountService", totalValueSevice.ToString("#,###,##0.00"));



                    command.Parameters.AddWithValue("@TotalAmountPostage", totalValuePostage.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(Mix))
                    {
                        command.Parameters.AddWithValue("@Mix", Mix);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Mix", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(VolumeMix))
                    {
                        command.Parameters.AddWithValue("@VolumeMix", VolumeMix);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeMix", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateMix))
                    {
                        command.Parameters.AddWithValue("@RateMix", RateMix);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateMix", DBNull.Value);

                    }


                    command.Parameters.AddWithValue("@TotalAmountMix", totalValue_Mix.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(CourierChanges))
                    {
                        command.Parameters.AddWithValue("@CourierChanges", CourierChanges);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@CourierChanges", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeCC))
                    {
                        command.Parameters.AddWithValue("@VolumeCC", VolumeCC);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeCC", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(RateCC))
                    {
                        command.Parameters.AddWithValue("@RateCC", RateCC);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateCC", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(DeliveryCharge))
                    {
                        command.Parameters.AddWithValue("@DeliveryCharge", DeliveryCharge);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DeliveryCharge", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeDC))
                    {
                        command.Parameters.AddWithValue("@VolumeDC", VolumeDC);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeDC", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateDC))
                    {
                        command.Parameters.AddWithValue("@RateDC", RateDC);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateDC", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(Franking))
                    {
                        command.Parameters.AddWithValue("@Franking", Franking);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Franking", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeF))
                    {
                        command.Parameters.AddWithValue("@VolumeF", VolumeF);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeF", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateF))
                    {
                        command.Parameters.AddWithValue("@RateF", RateF);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateF", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(SelfMailer))
                    {
                        command.Parameters.AddWithValue("@SelfMailer", SelfMailer);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SelfMailer", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeS))
                    {
                        command.Parameters.AddWithValue("@VolumeS", VolumeS);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeS", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateS))
                    {
                        command.Parameters.AddWithValue("@RateS", RateS);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateS", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(Others))
                    {
                        command.Parameters.AddWithValue("@Others", Others);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Others", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeO))
                    {
                        command.Parameters.AddWithValue("@VolumeO", VolumeO);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeO", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateO))
                    {
                        command.Parameters.AddWithValue("@RateO", RateO);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateO", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(Imprest))
                    {
                        command.Parameters.AddWithValue("@Imprest", Imprest);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Imprest", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(ValueImprest))
                    {
                        command.Parameters.AddWithValue("@ValueImprest", ValueImprest);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@ValueImprest", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateImprest))
                    {
                        command.Parameters.AddWithValue("@RateImprest", RateImprest);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateImprest", DBNull.Value);

                    }


                    command.Parameters.AddWithValue("@TotalAmountImprest", totalValueI.ToString("#,###,##0.00"));

                    if (!string.IsNullOrEmpty(Others2))
                    {
                        command.Parameters.AddWithValue("@Others2", Others2);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Others2", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeO2))
                    {
                        command.Parameters.AddWithValue("@VolumeO2", VolumeO2);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeO2", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateO2))
                    {
                        command.Parameters.AddWithValue("@RateO2", RateO2);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateO2", DBNull.Value);

                    }

                    command.Parameters.AddWithValue("@TotalAmountO2", totalValueO2.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(Others3))
                    {
                        command.Parameters.AddWithValue("@Others3", Others3);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Others3", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeO3))
                    {
                        command.Parameters.AddWithValue("@VolumeO3", VolumeO3);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeO3", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateO3))
                    {
                        command.Parameters.AddWithValue("@RateO3", RateO3);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateO3", DBNull.Value);

                    }


                    command.Parameters.AddWithValue("@TotalAmountO3", totalValueO3.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(Others4))
                    {
                        command.Parameters.AddWithValue("@Others4", Others4);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Others4", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(VolumeO4))
                    {
                        command.Parameters.AddWithValue("@VolumeO4", VolumeO4);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeO4", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateO4))
                    {
                        command.Parameters.AddWithValue("@RateO4", RateO4);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateO4", DBNull.Value);

                    }



                    command.Parameters.AddWithValue("@TotalAmountO4", totalValueO4.ToString("#,###,##0.00"));

                    if (!string.IsNullOrEmpty(Others5))
                    {
                        command.Parameters.AddWithValue("@Others5", Others5);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Others5", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(VolumeO5))
                    {
                        command.Parameters.AddWithValue("@VolumeO5", VolumeO5);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeO5", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateO5))
                    {
                        command.Parameters.AddWithValue("@RateO5", RateO5);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateO5", DBNull.Value);

                    }



                    command.Parameters.AddWithValue("@TotalAmountO5", totalValueO5.ToString("#,###,##0.00"));


                    command.Parameters.AddWithValue("@TotalAmountO", totalValue.ToString("#,###,##0.00"));


                    command.Parameters.AddWithValue("@TotalAmountCC", totalValueCC.ToString("#,###,##0.00"));


                    command.Parameters.AddWithValue("@TotalAmountDC", totalValueDC.ToString("#,###,##0.00"));


                    command.Parameters.AddWithValue("@TotalAmountF", totalValueF.ToString("#,###,##0.00"));

                    command.Parameters.AddWithValue("@TotalAmountS", totalValueS.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Sst", Sst);
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMPPD_Rate))
                    {
                        command.Parameters.AddWithValue("@MMPPD_Rate", MMPPD_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPPD_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMPPD_Volume))
                    {
                        command.Parameters.AddWithValue("@MMPPD_Volume", MMP_PrintingDuplex);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPPD_Volume", DBNull.Value);
                    }


                    command.Parameters.AddWithValue("@MMPPD_Total", totalValueMMPPD.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(MMPFI_Rate))
                    {
                        command.Parameters.AddWithValue("@MMPFI_Rate", MMPFI_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPFI_Rate", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(MMPFI_Volume))
                    {
                        command.Parameters.AddWithValue("@MMPFI_Volume", MMPFI_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPFI_Volume", DBNull.Value);
                    }



                    command.Parameters.AddWithValue("@MMPFI_Total", totalValueMMPFI.ToString("#,###,##0.00"));




                    if (!string.IsNullOrEmpty(MMPSI_Rate))
                    {
                        command.Parameters.AddWithValue("@MMPSI_Rate", MMPSI_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPSI_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMPSI_Volume))
                    {
                        command.Parameters.AddWithValue("@MMPSI_Volume", MMPSI_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPSI_Volume", DBNull.Value);
                    }


                    command.Parameters.AddWithValue("@MMPSI_Total", totalValueMMPSI.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(MMPBI_Rate))
                    {
                        command.Parameters.AddWithValue("@MMPBI_Rate", MMPBI_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPBI_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMPBI_Volume))
                    {
                        command.Parameters.AddWithValue("@MMPBI_Volume", MMPBI_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPBI_Volume", DBNull.Value);
                    }


                    command.Parameters.AddWithValue("@MMPBI_Total", totalValueMMPBI.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(MMP5_Rate))
                    {
                        command.Parameters.AddWithValue("@MMP5_Rate", MMP5_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP5_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMP5_Volume))
                    {
                        command.Parameters.AddWithValue("@MMP5_Volume", MMP5_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP5_Volume", DBNull.Value);
                    }


                    command.Parameters.AddWithValue("@MMP5_Total", totalValueMMP5.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(MMPH_Rate))
                    {
                        command.Parameters.AddWithValue("@MMPH_Rate", MMPH_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPH_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMPH_Volume))
                    {
                        command.Parameters.AddWithValue("@MMPH_Volume", MMPH_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPH_Volume", DBNull.Value);
                    }


                    command.Parameters.AddWithValue("@MMPH_Total", totalValueMMPH.ToString("#,###,##0.00"));





                    if (!string.IsNullOrEmpty(MMPS_Rate))
                    {
                        command.Parameters.AddWithValue("@MMPS_Rate", MMPS_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPS_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMPS_Volume))
                    {
                        command.Parameters.AddWithValue("@MMPS_Volume", MMPS_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPS_Volume", DBNull.Value);
                    }

                    command.Parameters.AddWithValue("@MMPS_Total", totalValueMMPS.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(MMPT_Rate))
                    {
                        command.Parameters.AddWithValue("@MMPT_Rate", MMPT_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPT_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMPT_Volume))
                    {
                        command.Parameters.AddWithValue("@MMPT_Volume", MMPT_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPT_Volume", DBNull.Value);
                    }


                    command.Parameters.AddWithValue("@MMPT_Total", totalValueMMPT.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(MMPF_Rate))
                    {
                        command.Parameters.AddWithValue("@MMPF_Rate", MMPF_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPF_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMPF_Volume))
                    {
                        command.Parameters.AddWithValue("@MMPF_Volume", MMPF_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPF_Volume", DBNull.Value);
                    }

                    command.Parameters.AddWithValue("@MMPF_Total", totalValueMMPF.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(MMPST_Rate))
                    {
                        command.Parameters.AddWithValue("@MMPST_Rate", MMPST_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPST_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMPST_Volume))
                    {
                        command.Parameters.AddWithValue("@MMPST_Volume", MMPST_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPST_Volume", DBNull.Value);
                    }

                    command.Parameters.AddWithValue("@MMPST_Total", totalValueMMPST.ToString("#,###,##0.00"));




                    if (!string.IsNullOrEmpty(MMPL_Rate))
                    {
                        command.Parameters.AddWithValue("@MMPL_Rate", MMPL_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPL_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMPL_Volume))
                    {
                        command.Parameters.AddWithValue("@MMPL_Volume", MMPL_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPL_Volume", DBNull.Value);
                    }


                    command.Parameters.AddWithValue("@MMPL_Total", totalValueMMPL.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(MMPM_Rate))
                    {
                        command.Parameters.AddWithValue("@MMPM_Rate", MMPM_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPM_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMPM_Volume))
                    {
                        command.Parameters.AddWithValue("@MMPM_Volume", MMPM_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPM_Volume", DBNull.Value);
                    }


                    command.Parameters.AddWithValue("@MMPM_Total", totalValueMMPM.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(MMPCD_Rate))
                    {
                        command.Parameters.AddWithValue("@MMPCD_Rate", MMPCD_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPCD_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMPCD_Volume))
                    {
                        command.Parameters.AddWithValue("@MMPCD_Volume", MMPCD_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPCD_Volume", DBNull.Value);
                    }


                    command.Parameters.AddWithValue("@MMPCD_Total", totalValueMMPCD.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(MMPET_Rate))
                    {
                        command.Parameters.AddWithValue("@MMPET_Rate", MMPET_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPET_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMPET_Volume))
                    {
                        command.Parameters.AddWithValue("@MMPET_Volume", MMPET_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPET_Volume", DBNull.Value);
                    }

                    command.Parameters.AddWithValue("@MMPET_Total", totalValueMMPET.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(MMP_Paper))
                    {
                        command.Parameters.AddWithValue("@MMP_Paper", MMP_Paper);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMP__Paper", DBNull.Value);
                    }


                    if (!string.IsNullOrEmpty(MMPPP_Rate))
                    {
                        command.Parameters.AddWithValue("@MMPPP_Rate", MMPPP_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPPP_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(MMPPP_Volume))
                    {
                        command.Parameters.AddWithValue("@MMPPP_Volume", MMPPP_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@MMPPP_Volume", DBNull.Value);
                    }




                    command.Parameters.AddWithValue("@MMPPP_Total", totalValueMMPPP.ToString("#,###,##0.00"));


                    command.Parameters.AddWithValue("@JobType", "");

                    if (!string.IsNullOrEmpty(LBMMP_PrintingDuplex))
                    {
                        command.Parameters.AddWithValue("@LBMMP_PrintingDuplex", LBMMP_PrintingDuplex);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBMMP_PrintingDuplex", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(LBMMP_FirstInsert))
                    {
                        command.Parameters.AddWithValue("@LBMMP_FirstInsert", LBMMP_FirstInsert);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBMMP_FirstInsert", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(LBMMP_SecondInsert))
                    {
                        command.Parameters.AddWithValue("@LBMMP_SecondInsert", LBMMP_SecondInsert);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBMMP_SecondInsert", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(LBMMP_SecondInsert))
                    {
                        command.Parameters.AddWithValue("@LBMMP_SecondInsert", LBMMP_SecondInsert);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBMMP_SecondInsert", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(LBMMP_InsertingMMP))
                    {
                        command.Parameters.AddWithValue("@LBMMP_Inserting", LBMMP_InsertingMMP);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBMMP_Inserting", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(LBMMP_InsertingMMP))
                    {
                        command.Parameters.AddWithValue("@LBMMP_Inserting", LBMMP_InsertingMMP);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBMMP_Inserting", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(LBMMP_BrochureInsert))
                    {
                        command.Parameters.AddWithValue("@LBMMP_BrochureInsert", LBMMP_BrochureInsert);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBMMP_BrochureInsert", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(LBMMP_BrochureInsert))
                    {
                        command.Parameters.AddWithValue("@LBMMP_BrochureInsert", LBMMP_BrochureInsert);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBMMP_BrochureInsert", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(LBMMP_MailBelow_5K))
                    {
                        command.Parameters.AddWithValue("@LBMMP_MailBelow_5K", LBMMP_MailBelow_5K);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBMMP_MailBelow_5K", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(LBMMP_Handling))
                    {
                        command.Parameters.AddWithValue("@LBMMP_Handling", LBMMP_Handling);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBMMP_Handling", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(LBMMP_Sealing))
                    {
                        command.Parameters.AddWithValue("@LBMMP_Sealing", LBMMP_Sealing);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBMMP_Sealing", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(LBMMP_Tearing))
                    {
                        command.Parameters.AddWithValue("@LBMMP_Tearing", LBMMP_Tearing);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBMMP_Tearing", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(LBMMP_Folding))
                    {
                        command.Parameters.AddWithValue("@LBMMP_Folding", LBMMP_Folding);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBMMP_Folding", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(LBMMP_Sticking))
                    {
                        command.Parameters.AddWithValue("@LBMMP_Sticking", LBMMP_Sticking);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBMMP_Sticking", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(LBMMP_Labelling))
                    {
                        command.Parameters.AddWithValue("@LBMMP_Labelling", LBMMP_Labelling);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBMMP_Labelling", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(LBMMP_Matching))
                    {
                        command.Parameters.AddWithValue("@LBMMP_Matching", LBMMP_Matching);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBMMP_Matching", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(LBMMP_CDArchiving))
                    {
                        command.Parameters.AddWithValue("@LBMMP_CDArchiving", LBMMP_CDArchiving);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBMMP_CDArchiving", DBNull.Value);
                    }

                    command.ExecuteNonQuery();
                    cn2.Close();




                    if (!string.IsNullOrEmpty(Postage))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValuePostage.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }
                    }


                    if (!string.IsNullOrEmpty(ServiceChange))

                    {

                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueSevice.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }
                    }





                    if (!string.IsNullOrEmpty(Mix))

                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValue_Mix.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }

                    }

                    if (!string.IsNullOrEmpty(Imprest))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueI.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }

                    }


                    if (!string.IsNullOrEmpty(Others))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValue.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }

                    }


                    if (!string.IsNullOrEmpty(Others2))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueO2.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }

                    }

                    if (!string.IsNullOrEmpty(Others3))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueO3.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }
                    }
                    if (!string.IsNullOrEmpty(Others4))
                    {

                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueO4.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }
                    }
                    if (!string.IsNullOrEmpty(Others5))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueO5.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }
                    }




                }

            }
        }
        else if (set == "DCP")
        {
            if (!string.IsNullOrEmpty(Id))
            {

                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {

                    Guid Idx = Guid.NewGuid();
                    Session["Idx"] = Idx;
                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");


                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,ServiceChange,VolumeService,RateServie,JobInstructionId,CreatedOn,Postage,ValuePostage,RatePostage,TotalAmountService,TotalAmountPostage,Mix,VolumeMix,RateMix,TotalAmountMix,CourierChanges,VolumeCC,RateCC,DeliveryCharge,VolumeDC,RateDC,Franking,VolumeF,RateF,SelfMailer,VolumeS,RateS,Others,VolumeO,RateO,Imprest,ValueImprest,RateImprest,TotalAmountImprest,Others2,VolumeO2 ,RateO2,TotalAmountO2,Others3,VolumeO3,RateO3,TotalAmountO3,Others4,VolumeO4,RateO4,TotalAmountO4,Others5,VolumeO5,RateO5,TotalAmountO5,TotalAmountO,TotalAmountCC,TotalAmountDC,TotalAmountF,TotalAmountS,Sst,Description,DCPFC_Volume,DCPFC_Rate,DCPFC_Total,DCPPD_Volume,DCPPD_Rate,DCPPD_Total,  DCPSP_Rate,  DCPSP_Volume,  DCPSP_Total,DCPFI_Rate,  DCPFI_Volume,  DCPFI_Total,  DCPSI_Rate, DCPSI_Volume, DCPSI_Total,DCPBI_Rate,  DCPBI_Volume,  DCPBI_Total, DCP5_Rate,DCP5_Volume, DCP5_Total, DCPH_Rate,  DCPH_Volume,  DCPH_Total,  DCPSL_Rate, DCPSL_Volume,  DCPSL_Total,  DCPT_Rate, DCPT_Volume,  DCPT_Total,DCPF_Rate,  DCPF_Volume,  DCPF_Total,   DCPS_Volume,  DCPS_Total,  DCPL_Rate, DCPL_Volume,  DCPL_Total,  DCPM_Rate,  DCPM_Volume,  DCPM_Total,  DCPCD_Rate,  DCPCD_Volume, DCPCD_Total,DCP_EnvelopeType,DCPET_Rate,  DCPET_Volume,  DCPET_Total, DCP_EnvelopePrice, DCPEP_Rate, DCPEP_Volume,  DCPEP_Total,DCP_Paper,DCPPP_Rate,DCPPP_Volume,DCPPP_Total,JobType,LBDCP_FoldingCharges,LBDCP_SupplyPrintLabel,LBDCP_PrintingDuplex,LBDCP_FirstInsert,LBDCP_SecondInsert,LBDCP_BrochureInsert,LBDCP_MailBelow_5K,LBDCP_Handling,LBDCP_Sealing,LBDCP_Tearing,LBDCP_Folding,LBDCP_Sticking,LBDCP_Labelling,LBDCP_Matching,LBDCP_CDArchiving)" +
                               "VALUES(@Id,@ServiceChange,@VolumeService,@RateServie,@JobInstructionId,@CreatedOn,@Postage,@ValuePostage,@RatePostage,@TotalAmountService,@TotalAmountPostage,@Mix,@VolumeMix,@RateMix,@TotalAmountMix,@CourierChanges,@VolumeCC,@RateCC,@DeliveryCharge,@VolumeDC,@RateDC,@Franking,@VolumeF,@RateF,@SelfMailer,@VolumeS,@RateS,@Others,@VolumeO,@RateO,@Imprest,@ValueImprest,@RateImprest,@TotalAmountImprest,@Others2,@VolumeO2,@RateO2,@TotalAmountO2,@Others3,@VolumeO3,@RateO3,@TotalAmountO3,@Others4,@VolumeO4,@RateO4,@TotalAmountO4,@Others5,@VolumeO5,@RateO5,@TotalAmountO5,@TotalAmountO,@TotalAmountCC,@TotalAmountDC,@TotalAmountF,@TotalAmountS,@Sst,@Description,@DCPFC_Volume,@DCPFC_Rate,@DCPFC_Total,@DCPPD_Volume,@DCPPD_Rate,@DCPPD_Total, @DCPSP_Rate,@DCPSP_Volume,@DCPSP_Total,@DCPFI_Rate,@DCPFI_Volume,@DCPFI_Total,@DCPSI_Rate,@DCPSI_Volume,@DCPSI_Total,@DCPBI_Rate,@DCPBI_Volume,@DCPBI_Total,@DCP5_Rate,@DCP5_Volume,@DCP5_Total,@DCPH_Rate,@DCPH_Volume,@DCPH_Total,@DCPSL_Rate,@DCPSL_Volume,@DCPSL_Total,@DCPT_Rate,@DCPT_Volume,@DCPT_Total,@DCPF_Rate,@DCPF_Volume,@DCPF_Total,@DCPS_Volume,@DCPS_Total,@DCPL_Rate,@DCPL_Volume,@DCPL_Total,@DCPM_Rate,@DCPM_Volume,@DCPM_Total,@DCPCD_Rate,@DCPCD_Volume,@DCPCD_Total,@DCP_EnvelopeType,@DCPET_Rate,@DCPET_Volume,@DCPET_Total,@DCP_EnvelopePrice,@DCPEP_Rate,@DCPEP_Volume,@DCPEP_Total,@DCP_Paper,@DCPPP_Rate,@DCPPP_Volume,@DCPPP_Total,@JobType,@LBDCP_PrintingDuplex,@LBDCP_FirstInsert,@LBDCP_SecondInsert,@LBDCP_BrochureInsert,@LBDCP_MailBelow_5K,@LBDCP_Handling,@LBDCP_Sealing,@LBDCP_Tearing,@LBDCP_Folding,@LBDCP_Sticking,@LBDCP_Labelling,@LBDCP_Matching,@LBDCP_CDArchiving)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(ServiceChange))
                    {
                        command.Parameters.AddWithValue("@ServiceChange", ServiceChange);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@ServiceChange", DBNull.Value);


                    }
                    if (!string.IsNullOrEmpty(VolumeService))
                    {

                        command.Parameters.AddWithValue("@VolumeService", VolumeService);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeService", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RateServie))
                    {

                        command.Parameters.AddWithValue("@RateServie", RateServie);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateServie", DBNull.Value);
                    }


                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);

                    if (!string.IsNullOrEmpty(Postage))
                    {
                        command.Parameters.AddWithValue("@Postage", Postage);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Postage", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(ValuePostage))
                    {
                        command.Parameters.AddWithValue("@ValuePostage", ValuePostage);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@ValuePostage", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(RatePostage))
                    {
                        command.Parameters.AddWithValue("@RatePostage", RatePostage);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RatePostage", DBNull.Value);

                    }


                    command.Parameters.AddWithValue("@TotalAmountService", totalValueSevice.ToString("#,###,##0.00"));



                    command.Parameters.AddWithValue("@TotalAmountPostage", totalValuePostage.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(Mix))
                    {
                        command.Parameters.AddWithValue("@Mix", Mix);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Mix", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(VolumeMix))
                    {
                        command.Parameters.AddWithValue("@VolumeMix", VolumeMix);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeMix", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateMix))
                    {
                        command.Parameters.AddWithValue("@RateMix", RateMix);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateMix", DBNull.Value);

                    }


                    command.Parameters.AddWithValue("@TotalAmountMix", totalValue_Mix.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(CourierChanges))
                    {
                        command.Parameters.AddWithValue("@CourierChanges", CourierChanges);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@CourierChanges", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeCC))
                    {
                        command.Parameters.AddWithValue("@VolumeCC", VolumeCC);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeCC", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(RateCC))
                    {
                        command.Parameters.AddWithValue("@RateCC", RateCC);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateCC", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(DeliveryCharge))
                    {
                        command.Parameters.AddWithValue("@DeliveryCharge", DeliveryCharge);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DeliveryCharge", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeDC))
                    {
                        command.Parameters.AddWithValue("@VolumeDC", VolumeDC);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeDC", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateDC))
                    {
                        command.Parameters.AddWithValue("@RateDC", RateDC);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateDC", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(Franking))
                    {
                        command.Parameters.AddWithValue("@Franking", Franking);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Franking", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeF))
                    {
                        command.Parameters.AddWithValue("@VolumeF", VolumeF);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeF", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateF))
                    {
                        command.Parameters.AddWithValue("@RateF", RateF);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateF", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(SelfMailer))
                    {
                        command.Parameters.AddWithValue("@SelfMailer", SelfMailer);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SelfMailer", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeS))
                    {
                        command.Parameters.AddWithValue("@VolumeS", VolumeS);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeS", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateS))
                    {
                        command.Parameters.AddWithValue("@RateS", RateS);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateS", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(Others))
                    {
                        command.Parameters.AddWithValue("@Others", Others);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Others", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeO))
                    {
                        command.Parameters.AddWithValue("@VolumeO", VolumeO);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeO", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateO))
                    {
                        command.Parameters.AddWithValue("@RateO", RateO);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateO", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(Imprest))
                    {
                        command.Parameters.AddWithValue("@Imprest", Imprest);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Imprest", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(ValueImprest))
                    {
                        command.Parameters.AddWithValue("@ValueImprest", ValueImprest);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@ValueImprest", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateImprest))
                    {
                        command.Parameters.AddWithValue("@RateImprest", RateImprest);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateImprest", DBNull.Value);

                    }


                    command.Parameters.AddWithValue("@TotalAmountImprest", totalValueI.ToString("#,###,##0.00"));

                    if (!string.IsNullOrEmpty(Others2))
                    {
                        command.Parameters.AddWithValue("@Others2", Others2);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Others2", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeO2))
                    {
                        command.Parameters.AddWithValue("@VolumeO2", VolumeO2);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeO2", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateO2))
                    {
                        command.Parameters.AddWithValue("@RateO2", RateO2);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateO2", DBNull.Value);

                    }

                    command.Parameters.AddWithValue("@TotalAmountO2", totalValueO2.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(Others3))
                    {
                        command.Parameters.AddWithValue("@Others3", Others3);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Others3", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeO3))
                    {
                        command.Parameters.AddWithValue("@VolumeO3", VolumeO3);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeO3", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateO3))
                    {
                        command.Parameters.AddWithValue("@RateO3", RateO3);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateO3", DBNull.Value);

                    }


                    command.Parameters.AddWithValue("@TotalAmountO3", totalValueO3.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(Others4))
                    {
                        command.Parameters.AddWithValue("@Others4", Others4);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Others4", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(VolumeO4))
                    {
                        command.Parameters.AddWithValue("@VolumeO4", VolumeO4);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeO4", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateO4))
                    {
                        command.Parameters.AddWithValue("@RateO4", RateO4);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateO4", DBNull.Value);

                    }



                    command.Parameters.AddWithValue("@TotalAmountO4", totalValueO4.ToString("#,###,##0.00"));

                    if (!string.IsNullOrEmpty(Others5))
                    {
                        command.Parameters.AddWithValue("@Others5", Others5);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Others5", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(VolumeO5))
                    {
                        command.Parameters.AddWithValue("@VolumeO5", VolumeO5);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeO5", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateO5))
                    {
                        command.Parameters.AddWithValue("@RateO5", RateO5);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateO5", DBNull.Value);

                    }



                    command.Parameters.AddWithValue("@TotalAmountO5", totalValueO5.ToString("#,###,##0.00"));


                    command.Parameters.AddWithValue("@TotalAmountO", totalValue.ToString("#,###,##0.00"));


                    command.Parameters.AddWithValue("@TotalAmountCC", totalValueCC.ToString("#,###,##0.00"));


                    command.Parameters.AddWithValue("@TotalAmountDC", totalValueDC.ToString("#,###,##0.00"));


                    command.Parameters.AddWithValue("@TotalAmountF", totalValueF.ToString("#,###,##0.00"));

                    command.Parameters.AddWithValue("@TotalAmountS", totalValueS.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Sst", Sst);
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(DCPFC_Volume))
                    {
                        command.Parameters.AddWithValue("@DCPFC_Volume", DCPFC_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCPFC_Volume", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCPFC_Rate))
                    {
                        command.Parameters.AddWithValue("@DCPFC_Rate", DCPFC_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCPFC_Rate", DBNull.Value);
                    }

                    command.Parameters.AddWithValue("@DCPFC_Total", totalValueDCPFC.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(DCPSP_Volume))
                    {
                        command.Parameters.AddWithValue("@DCPSP_Volume", DCPSP_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCPSP_Volume", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(DCPSP_Rate))
                    {
                        command.Parameters.AddWithValue("@DCPSP_Rate", DCPSP_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("DCPSP_Rate", DBNull.Value);
                    }

                    command.Parameters.AddWithValue("@DCPSP_Total", totalValueDCPSP.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(DCPPD_Volume))
                    {
                        command.Parameters.AddWithValue("@DCPPD_Volume", DCPPD_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCPPD_Volume", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(DCPPD_Rate))
                    {
                        command.Parameters.AddWithValue("@DCPPD_Rate", DCPPD_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("DCPPD_Rate", DBNull.Value);
                    }

                    command.Parameters.AddWithValue("@DCPPD_Total", totalValueDCPPD.ToString("#,###,##0.00"));




                    if (!string.IsNullOrEmpty(DCPFI_Rate))
                    {
                        command.Parameters.AddWithValue("@DCPFI_Rate", DCPFI_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("DCPFI_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCPFI_Volume))
                    {
                        command.Parameters.AddWithValue("@DCPFI_Volume", DCPFI_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCPFI_Volume", DBNull.Value);
                    }



                    command.Parameters.AddWithValue("@DCPFI_Total", totalValueDCPFI.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(DCPSI_Rate))
                    {
                        command.Parameters.AddWithValue("@DCPSI_Rate", DCPSI_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("DCPSI_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCPSI_Volume))
                    {
                        command.Parameters.AddWithValue("@DCPSI_Volume", DCPSI_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCPSI_Volume", DBNull.Value);
                    }




                    command.Parameters.AddWithValue("@DCPSI_Total", totalValueDCPSI.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(DCPBI_Rate))
                    {
                        command.Parameters.AddWithValue("@DCPBI_Rate", DCPBI_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("DCPBI_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCPBI_Volume))
                    {
                        command.Parameters.AddWithValue("@DCPBI_Volume", DCPBI_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCPBI_Volume", DBNull.Value);
                    }




                    command.Parameters.AddWithValue("@DCPBI_Total", totalValueDCPBI.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(DCP5_Rate))
                    {
                        command.Parameters.AddWithValue("@DCP5_Rate", DCP5_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("DCP5_Rate", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(DCP5_Volume))
                    {
                        command.Parameters.AddWithValue("@DCP5_Volume", DCP5_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("DCP5_Volume", DBNull.Value);
                    }



                    command.Parameters.AddWithValue("@DCP5_Total", totalValueDCP5.ToString("#,###,##0.00"));




                    if (!string.IsNullOrEmpty(DCPH_Rate))
                    {
                        command.Parameters.AddWithValue("@DCPH_Rate", DCPH_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("DCPH_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCPH_Volume))
                    {
                        command.Parameters.AddWithValue("@DCPH_Volume", DCPH_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCPH_Volume", DBNull.Value);
                    }




                    command.Parameters.AddWithValue("@DCPH_Total", totalValueDCPH.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(DCPSL_Rate))
                    {
                        command.Parameters.AddWithValue("@DCPSL_Rate", DCPSL_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("DCPSL_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCPSL_Volume))
                    {
                        command.Parameters.AddWithValue("@DCPSL_Volume", DCPSL_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCPSL_Volume", DBNull.Value);
                    }



                    command.Parameters.AddWithValue("@DCPSL_Total", totalValueDCPSL.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(DCPT_Rate))
                    {
                        command.Parameters.AddWithValue("@DCPT_Rate", DCPT_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("DCPT_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCPT_Volume))
                    {
                        command.Parameters.AddWithValue("@DCPT_Volume", DCPT_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCPT_Volume", DBNull.Value);
                    }




                    command.Parameters.AddWithValue("@DCPT_Total", totalValueDCPT.ToString("#,###,##0.00"));




                    if (!string.IsNullOrEmpty(DCPF_Rate))
                    {
                        command.Parameters.AddWithValue("@DCPF_Rate", DCPF_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("DCPF_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCPF_Volume))
                    {
                        command.Parameters.AddWithValue("@DCPF_Volume", DCPF_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCPF_Volume", DBNull.Value);
                    }




                    command.Parameters.AddWithValue("@DCPF_Total", totalValueDCPF.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(DCPS_Rate))
                    {
                        command.Parameters.AddWithValue("@DCPS_Rate", DCPS_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("DCPS_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCPS_Volume))
                    {
                        command.Parameters.AddWithValue("@DCPS_Volume", DCPS_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCPS_Volume", DBNull.Value);
                    }



                    command.Parameters.AddWithValue("@DCPS_Total", totalValueDCPS.ToString("#,###,##0.00"));




                    if (!string.IsNullOrEmpty(DCPL_Rate))
                    {
                        command.Parameters.AddWithValue("@DCPL_Rate", DCPL_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("DCPL_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCPL_Volume))
                    {
                        command.Parameters.AddWithValue("@DCPL_Volume", DCPL_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCPL_Volume", DBNull.Value);
                    }



                    command.Parameters.AddWithValue("@DCPL_Total", totalValueDCPL.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(DCPM_Rate))
                    {
                        command.Parameters.AddWithValue("@DCPM_Rate", DCPM_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("DCPM_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCPM_Volume))
                    {
                        command.Parameters.AddWithValue("@DCPM_Volume", DCPM_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCPM_Volume", DBNull.Value);
                    }



                    command.Parameters.AddWithValue("@DCPM_Total", totalValueDCPM.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(DCPCD_Rate))
                    {
                        command.Parameters.AddWithValue("@DCPCD_Rate", DCPCD_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("DCPCD_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCPCD_Volume))
                    {
                        command.Parameters.AddWithValue("@DCPCD_Volume", DCPCD_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCPCD_Volume", DBNull.Value);
                    }



                    command.Parameters.AddWithValue("@DCPCD_Total", totalValueDCPCD.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(DCP_EnvelopeType))
                    {

                        command.Parameters.AddWithValue("@DCP_EnvelopeType", DCP_EnvelopeType);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_EnvelopeType", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(DCPET_Rate))
                    {
                        command.Parameters.AddWithValue("@DCPET_Rate", DCPET_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCPET_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(DCPET_Volume))
                    {
                        command.Parameters.AddWithValue("@DCPET_Volume", DCPET_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCPET_Volume", DBNull.Value);

                    }


                    command.Parameters.AddWithValue("@DCPET_Total", totalValueDCPET.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(DCP_EnvelopePrice))
                    {
                        command.Parameters.AddWithValue("@DCP_EnvelopePrice", DCP_EnvelopePrice);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_EnvelopePrice", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(DCPEP_Rate))
                    {
                        command.Parameters.AddWithValue("@DCPEP_Rate", DCPEP_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("DCPEP_Rate", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(DCPEP_Volume))
                    {
                        command.Parameters.AddWithValue("@DCPEP_Volume", DCPEP_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("DCPEP_Volume", DBNull.Value);
                    }



                    command.Parameters.AddWithValue("@DCPEP_Total", totalValueDCPEP.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(DCP_Paper))
                    {
                        command.Parameters.AddWithValue("@DCP_Paper", DCP_Paper);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCP_Paper", DBNull.Value);
                    }


                    if (!string.IsNullOrEmpty(DCPPP_Rate))
                    {

                        command.Parameters.AddWithValue("@DCPPP_Rate", DCPPP_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCPPP_Rate", DBNull.Value);



                    }
                    if (!string.IsNullOrEmpty(DCPPP_Volume))
                    {

                        command.Parameters.AddWithValue("@DCPPP_Volume", DCPPP_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DCPPP_Volume", DBNull.Value);



                    }

                    command.Parameters.AddWithValue("@DCPPP_Total", totalValueDCPPP.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@JobType", "DCP");
                    if (!string.IsNullOrEmpty(LBDCP_FoldingCharges))
                    {

                        command.Parameters.AddWithValue("@LBDCP_FoldingCharges", LBDCP_FoldingCharges);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBDCP_FoldingCharges", DBNull.Value);


                    }
                    if (!string.IsNullOrEmpty(LBDCP_SupplyPrintLabel))
                    {

                        command.Parameters.AddWithValue("@LBDCP_SupplyPrintLabel", LBDCP_SupplyPrintLabel);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBDCP_SupplyPrintLabel", DBNull.Value);


                    }
                    if (!string.IsNullOrEmpty(LBDCP_PrintingDuplex))
                    {

                        command.Parameters.AddWithValue("@LBDCP_PrintingDuplex", LBDCP_PrintingDuplex);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBDCP_PrintingDuplex", DBNull.Value);


                    }
                    if (!string.IsNullOrEmpty(LBDCP_FirstInsert))
                    {

                        command.Parameters.AddWithValue("@LBDCP_FirstInsert", LBDCP_FirstInsert);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBDCP_FirstInsert", DBNull.Value);


                    }
                    if (!string.IsNullOrEmpty(LBDCP_SecondInsert))
                    {

                        command.Parameters.AddWithValue("@LBDCP_SecondInsert", LBDCP_SecondInsert);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBDCP_SecondInsert", DBNull.Value);


                    }
                    if (!string.IsNullOrEmpty(LBDCP_BrochureInsert))
                    {

                        command.Parameters.AddWithValue("@LBDCP_BrochureInsert", LBDCP_BrochureInsert);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBDCP_BrochureInsert", DBNull.Value);


                    }
                    if (!string.IsNullOrEmpty(LBDCP_MailBelow_5K))
                    {

                        command.Parameters.AddWithValue("@LBDCP_MailBelow_5K", LBDCP_MailBelow_5K);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBDCP_MailBelow_5K", DBNull.Value);


                    }
                    if (!string.IsNullOrEmpty(LBDCP_Handling))
                    {

                        command.Parameters.AddWithValue("@LBDCP_Handling", LBDCP_Handling);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBDCP_Handling", DBNull.Value);


                    }
                    if (!string.IsNullOrEmpty(LBDCP_Sealing))
                    {

                        command.Parameters.AddWithValue("@LBDCP_Sealing", LBDCP_Sealing);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBDCP_Sealing", DBNull.Value);


                    }
                    if (!string.IsNullOrEmpty(LBDCP_Tearing))
                    {

                        command.Parameters.AddWithValue("@LBDCP_Tearing", LBDCP_Tearing);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBDCP_Tearing", DBNull.Value);


                    }
                    if (!string.IsNullOrEmpty(LBDCP_Folding))
                    {

                        command.Parameters.AddWithValue("@LBDCP_Folding", LBDCP_Folding);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBDCP_Folding", DBNull.Value);


                    }

                    if (!string.IsNullOrEmpty(LBDCP_Sticking))
                    {

                        command.Parameters.AddWithValue("@LBDCP_Sticking", LBDCP_Sticking);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBDCP_Sticking", DBNull.Value);


                    }

                    if (!string.IsNullOrEmpty(LBDCP_Labelling))
                    {

                        command.Parameters.AddWithValue("@LBDCP_Labelling", LBDCP_Labelling);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBDCP_Labelling", DBNull.Value);


                    }
                    if (!string.IsNullOrEmpty(LBDCP_Matching))
                    {

                        command.Parameters.AddWithValue("@LBDCP_Matching", LBDCP_Matching);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBDCP_Matching", DBNull.Value);


                    }
                    if (!string.IsNullOrEmpty(LBDCP_CDArchiving))
                    {

                        command.Parameters.AddWithValue("@LBDCP_CDArchiving", LBDCP_CDArchiving);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBDCP_CDArchiving", DBNull.Value);


                    }
                    command.ExecuteNonQuery();
                    cn2.Close();





                    if (!string.IsNullOrEmpty(Postage))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValuePostage.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }
                    }


                    if (!string.IsNullOrEmpty(ServiceChange))

                    {

                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueSevice.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }
                    }





                    if (!string.IsNullOrEmpty(Mix))

                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValue_Mix.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }

                    }

                    if (!string.IsNullOrEmpty(Imprest))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueI.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }

                    }


                    if (!string.IsNullOrEmpty(Others))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValue.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }

                    }


                    if (!string.IsNullOrEmpty(Others2))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueO2.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }

                    }

                    if (!string.IsNullOrEmpty(Others3))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueO3.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }
                    }
                    if (!string.IsNullOrEmpty(Others4))
                    {

                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueO4.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }
                    }
                    if (!string.IsNullOrEmpty(Others5))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueO5.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }
                    }


                }

            }
        }
        else if (set == "RegisterMail")
        {
            if (!string.IsNullOrEmpty(Id))
            {


                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {

                    Guid Idx = Guid.NewGuid();
                    Session["Idx"] = Idx;
                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");


                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,ServiceChange,VolumeService,RateServie,JobInstructionId,CreatedOn,Postage,ValuePostage,RatePostage,TotalAmountService,TotalAmountPostage,Mix,VolumeMix,RateMix,TotalAmountMix,CourierChanges,VolumeCC,RateCC,DeliveryCharge,VolumeDC,RateDC,Franking,VolumeF,RateF,SelfMailer,VolumeS,RateS,Others,VolumeO,RateO,Imprest,ValueImprest,RateImprest,TotalAmountImprest,Others2,VolumeO2 ,RateO2,TotalAmountO2,Others3,VolumeO3,RateO3,TotalAmountO3,Others4,VolumeO4,RateO4,TotalAmountO4,Others5,VolumeO5,RateO5,TotalAmountO5,TotalAmountO,TotalAmountCC,TotalAmountDC,TotalAmountF,TotalAmountS,Sst,Description, JobType ,  RMPT_Rate,  RMPT_Volume,  RMPT_Total,  RMS_Rate,  RMS_Volume,  RMS_Total, RM5_Rate,  RM5_Volume, RM5_Total,  RMH_Rate,  RMH_Volume,  RMH_Total,  RML_Rate,  RML_Volume,  RML_Total, RMP_Rate, RMP_Volume, RMP_Total,  RMPP_Rate,  RMPP_Volume, RMPP_Total,LBRM_Printing,LBRM_Selfmailer,LBRM_MailBelow_5K,LBRM_Handling,LBRM_LabellingRegsterMails)" +
                               "VALUES(@Id,@ServiceChange,@VolumeService,@RateServie,@JobInstructionId,@CreatedOn,@Postage,@ValuePostage,@RatePostage,@TotalAmountService,@TotalAmountPostage,@Mix,@VolumeMix,@RateMix,@TotalAmountMix,@CourierChanges,@VolumeCC,@RateCC,@DeliveryCharge,@VolumeDC,@RateDC,@Franking,@VolumeF,@RateF,@SelfMailer,@VolumeS,@RateS,@Others,@VolumeO,@RateO,@Imprest,@ValueImprest,@RateImprest,@TotalAmountImprest,@Others2,@VolumeO2,@RateO2,@TotalAmountO2,@Others3,@VolumeO3,@RateO3,@TotalAmountO3,@Others4,@VolumeO4,@RateO4,@TotalAmountO4,@Others5,@VolumeO5,@RateO5,@TotalAmountO5,@TotalAmountO,@TotalAmountCC,@TotalAmountDC,@TotalAmountF,@TotalAmountS,@Sst,@Description,@JobType, @RMPT_Rate,  @RMPT_Volume,  @RMPT_Total,  @RMS_Rate,  @RMS_Volume,  @RMS_Total, @RM5_Rate,  @RM5_Volume, @RM5_Total,  @RMH_Rate,  @RMH_Volume,  @RMH_Total,  @RML_Rate,  @RML_Volume,  @RML_Total, @RMP_Rate, @RMP_Volume, @RMP_Total,  @RMPP_Rate,  @RMPP_Volume, @RMPP_Total,@LBRM_Printing,@LBRM_Selfmailer,@LBRM_MailBelow_5K,@LBRM_Handling,@LBRM_LabellingRegsterMails)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(ServiceChange))
                    {
                        command.Parameters.AddWithValue("@ServiceChange", ServiceChange);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@ServiceChange", DBNull.Value);


                    }
                    if (!string.IsNullOrEmpty(VolumeService))
                    {

                        command.Parameters.AddWithValue("@VolumeService", VolumeService);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeService", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RateServie))
                    {

                        command.Parameters.AddWithValue("@RateServie", RateServie);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateServie", DBNull.Value);
                    }


                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);

                    if (!string.IsNullOrEmpty(Postage))
                    {
                        command.Parameters.AddWithValue("@Postage", Postage);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Postage", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(ValuePostage))
                    {
                        command.Parameters.AddWithValue("@ValuePostage", ValuePostage);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@ValuePostage", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(RatePostage))
                    {
                        command.Parameters.AddWithValue("@RatePostage", RatePostage);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RatePostage", DBNull.Value);

                    }


                    command.Parameters.AddWithValue("@TotalAmountService", totalValueSevice.ToString("#,###,##0.00"));



                    command.Parameters.AddWithValue("@TotalAmountPostage", totalValuePostage.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(Mix))
                    {
                        command.Parameters.AddWithValue("@Mix", Mix);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Mix", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(VolumeMix))
                    {
                        command.Parameters.AddWithValue("@VolumeMix", VolumeMix);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeMix", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateMix))
                    {
                        command.Parameters.AddWithValue("@RateMix", RateMix);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateMix", DBNull.Value);

                    }


                    command.Parameters.AddWithValue("@TotalAmountMix", totalValue_Mix.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(CourierChanges))
                    {
                        command.Parameters.AddWithValue("@CourierChanges", CourierChanges);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@CourierChanges", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeCC))
                    {
                        command.Parameters.AddWithValue("@VolumeCC", VolumeCC);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeCC", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(RateCC))
                    {
                        command.Parameters.AddWithValue("@RateCC", RateCC);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateCC", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(DeliveryCharge))
                    {
                        command.Parameters.AddWithValue("@DeliveryCharge", DeliveryCharge);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@DeliveryCharge", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeDC))
                    {
                        command.Parameters.AddWithValue("@VolumeDC", VolumeDC);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeDC", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateDC))
                    {
                        command.Parameters.AddWithValue("@RateDC", RateDC);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateDC", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(Franking))
                    {
                        command.Parameters.AddWithValue("@Franking", Franking);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Franking", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeF))
                    {
                        command.Parameters.AddWithValue("@VolumeF", VolumeF);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeF", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateF))
                    {
                        command.Parameters.AddWithValue("@RateF", RateF);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateF", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(SelfMailer))
                    {
                        command.Parameters.AddWithValue("@SelfMailer", SelfMailer);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@SelfMailer", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeS))
                    {
                        command.Parameters.AddWithValue("@VolumeS", VolumeS);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeS", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateS))
                    {
                        command.Parameters.AddWithValue("@RateS", RateS);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateS", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(Others))
                    {
                        command.Parameters.AddWithValue("@Others", Others);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Others", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeO))
                    {
                        command.Parameters.AddWithValue("@VolumeO", VolumeO);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeO", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateO))
                    {
                        command.Parameters.AddWithValue("@RateO", RateO);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateO", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(Imprest))
                    {
                        command.Parameters.AddWithValue("@Imprest", Imprest);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Imprest", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(ValueImprest))
                    {
                        command.Parameters.AddWithValue("@ValueImprest", ValueImprest);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@ValueImprest", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateImprest))
                    {
                        command.Parameters.AddWithValue("@RateImprest", RateImprest);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateImprest", DBNull.Value);

                    }


                    command.Parameters.AddWithValue("@TotalAmountImprest", totalValueI.ToString("#,###,##0.00"));

                    if (!string.IsNullOrEmpty(Others2))
                    {
                        command.Parameters.AddWithValue("@Others2", Others2);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Others2", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeO2))
                    {
                        command.Parameters.AddWithValue("@VolumeO2", VolumeO2);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeO2", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateO2))
                    {
                        command.Parameters.AddWithValue("@RateO2", RateO2);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateO2", DBNull.Value);

                    }

                    command.Parameters.AddWithValue("@TotalAmountO2", totalValueO2.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(Others3))
                    {
                        command.Parameters.AddWithValue("@Others3", Others3);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Others3", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(VolumeO3))
                    {
                        command.Parameters.AddWithValue("@VolumeO3", VolumeO3);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeO3", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateO3))
                    {
                        command.Parameters.AddWithValue("@RateO3", RateO3);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateO3", DBNull.Value);

                    }


                    command.Parameters.AddWithValue("@TotalAmountO3", totalValueO3.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(Others4))
                    {
                        command.Parameters.AddWithValue("@Others4", Others4);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Others4", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(VolumeO4))
                    {
                        command.Parameters.AddWithValue("@VolumeO4", VolumeO4);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeO4", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateO4))
                    {
                        command.Parameters.AddWithValue("@RateO4", RateO4);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateO4", DBNull.Value);

                    }


                    command.Parameters.AddWithValue("@TotalAmountO4", totalValueO4.ToString("#,###,##0.00"));

                    if (!string.IsNullOrEmpty(Others5))
                    {
                        command.Parameters.AddWithValue("@Others5", Others5);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Others5", DBNull.Value);

                    }

                    if (!string.IsNullOrEmpty(VolumeO5))
                    {
                        command.Parameters.AddWithValue("@VolumeO5", VolumeO5);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@VolumeO5", DBNull.Value);

                    }
                    if (!string.IsNullOrEmpty(RateO5))
                    {
                        command.Parameters.AddWithValue("@RateO5", RateO5);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RateO5", DBNull.Value);

                    }



                    command.Parameters.AddWithValue("@TotalAmountO5", totalValueO5.ToString("#,###,##0.00"));


                    command.Parameters.AddWithValue("@TotalAmountO", totalValue.ToString("#,###,##0.00"));


                    command.Parameters.AddWithValue("@TotalAmountCC", totalValueCC.ToString("#,###,##0.00"));


                    command.Parameters.AddWithValue("@TotalAmountDC", totalValueDC.ToString("#,###,##0.00"));


                    command.Parameters.AddWithValue("@TotalAmountF", totalValueF.ToString("#,###,##0.00"));

                    command.Parameters.AddWithValue("@TotalAmountS", totalValueS.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Sst", Sst);
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobType", "RegisterMail");




                    if (!string.IsNullOrEmpty(RMPT_Rate))
                    {
                        command.Parameters.AddWithValue("@RMPT_Rate", RMPT_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("RMPT_Rate", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(RMPT_Volume))
                    {
                        command.Parameters.AddWithValue("@RMPT_Volume", RMPT_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("RMPT_Volume", DBNull.Value);
                    }


                    command.Parameters.AddWithValue("@RMPT_Total", totalValueRMPT.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(RMS_Rate))
                    {
                        command.Parameters.AddWithValue("@RMS_Rate", RMS_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("RMS_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RMS_Volume))
                    {
                        command.Parameters.AddWithValue("@RMS_Volume", RMS_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RMS_Volume", DBNull.Value);
                    }

                    command.Parameters.AddWithValue("@RMS_Total", totalValueRMS.ToString("#,###,##0.00"));

                    if (!string.IsNullOrEmpty(RM_MailBelow_5K))
                    {
                        command.Parameters.AddWithValue("@RM_MailBelow_5K", RM_MailBelow_5K);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM_MailBelow_5K", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RM5_Rate))
                    {
                        command.Parameters.AddWithValue("@RM5_Rate", RM5_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("RM5_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RM5_Volume))
                    {
                        command.Parameters.AddWithValue("@RM5_Volume", RM5_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RM5_Volume", DBNull.Value);
                    }

                    command.Parameters.AddWithValue("@RM5_Total", totalValueRM5.ToString("#,###,##0.00"));


                    if (!string.IsNullOrEmpty(RM_LabellingRegsterMails))
                    {
                        command.Parameters.AddWithValue("@RMH_Rate", RM_LabellingRegsterMails);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("RMH_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RMH_Volume))
                    {
                        command.Parameters.AddWithValue("@RMH_Volume", RMH_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RMH_Volume", DBNull.Value);
                    }

                    command.Parameters.AddWithValue("@RMH_Total", totalValueRMH.ToString("#,###,##0.00"));






                    if (!string.IsNullOrEmpty(RML_Rate))
                    {
                        command.Parameters.AddWithValue("@RML_Rate", RML_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("RML_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RML_Volume))
                    {
                        command.Parameters.AddWithValue("@RML_Volume", RML_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RML_Volume", DBNull.Value);
                    }

                    command.Parameters.AddWithValue("@RML_Total", totalValueRML.ToString("#,###,##0.00"));




                    if (!string.IsNullOrEmpty(RMP_Rate))
                    {
                        command.Parameters.AddWithValue("@RMP_Rate", RMP_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("RMP_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RMP_Volume))
                    {
                        command.Parameters.AddWithValue("@RMP_Volume", RML_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RMP_Volume", DBNull.Value);
                    }


                    command.Parameters.AddWithValue("@RMP_Total", totalValueRMP.ToString("#,###,##0.00"));



                    if (!string.IsNullOrEmpty(RMPP_Rate))
                    {
                        command.Parameters.AddWithValue("@RMPP_Rate", RMPP_Rate);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("RMPP_Rate", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(RMPP_Volume))
                    {
                        command.Parameters.AddWithValue("@RMPP_Volume", RMPP_Volume);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@RMPP_Volume", DBNull.Value);
                    }


                    command.Parameters.AddWithValue("@RMPP_Total", totalValueRMPP.ToString("#,###,##0.00"));
                    if (!string.IsNullOrEmpty(LBRM_Printing))
                    {
                        command.Parameters.AddWithValue("@LBRM_Printing", LBRM_Printing);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBRM_Printing", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(LBRM_Selfmailer))
                    {
                        command.Parameters.AddWithValue("@LBRM_Selfmailer", LBRM_Selfmailer);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBRM_Selfmailer", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(LBRM_MailBelow_5K))
                    {
                        command.Parameters.AddWithValue("@LBRM_MailBelow_5K", LBRM_MailBelow_5K);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBRM_MailBelow_5K", DBNull.Value);
                    }

                    if (!string.IsNullOrEmpty(LBRM_Handling))
                    {
                        command.Parameters.AddWithValue("@LBRM_Handling", LBRM_Handling);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBRM_Handling", DBNull.Value);
                    }
                    if (!string.IsNullOrEmpty(LBRM_LabellingRegsterMails))
                    {
                        command.Parameters.AddWithValue("@LBRM_LabellingRegsterMails", LBRM_LabellingRegsterMails);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@LBRM_LabellingRegsterMails", DBNull.Value);
                    }
                    command.ExecuteNonQuery();
                    cn2.Close();




                    if (!string.IsNullOrEmpty(Postage))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValuePostage.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }
                    }


                    if (!string.IsNullOrEmpty(ServiceChange))

                    {

                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueSevice.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }
                    }





                    if (!string.IsNullOrEmpty(Mix))

                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValue_Mix.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }

                    }

                    if (!string.IsNullOrEmpty(Imprest))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueI.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }

                    }


                    if (!string.IsNullOrEmpty(Others))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValue.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }

                    }


                    if (!string.IsNullOrEmpty(Others2))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueO2.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }

                    }

                    if (!string.IsNullOrEmpty(Others3))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueO3.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }
                    }
                    if (!string.IsNullOrEmpty(Others4))
                    {

                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueO4.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }
                    }
                    if (!string.IsNullOrEmpty(Others5))
                    {
                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {


                            cn3.Open();

                            SqlCommand command3;
                            command3 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblGrandTotal] (Id,GrandTotal,JobInstructionId) " +
                                       "VALUES(@Id,@GrandTotal,@JobInstructionId)", cn3);
                            command3.Parameters.AddWithValue("@Id", Idx);
                            command3.Parameters.AddWithValue("@GrandTotal", totalValueO5.ToString("#,###,##0.00"));
                            command3.Parameters.AddWithValue("@JobInstructionId", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();

                            cn3.Open();

                        }
                    }






                }





            }

        }

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT Id, JobName, PrintingDuplex, Inserting1,   
                                               Inserting2, Inserting3, Inserting4, BrochureInsert, MailBelow_5K, Handling, Sealing,
                                               Tearing, Folding, Sticking, Labelling, Matching, CDArchiving, Npc,EnvelopeType,
                                               EnvelopePrice, Paper, PaperPrice, SM_PrintingSM, SM_SM_Material, SM_FirstInsert, SM_SecondInsert,
                                               SM_BrochureInsert, SM_MailBelow_5K, SM_Handling, SM_Sealing, SM_Tearing, SM_Folding,
                                               SM_Sticking, SM_Labelling, SM_Matching, SM_CDArchiving, SM_EnvelopeType, SM_EnvelopePrice,
                                               SM_Paper, SM_PaperPrice, MMP_PrintingDuplex, MMP_FirstInsert, MMP_SecondInsert,
                                               MMP_InsertingMMP, MMP_BrochureInsert, MMP_MailBelow_5K, MMP_Handling, MMP_Sealing, MMP_Tearing, 
                                               MMP_Folding, MMP_Sticking, MMP_Labelling, MMP_Matching, MMP_CDArchiving, MMP_EnvelopeType,  
                                               MMP_EnvelopePrice, MMP_Paper, MMP_PaperPrice, DCP_FoldingCharges, DCP_SupplyPrintLabel, 
                                               DCP_PrintingDuplex, DCP_FirstInsert, DCP_SecondInsert, DCP_BrochureInsert, DCP_MailBelow_5K, DCP_Handling, 
                                               DCP_Sealing, DCP_Tearing, DCP_Folding, DCP_Sticking, DCP_Labelling, DCP_Matching, DCP_CDArchiving, DCP_EnvelopeType,
                                               DCP_EnvelopePrice, DCP_Paper, DCP_PaperPrice, RM_Printing, RM_Selfmailer, RM_FirstInsert, RM_SecondInsert,
                                               RM_BrochureInsert, RM_MailBelow_5K, RM_Handling, RM_Sealing, RM_Tearing, RM_Folding, RM_Sticking, RM_Labelling,
                                               RM_Matching, RM_CDArchiving, RM_Mix, RM_LabellingRegsterMails, RM_EnvelopeType, RM_EnvelopePrice, RM_Paper,RM_PaperPrice
                                    FROM [IflowSeed].[dbo].[PricingSchedule]
                                    WHERE Id=@Id";
            command.Parameters.AddWithValue("@Id", Id.ToString());
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    ViewBag.Id = reader.GetGuid(0);
                }
                if (reader.IsDBNull(1) == false)
                {
                    ViewBag.JobName = reader.GetString(1);
                }
                if (reader.IsDBNull(2) == false)
                {
                    ViewBag.PrintingDuplex = reader.GetString(2);
                }
                if (reader.IsDBNull(3) == false)
                {
                    ViewBag.Inserting1 = reader.GetString(3);
                }
                if (reader.IsDBNull(4) == false)
                {
                    ViewBag.Inserting2 = reader.GetString(4);
                }
                if (reader.IsDBNull(5) == false)
                {
                    ViewBag.Inserting3 = reader.GetString(5);
                }
                if (reader.IsDBNull(6) == false)
                {
                    ViewBag.Inserting4 = reader.GetString(6);
                }
                if (reader.IsDBNull(7) == false)
                {
                    ViewBag.BrochureInsert = reader.GetString(7);
                }
                if (reader.IsDBNull(8) == false)
                {
                    ViewBag.MailBelow_5K = reader.GetString(8);
                }
                if (reader.IsDBNull(9) == false)
                {
                    ViewBag.Handling = reader.GetString(9);
                }
                if (reader.IsDBNull(10) == false)
                {
                    ViewBag.Sealing = reader.GetString(10);
                }
                if (reader.IsDBNull(11) == false)
                {
                    ViewBag.Tearing = reader.GetString(11);
                }
                if (reader.IsDBNull(12) == false)
                {
                    ViewBag.Folding = reader.GetString(12);
                }
                if (reader.IsDBNull(13) == false)
                {
                    ViewBag.Sticking = reader.GetString(13);
                }
                if (reader.IsDBNull(14) == false)
                {
                    ViewBag.Labelling = reader.GetString(14);
                }
                if (reader.IsDBNull(15) == false)
                {
                    ViewBag.Matching = reader.GetString(15);
                }
                if (reader.IsDBNull(16) == false)
                {
                    ViewBag.CDArchiving = reader.GetString(16);
                }
                if (reader.IsDBNull(17) == false)
                {
                    ViewBag.Npc = reader.GetString(17);
                }
                if (reader.IsDBNull(18) == false)
                {
                    ViewBag.EnvelopeType = reader.GetString(18);
                }
                if (reader.IsDBNull(19) == false)
                {
                    ViewBag.EnvelopePrice = reader.GetString(19);
                }
                if (reader.IsDBNull(20) == false)
                {
                    ViewBag.Paper = reader.GetString(20);
                }
                if (reader.IsDBNull(21) == false)
                {
                    ViewBag.PaperPrice = reader.GetString(21);
                }
                if (reader.IsDBNull(22) == false)
                {
                    ViewBag.SM_PrintingSM = reader.GetString(22);
                }
                if (reader.IsDBNull(23) == false)
                {
                    ViewBag.SM_SM_Material = reader.GetString(23);
                }
                if (reader.IsDBNull(24) == false)
                {
                    ViewBag.SM_FirstInsert = reader.GetString(24);
                }
                if (reader.IsDBNull(25) == false)
                {
                    ViewBag.SM_SecondInsert = reader.GetString(25);
                }
                if (reader.IsDBNull(26) == false)
                {
                    ViewBag.SM_BrochureInsert = reader.GetString(26);
                }
                if (reader.IsDBNull(27) == false)
                {
                    ViewBag.SM_MailBelow_5K = reader.GetString(27);
                }
                if (reader.IsDBNull(28) == false)
                {
                    ViewBag.SM_Handling = reader.GetString(28);
                }
                if (reader.IsDBNull(29) == false)
                {
                    ViewBag.SM_Sealing = reader.GetString(29);
                }
                if (reader.IsDBNull(30) == false)
                {
                    ViewBag.SM_Tearing = reader.GetString(30);
                }
                if (reader.IsDBNull(31) == false)
                {
                    ViewBag.SM_Folding = reader.GetString(31);
                }
                if (reader.IsDBNull(32) == false)
                {
                    ViewBag.SM_Sticking = reader.GetString(32);
                }
                if (reader.IsDBNull(33) == false)
                {
                    ViewBag.SM_Labelling = reader.GetString(33);
                }
                if (reader.IsDBNull(34) == false)
                {
                    ViewBag.SM_Matching = reader.GetString(34);
                }
                if (reader.IsDBNull(35) == false)
                {
                    ViewBag.SM_CDArchiving = reader.GetString(35);
                }
                if (reader.IsDBNull(36) == false)
                {
                    ViewBag.SM_EnvelopeType = reader.GetString(36);
                }
                if (reader.IsDBNull(37) == false)
                {
                    ViewBag.SM_EnvelopePrice = reader.GetString(37);
                }
                if (reader.IsDBNull(38) == false)
                {
                    ViewBag.SM_Paper = reader.GetString(38);
                }
                if (reader.IsDBNull(39) == false)
                {
                    ViewBag.SM_PaperPrice = reader.GetString(39);
                }
                if (reader.IsDBNull(40) == false)
                {
                    ViewBag.MMP_PrintingDuplex = reader.GetString(40);
                }
                if (reader.IsDBNull(41) == false)
                {
                    ViewBag.MMP_FirstInsert = reader.GetString(41);
                }
                if (reader.IsDBNull(42) == false)
                {
                    ViewBag.MMP_SecondInsert = reader.GetString(42);
                }
                if (reader.IsDBNull(43) == false)
                {
                    ViewBag.MMP_InsertingMMP = reader.GetString(43);
                }
                if (reader.IsDBNull(44) == false)
                {
                    ViewBag.MMP_BrochureInsert = reader.GetString(44);
                }
                if (reader.IsDBNull(45) == false)
                {
                    ViewBag.MMP_MailBelow_5K = reader.GetString(45);
                }
                if (reader.IsDBNull(46) == false)
                {
                    ViewBag.MMP_Handling = reader.GetString(46);
                }
                if (reader.IsDBNull(47) == false)
                {
                    ViewBag.MMP_Sealing = reader.GetString(47);
                }
                if (reader.IsDBNull(48) == false)
                {
                    ViewBag.MMP_Tearing = reader.GetString(48);
                }
                if (reader.IsDBNull(49) == false)
                {
                    ViewBag.MMP_Folding = reader.GetString(49);
                }
                if (reader.IsDBNull(50) == false)
                {
                    ViewBag.MMP_Sticking = reader.GetString(50);
                }
                if (reader.IsDBNull(51) == false)
                {
                    ViewBag.MMP_Labelling = reader.GetString(51);
                }
                if (reader.IsDBNull(52) == false)
                {
                    ViewBag.MMP_Matching = reader.GetString(52);
                }
                if (reader.IsDBNull(53) == false)
                {
                    ViewBag.MMP_CDArchiving = reader.GetString(53);
                }
                if (reader.IsDBNull(54) == false)
                {
                    ViewBag.MMP_EnvelopeType = reader.GetString(54);
                }
                if (reader.IsDBNull(55) == false)
                {
                    ViewBag.MMP_EnvelopePrice = reader.GetString(55);
                }
                if (reader.IsDBNull(56) == false)
                {
                    ViewBag.MMP_Paper = reader.GetString(56);
                }
                if (reader.IsDBNull(57) == false)
                {
                    ViewBag.MMP_PaperPrice = reader.GetString(57);
                }
                if (reader.IsDBNull(58) == false)
                {
                    ViewBag.DCP_FoldingCharges = reader.GetString(58);
                }
                if (reader.IsDBNull(59) == false)
                {
                    ViewBag.DCP_SupplyPrintLabel = reader.GetString(59);
                }
                if (reader.IsDBNull(60) == false)
                {
                    ViewBag.DCP_PrintingDuplex = reader.GetString(60);
                }
                if (reader.IsDBNull(61) == false)
                {
                    ViewBag.DCP_FirstInsert = reader.GetString(61);
                }
                if (reader.IsDBNull(62) == false)
                {
                    ViewBag.DCP_SecondInsert = reader.GetString(62);
                }
                if (reader.IsDBNull(63) == false)
                {
                    ViewBag.DCP_BrochureInsert = reader.GetString(63);
                }
                if (reader.IsDBNull(64) == false)
                {
                    ViewBag.DCP_MailBelow_5K = reader.GetString(64);
                }
                if (reader.IsDBNull(65) == false)
                {
                    ViewBag.DCP_Handling = reader.GetString(65);
                }
                if (reader.IsDBNull(66) == false)
                {
                    ViewBag.DCP_Sealing = reader.GetString(66);
                }
                if (reader.IsDBNull(67) == false)
                {
                    ViewBag.DCP_Tearing = reader.GetString(67);
                }
                if (reader.IsDBNull(68) == false)
                {
                    ViewBag.DCP_Folding = reader.GetString(68);
                }
                if (reader.IsDBNull(69) == false)
                {
                    ViewBag.DCP_Sticking = reader.GetString(69);
                }
                if (reader.IsDBNull(70) == false)
                {
                    ViewBag.DCP_Labelling = reader.GetString(70);
                }
                if (reader.IsDBNull(71) == false)
                {
                    ViewBag.DCP_Matching = reader.GetString(71);
                }
                if (reader.IsDBNull(72) == false)
                {
                    ViewBag.DCP_CDArchiving = reader.GetString(72);
                }
                if (reader.IsDBNull(73) == false)
                {
                    ViewBag.DCP_EnvelopeType = reader.GetString(73);
                }
                if (reader.IsDBNull(74) == false)
                {
                    ViewBag.DCP_EnvelopePrice = reader.GetString(74);
                }
                if (reader.IsDBNull(75) == false)
                {
                    ViewBag.DCP_Paper = reader.GetString(75);
                }
                if (reader.IsDBNull(76) == false)
                {
                    ViewBag.DCP_PaperPrice = reader.GetString(76);
                }
                if (reader.IsDBNull(77) == false)
                {
                    ViewBag.RM_Printing = reader.GetString(77);
                }
                if (reader.IsDBNull(78) == false)
                {
                    ViewBag.RM_Selfmailer = reader.GetString(78);
                }
                if (reader.IsDBNull(79) == false)
                {
                    ViewBag.RM_FirstInsert = reader.GetString(79);
                }
                if (reader.IsDBNull(80) == false)
                {
                    ViewBag.RM_SecondInsert = reader.GetString(80);
                }
                if (reader.IsDBNull(81) == false)
                {
                    ViewBag.RM_BrochureInsert = reader.GetString(81);
                }
                if (reader.IsDBNull(82) == false)
                {
                    ViewBag.RM_MailBelow_5K = reader.GetString(82);
                }
                if (reader.IsDBNull(83) == false)
                {
                    ViewBag.RM_Handling = reader.GetString(83);
                }
                if (reader.IsDBNull(84) == false)
                {
                    ViewBag.RM_Sealing = reader.GetString(84);
                }
                if (reader.IsDBNull(85) == false)
                {
                    ViewBag.RM_Tearing = reader.GetString(85);
                }
                if (reader.IsDBNull(86) == false)
                {
                    ViewBag.RM_Folding = reader.GetString(86);
                }
                if (reader.IsDBNull(87) == false)
                {
                    ViewBag.RM_Sticking = reader.GetString(87);
                }
                if (reader.IsDBNull(88) == false)
                {
                    ViewBag.RM_Labelling = reader.GetString(88);
                }
                if (reader.IsDBNull(89) == false)
                {
                    ViewBag.RM_Matching = reader.GetString(89);
                }
                if (reader.IsDBNull(90) == false)
                {
                    ViewBag.RM_CDArchiving = reader.GetString(90);
                }
                if (reader.IsDBNull(91) == false)
                {
                    ViewBag.RM_Mix = reader.GetString(91);
                }
                if (reader.IsDBNull(92) == false)
                {
                    ViewBag.RM_LabellingRegsterMails = reader.GetString(92);
                }
                if (reader.IsDBNull(93) == false)
                {
                    ViewBag.RM_EnvelopeType = reader.GetString(93);
                }
                if (reader.IsDBNull(94) == false)
                {
                    ViewBag.RM_EnvelopePrice = reader.GetString(94);
                }
                if (reader.IsDBNull(95) == false)
                {
                    ViewBag.RM_Paper = reader.GetString(95);
                }
                if (reader.IsDBNull(96) == false)
                {
                    ViewBag.RM_PaperPrice = reader.GetString(96);
                }
            }
            cn.Close();

        }
        return View();

    }












    ////

    [ValidateInput(false)]
    public ActionResult CreateBilling(string Id, string QuantityItem, string Description, string Movement, string RequestorName, string Department, string Remark, string Date, string RefIventory, string CreatedOn, string TblInventoryId, string amount, string set, string Quantity, string BalanceQuantity, string totalvalue, string PricePerUnit, string ItemName, string VendorName, string GrandTotal, string TotalAmount, string descr, string Volume, string Rate, string Process, string totalamount, string Newprocess)
    {
        {
            ViewBag.set = Session["set"];
            var Role = @Session["Role"];
            ViewBag.Role = Role;

            Session["Id"] = Id;



            Guid Idx = Guid.NewGuid();
            Session["Idx"] = Idx;

            @Session["totalamount"] = totalamount;


            if (!string.IsNullOrEmpty(Id))
            {
                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                using (SqlCommand command = new SqlCommand("", cn))
                {



                    cn.Open();
                    command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(TotalAmount)=1
                                            THEN CONVERT(MONEY,TotalAmount) ELSE 0 END)
                                            )
                                            AS [GrandTotal]
                                         FROM [IflowSeed].[dbo].[TblBilling]
                                         WHERE JobInstructionId=@Id";
                    command.Parameters.AddWithValue("@Id", Id);
                    var reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            //ViewBag.GrandTotal = reader.GetDecimal(0);
                            //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                            ViewBag.GrandTotal = string.Format("{0:n}", reader.GetDecimal(0));


                        }


                    }
                    cn.Close();

                }


                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                using (SqlCommand command = new SqlCommand("", cn))
                {

                    cn.Open();
                    command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(Volume)=1
                                            THEN CONVERT(MONEY,Volume) ELSE 0 END)
                                            )
                                            AS [TotalV]
                                         FROM [IflowSeed].[dbo].[TblBilling]
                                         WHERE Id=@Id";
                    command.Parameters.AddWithValue("@Id", Id);
                    var reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            ViewBag.TotalV = reader.GetDecimal(0);
                            Console.WriteLine();
                            Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
                            Console.WriteLine(value.ToString("N"));


                        }


                    }
                    cn.Close();
                }

                using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                using (SqlCommand command = new SqlCommand("", cn))
                {
                    cn.Open();
                    command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(Rate)=1
                                            THEN CONVERT(MONEY,Rate) ELSE 0 END)
                                            )
                                            AS [TotalR]
                                         FROM [IflowSeed].[dbo].[TblBilling]
                                         WHERE Id=@Id";
                    command.Parameters.AddWithValue("@Id", Id);
                    var reader = command.ExecuteReader();
                    while (reader.Read())
                    {
                        if (reader.IsDBNull(0) == false)
                        {
                            ViewBag.TotalR = reader.GetDecimal(0);
                            Console.WriteLine();
                            Console.WriteLine(".ToString(\"N\") Formates With out Currency Sign");
                            Console.WriteLine(value.ToString("N"));
                        }


                    }
                    cn.Close();
                }
            }





            if (!string.IsNullOrEmpty(Id) && !string.IsNullOrEmpty(Volume) && !string.IsNullOrEmpty(Rate))
            {
                ViewBag.Id = Id;



                double z = Convert.ToDouble(Volume);
                if (!string.IsNullOrEmpty(Rate))
                {
                    double y = Convert.ToDouble(Rate);
                    totalValue = z * y;
                    double grandtotal = z * y;
                }
                else
                {
                    double y = Convert.ToDouble(Rate);
                    totalValue = z + y;
                    double grandtotal = z + y;
                }
            }






            if (Process == "Others" && !string.IsNullOrEmpty(Volume))

            {
                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {


                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                    double QUItem = Convert.ToDouble(QuantityItem);

                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,Process,Description,JobInstructionId,CreatedOn,TotalAmount,Volume,Rate) " +
                               "VALUES(@Id,@Process,@Description,@JobInstructionId,@CreatedOn,@TotalAmount,@Volume,@Rate)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(Newprocess))
                    {
                        command.Parameters.AddWithValue("@Process", Newprocess);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Process", DBNull.Value);
                        TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
                        return RedirectToAction("CreateBilling", "Finance");

                    }
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);
                    command.Parameters.AddWithValue("@TotalAmount", totalValue.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Volume", Volume);
                    command.Parameters.AddWithValue("@Rate", Rate);
                    command.ExecuteNonQuery();
                    cn2.Close();

                    cn2.Open();




                }


            }
            if (Process == "Mix" && !string.IsNullOrEmpty(Volume))
            {

                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {


                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                    double QUItem = Convert.ToDouble(QuantityItem);

                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,Process,Description,JobInstructionId,CreatedOn,TotalAmount,Volume,Rate) " +
                               "VALUES(@Id,@Process,@Description,@JobInstructionId,@CreatedOn,@TotalAmount,@Volume,@Rate)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(Process))
                    {
                        command.Parameters.AddWithValue("@Process", Process);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Process", DBNull.Value);
                        TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
                        return RedirectToAction("CreateBilling", "Finance");

                    }
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);
                    command.Parameters.AddWithValue("@TotalAmount", totalValue.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Volume", Volume);
                    command.Parameters.AddWithValue("@Rate", Rate);
                    command.ExecuteNonQuery();
                    cn2.Close();

                    cn2.Open();




                }



            }

            if (Process == "Postage" && !string.IsNullOrEmpty(Volume))
            {

                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {


                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                    double QUItem = Convert.ToDouble(QuantityItem);

                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,Process,Description,JobInstructionId,CreatedOn,TotalAmount,Volume,Rate) " +
                               "VALUES(@Id,@Process,@Description,@JobInstructionId,@CreatedOn,@TotalAmount,@Volume,@Rate)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(Process))
                    {
                        command.Parameters.AddWithValue("@Process", Process);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Process", DBNull.Value);
                        TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
                        return RedirectToAction("CreateBilling", "Finance");

                    }
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);
                    command.Parameters.AddWithValue("@TotalAmount", totalValue.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Volume", Volume);
                    command.Parameters.AddWithValue("@Rate", Rate);
                    command.ExecuteNonQuery();
                    cn2.Close();

                    cn2.Open();




                }



            }

            if (Process == "Courier Changes" && !string.IsNullOrEmpty(Volume))
            {

                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {


                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                    double QUItem = Convert.ToDouble(QuantityItem);

                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,Process,Description,JobInstructionId,CreatedOn,TotalAmount,Volume,Rate) values "
                        + "(@Id,@Process,@Description,@JobInstructionId,@CreatedOn,@TotalAmount,@Volume,@Rate)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(Process))
                    {
                        command.Parameters.AddWithValue("@Process", Process);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Process", DBNull.Value);
                        TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
                        return RedirectToAction("CreateBilling", "Finance");

                    }
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);
                    command.Parameters.AddWithValue("@TotalAmount", totalValue.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Volume", Volume);
                    command.Parameters.AddWithValue("@Rate", Rate);
                    command.ExecuteNonQuery();
                    cn2.Close();

                    cn2.Open();




                }



            }

            if (Process == "Delivery Charges" && !string.IsNullOrEmpty(Volume))
            {

                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {


                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                    double QUItem = Convert.ToDouble(QuantityItem);

                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,Process,Description,JobInstructionId,CreatedOn,TotalAmount,Volume,Rate) values "
                        + "(@Id,@Process,@Description,@JobInstructionId,@CreatedOn,@TotalAmount,@Volume,@Rate)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(Process))
                    {
                        command.Parameters.AddWithValue("@Process", Process);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Process", DBNull.Value);
                        TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
                        return RedirectToAction("CreateBilling", "Finance");

                    }
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);
                    command.Parameters.AddWithValue("@TotalAmount", totalValue.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Volume", Volume);
                    command.Parameters.AddWithValue("@Rate", Rate);
                    command.ExecuteNonQuery();
                    cn2.Close();

                    cn2.Open();




                }



            }

            if (Process == "Franking" && !string.IsNullOrEmpty(Volume))
            {

                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {


                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                    double QUItem = Convert.ToDouble(QuantityItem);

                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,Process,Description,JobInstructionId,CreatedOn,TotalAmount,Volume,Rate) values "
                        + "(@Id,@Process,@Description,@JobInstructionId,@CreatedOn,@TotalAmount,@Volume,@Rate)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(Process))
                    {
                        command.Parameters.AddWithValue("@Process", Process);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Process", DBNull.Value);
                        TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
                        return RedirectToAction("CreateBilling", "Finance");

                    }
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);
                    command.Parameters.AddWithValue("@TotalAmount", totalValue.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Volume", Volume);
                    command.Parameters.AddWithValue("@Rate", Rate);
                    command.ExecuteNonQuery();
                    cn2.Close();

                    cn2.Open();




                }



            }

            if (Process == "Sevices Charges Franking 10%" && !string.IsNullOrEmpty(Volume))
            {

                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {


                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                    double QUItem = Convert.ToDouble(QuantityItem);

                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,Process,Description,JobInstructionId,CreatedOn,TotalAmount,Volume,Rate) values "
                        + "(@Id,@Process,@Description,@JobInstructionId,@CreatedOn,@TotalAmount,@Volume,@Rate)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(Process))
                    {
                        command.Parameters.AddWithValue("@Process", Process);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Process", DBNull.Value);
                        TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
                        return RedirectToAction("CreateBilling", "Finance");

                    }
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);
                    command.Parameters.AddWithValue("@TotalAmount", totalValue.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Volume", Volume);
                    command.Parameters.AddWithValue("@Rate", Rate);
                    command.ExecuteNonQuery();
                    cn2.Close();

                    cn2.Open();




                }



            }

            if (Process == "SelfMailer" && !string.IsNullOrEmpty(Volume))
            {

                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {


                    //get.Date = Convert.ToDateTime(get.DateTxt);

                    string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                    double QUItem = Convert.ToDouble(QuantityItem);

                    cn2.Open();

                    SqlCommand command;
                    command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[TblBilling] (Id,Process,Description,JobInstructionId,CreatedOn,TotalAmount,Volume,Rate) values "
                        + "(@Id,@Process,@Description,@JobInstructionId,@CreatedOn,@TotalAmount,@Volume,@Rate)", cn2);
                    command.Parameters.AddWithValue("@Id", Idx);

                    if (!string.IsNullOrEmpty(Process))
                    {
                        command.Parameters.AddWithValue("@Process", Process);
                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Process", DBNull.Value);
                        TempData["msg"] = "<script>alert('The Process Field is reqired ');</script>";
                        return RedirectToAction("CreateBilling", "Finance");

                    }
                    if (!string.IsNullOrEmpty(Description))
                    {

                        command.Parameters.AddWithValue("@Description", Description);

                    }
                    else
                    {
                        command.Parameters.AddWithValue("@Description", DBNull.Value);
                    }
                    command.Parameters.AddWithValue("@JobInstructionId", Id);
                    command.Parameters.AddWithValue("@CreatedOn", createdOn);
                    command.Parameters.AddWithValue("@TotalAmount", totalValue.ToString("#,###,##0.00"));
                    command.Parameters.AddWithValue("@Volume", Volume);
                    command.Parameters.AddWithValue("@Rate", Rate);
                    command.ExecuteNonQuery();
                    cn2.Close();

                    cn2.Open();




                }



            }


            if (Process == "Others")
            {

                ViewBag.Process = "Others";
            }


            List<SelectListItem> li = new List<SelectListItem>();
            li.Add(new SelectListItem { Text = "Please Select", Value = "" });
            li.Add(new SelectListItem { Text = "Mix", Value = "Mix" });
            li.Add(new SelectListItem { Text = "Postage", Value = "Postage" });
            li.Add(new SelectListItem { Text = "Courier Changes", Value = "Courier Changes" });
            li.Add(new SelectListItem { Text = "Delivery Charges", Value = "Delivery Charge" });
            li.Add(new SelectListItem { Text = "Franking", Value = "Franking" });
            li.Add(new SelectListItem { Text = "Sevices Charges Franking 10%", Value = "Sevices Charges Franking 10%" });
            li.Add(new SelectListItem { Text = "SelfMailer", Value = "SelfMailer" });
            li.Add(new SelectListItem { Text = "Others", Value = "Others" });

            ViewData["Process_"] = li;


        }
        return View();



    }














    List<PostingManifest> viewPosting2 = new List<PostingManifest>();

    public ActionResult ManageMailProductionReport(string set, string JobType)
    {
        ViewBag.IsDepart = @Session["Department"];
        ViewBag.IsRole = @Session["Role"];
        var IdentityName = @Session["Fullname"];

        if (set == "search") //ini kalu user search product
        {
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                int _bil = 1;
                cn.Open();
                command.CommandText = @"SELECT Id, ModifiedOn, Status, Customer_Name, Cust_Department, Contact_Person, ProductName,
                                        JobClass, Frequency, JobType, LogTagNo, AccountsQty,ImpressionQty, PagesQty, TotalAuditTrail
                                        FROM [IflowSeed].[dbo].[PostingManifest] 
                                        WHERE LogTagNo LIKE @LogTagNo
                                        AND Status='FINANCE'";
                command.Parameters.AddWithValue("@JobType", "%" + JobType + "%");
                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    PostingManifest model = new PostingManifest();
                    {
                        model.Bil = _bil++;
                        if (reader.IsDBNull(0) == false)
                        {
                            model.Id = reader.GetGuid(0);
                        }
                        if (reader.IsDBNull(1) == false)
                        {
                            model.ModifiedOn = reader.GetDateTime(1);
                        }
                        if (reader.IsDBNull(2) == false)
                        {
                            model.Status = reader.GetString(2);
                        }
                        if (reader.IsDBNull(3) == false)
                        {
                            model.Customer_Name = reader.GetString(3);
                        }
                        if (reader.IsDBNull(4) == false)
                        {
                            model.Cust_Department = reader.GetString(4);
                        }
                        if (reader.IsDBNull(5) == false)
                        {
                            model.ContactPerson = reader.GetString(5);
                        }
                        if (reader.IsDBNull(6) == false)
                        {
                            model.ProductName = reader.GetString(6);
                        }
                        if (reader.IsDBNull(7) == false)
                        {
                            model.JobClass = reader.GetString(7);
                        }
                        if (reader.IsDBNull(8) == false)
                        {
                            model.Frequency = reader.GetString(8);
                        }
                        if (reader.IsDBNull(9) == false)
                        {
                            model.JobType = reader.GetString(9);
                        }
                        if (reader.IsDBNull(10) == false)
                        {
                            model.LogTagNo = reader.GetString(10);
                        }
                        if (reader.IsDBNull(11) == false)
                        {
                            model.AccountsQty = reader.GetString(11);
                        }
                        if (reader.IsDBNull(12) == false)
                        {
                            model.ImpressionQty = reader.GetString(12);
                        }
                        if (reader.IsDBNull(13) == false)
                        {
                            model.PagesQty = reader.GetString(13);
                        }
                        if (reader.IsDBNull(14) == false)
                        {
                            model.TotalAuditTrail = reader.GetString(14);
                        }


                    }
                    viewPosting2.Add(model);
                }
                cn.Close();
            }
        }
        else
        {
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                int _bil = 1;
                cn.Open();
                command.CommandText = @"SELECT Id, ModifiedOn, Status, Customer_Name, ProductName,
                                           JobClass,  JobType, LogTagNo, AccountsQty,ImpressionQty, PagesQty
                                           FROM [IflowSeed].[dbo].[PostingManifest] 
                                           WHERE Status='FINANCE' ";
                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    PostingManifest model = new PostingManifest();
                    {
                        model.Bil = _bil++;
                        if (reader.IsDBNull(0) == false)
                        {
                            model.Id = reader.GetGuid(0);
                        }
                        if (reader.IsDBNull(1) == false)
                        {
                            model.ModifiedOn = reader.GetDateTime(1);
                        }
                        if (reader.IsDBNull(2) == false)
                        {
                            model.Status = reader.GetString(2);
                        }
                        if (reader.IsDBNull(3) == false)
                        {
                            model.Customer_Name = reader.GetString(3);
                        }


                        if (reader.IsDBNull(4) == false)
                        {
                            model.ProductName = reader.GetString(4);
                        }
                        if (reader.IsDBNull(5) == false)
                        {
                            model.JobClass = reader.GetString(5);
                        }

                        if (reader.IsDBNull(6) == false)
                        {
                            model.JobType = reader.GetString(6);
                        }
                        if (reader.IsDBNull(7) == false)
                        {
                            model.LogTagNo = reader.GetString(7);
                        }
                        if (reader.IsDBNull(8) == false)
                        {
                            model.AccountsQty = reader.GetString(8);
                        }
                        if (reader.IsDBNull(9) == false)
                        {
                            model.ImpressionQty = reader.GetString(9);
                        }
                        if (reader.IsDBNull(10) == false)
                        {
                            model.PagesQty = reader.GetString(10);
                        }


                    }

                }
                cn.Close();
            }
        }


        return View(viewPosting);

    }

    //public ActionResult BackToPosting(string Id)
    //{

    //    var IdentityName = @Session["Fullname"];
    //    var Role = @Session["Role"];
    //    ViewBag.IsDepart = @Session["Department"];
    //    ViewBag.AccountManager = IdentityName.ToString();

    //    Session["Id"] = Id;
    //    ViewBag.Id = Id;


    //    using (SqlConnection cn1 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
    //    {
    //        cn1.Open();
    //        SqlCommand command1;
    //        command1 = new SqlCommand("UPDATE [IflowSeed].[dbo].[Hist_PostingManifest] SET STATUS='POSTING' WHERE PostingManifestId=@PostingManifestId", cn1);
    //        command1.Parameters.AddWithValue("@PostingManifestId", Id);
    //        command1.ExecuteNonQuery();
    //        cn1.Close();
    //    }

    //    using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
    //    {
    //        cn.Open();
    //        SqlCommand command;
    //        command = new SqlCommand("UPDATE [IflowSeed].[dbo].[PostingManifest] SET STATUS='POSTING' WHERE Id=@Id", cn);
    //        command.Parameters.AddWithValue("@Id", Id);
    //        command.ExecuteNonQuery();
    //        cn.Close();


    //    }

    //    TempData["msg"] = "<script>alert('SUCCESSFULLY BACK TO POSTING !');</script>";

    //    return RedirectToAction("ManageMailProductionReport", "Finance");
    //}





    List<Hist_PostingManifest> viewPostingDetails = new List<Hist_PostingManifest>();
    public ActionResult ViewPostingDetails(string Id, string Set)
    {
        ViewBag.IsDepart = @Session["Department"];
        ViewBag.IsRole = @Session["Role"];
        var IdentityName = @Session["Fullname"];

        if (Set == "back")
        {
            return RedirectToAction("ManageMailProductionReport", "Finance");
        }

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil = 1;
            cn.Open();
            command.CommandText = @"SELECT Id, PostingDateOn, PostingTime, Local, Oversea, Re_turn, Courier,
                                           Doubles, PO_BOX, Recovery, ReturnSts, RemarkRecovery, Status
                                           FROM [IflowSeed].[dbo].[PostingManifest] 
                                           WHERE JobInstructionId=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                Hist_PostingManifest model = new Hist_PostingManifest();
                {
                    model.Bil = _bil++;
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Id = reader.GetGuid(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        model.PostingDateOn = reader.GetDateTime(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        model.PostingTime = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        model.Local = reader.GetString(3);
                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        model.Oversea = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        model.Re_turn = reader.GetString(5);
                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        model.Courier = reader.GetString(6);
                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        model.Doubles = reader.GetString(7);
                    }
                    if (reader.IsDBNull(8) == false)
                    {
                        model.PO_BOX = reader.GetString(8);
                    }
                    if (reader.IsDBNull(9) == false)
                    {
                        model.Recovery = reader.GetString(9);
                    }
                    if (reader.IsDBNull(10) == false)
                    {
                        model.ReturnSts = reader.GetString(10);
                    }
                    if (reader.IsDBNull(11) == false)
                    {
                        model.RemarkRecovery = reader.GetString(11);
                    }
                    if (reader.IsDBNull(12) == false)
                    {
                        model.Status = reader.GetString(12);
                    }


                }
                viewPostingDetails.Add(model);
            }
            cn.Close();
        }

        return View(viewPostingDetails);

    }

    public ActionResult AddAttentionTo(string Customer_Name, string Cust_Department, string Contact_Person, string Id, string InvoiceNo, string ProductName, string set)


    {

        var IdentityName = @Session["Fullname"];
        var Role = @Session["Role"];
        ViewBag.IsDepart = @Session["Department"];
        ViewBag.AccountManager = IdentityName.ToString();

        Session["Id"] = Id;
        ViewBag.Id = Id;
        ViewBag.Customer_Name = Customer_Name;
        ViewBag.Cust_Department = Cust_Department;
        ViewBag.ProductName = ProductName;




        int _bil = 1;
        List<SelectListItem> li = new List<SelectListItem>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT DISTINCT Contact_Person FROM [IflowSeed].[dbo].[CustomerDetails]                          
                                    WHERE Customer_Name LIKE @Customer_Name";
            command.Parameters.AddWithValue("@Customer_Name", "%" + Customer_Name + "%");
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                CustomerDetails model = new CustomerDetails();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Contact_Person = reader.GetString(0);
                    }
                }
                int i = _bil++;
                if (i == 1)
                {
                    li.Add(new SelectListItem { Text = "Please Select" });
                }
                li.Add(new SelectListItem { Text = model.Contact_Person });
            }
            cn.Close();
        }
        ViewData["ContactPerson_"] = li;

        int _bil22 = 1;
        List<SelectListItem> li22 = new List<SelectListItem>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT DISTINCT Cust_Department FROM [IflowSeed].[dbo].[CustomerDetails]                          
                                    WHERE Customer_Name LIKE @Customer_Name";
            command.Parameters.AddWithValue("@Customer_Name", "%" + Customer_Name + "%");
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                CustomerDetails model = new CustomerDetails();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Cust_Department = reader.GetString(0);
                    }
                }
                int i = _bil22++;
                if (i == 1)
                {
                    li22.Add(new SelectListItem { Text = "Please Select" });
                }
                li22.Add(new SelectListItem { Text = model.Cust_Department });
            }
            cn.Close();
        }
        ViewData["Cust_Department_"] = li22;



        List<JobInstruction> viewPosting = new List<JobInstruction>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil3 = 1;
            cn.Open();
            command.CommandText = @"SELECT Finance.Customer_Name, Finance.Cust_Department, Finance.InvoiceNo,Finance.Contact_Person
                                     FROM  JobInstruction INNER JOIN
                                      Finance ON JobInstruction.Id = Finance.JobInstructionId
                                        WHERE JobInstruction.Id =@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                JobInstruction model = new JobInstruction();
                {
                    model.Bil = _bil3++;

                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Customer_Name = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.Cust_Department = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.InvoiceNo = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.Contact_Person = reader.GetString(3);
                    }

                }
                viewPosting.Add(model);
            }
            cn.Close();



            if (set == "AddNew")
            {
                Guid Idx = Guid.NewGuid();
                Session["Idx"] = Idx;
                string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");

                using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                {
                    cn2.Open();
                    SqlCommand command2;
                    command2 = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[Finance] (Contact_Person, Cust_Department,Id,InvoiceNo,CreatedOn,Customer_Name,JobInstructionId)" +
                                   "VALUES(@Contact_Person,@Cust_Department,@Id,@InvoiceNo,@CreatedOn,@Customer_Name,@JobInstructionId)", cn2);
                    command2.Parameters.AddWithValue("@Contact_Person", Contact_Person);
                    command2.Parameters.AddWithValue("@Cust_Department", Cust_Department);
                    command2.Parameters.AddWithValue("@Id", Idx);
                    command2.Parameters.AddWithValue("@InvoiceNo", InvoiceNo);
                    command2.Parameters.AddWithValue("@CreatedOn", createdOn);
                    command2.Parameters.AddWithValue("@Customer_Name", Customer_Name);
                    command2.Parameters.AddWithValue("@JobInstructionId", Id);
                    command2.ExecuteNonQuery();
                    cn2.Close();

                }

                return RedirectToAction("ManageFin", "Finance");

            }


            else
            {

                return View();

            }


        }
    }

    public ActionResult FileStoreUrgencySts0()
    {
        string Department = @Session["Department"].ToString();

        var Id = Session["Id"];
        ViewBag.Id = Id;


        List<FileStoreUploaded> viewFileStore = new List<FileStoreUploaded>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil = 1;
            cn.Open();
            command.CommandText = @"SELECT Picture_FileId,Id
                                    FROM [IflowSeed].[dbo].[FileStoreUploaded]
                                     WHERE JobInstructionId=@Id AND Department='PRODUCTION'";
            command.Parameters.AddWithValue("@Id", Id);
            command.Parameters.AddWithValue("@Department", Department);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                FileStoreUploaded model = new FileStoreUploaded();
                {
                    model.Bil = _bil++;
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Picture_FileId = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        model.Id = reader.GetGuid(1);
                    }

                }
                viewFileStore.Add(model);
            }
            cn.Close();
            //return Json(new { data = viewFileStore }, JsonRequestBehavior.AllowGet);
            return Json(viewFileStore);
        }
    }


    public ActionResult FileStoreUrgencySts1()
    {
        string Department = @Session["Department"].ToString();

        var Id = Session["Id"];
        ViewBag.Id = Id;


        List<FileStoreUploaded> viewFileStore = new List<FileStoreUploaded>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil = 1;
            cn.Open();
            command.CommandText = @" SELECT Picture_FileId,Id
                                    FROM [IflowSeed].[dbo].[FileStoreUploaded]
                                     WHERE JobInstructionId=@Id AND Department='FINANCE'";
            command.Parameters.AddWithValue("@Id", Id);
            command.Parameters.AddWithValue("@Department", Department);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                FileStoreUploaded model = new FileStoreUploaded();
                {
                    model.Bil = _bil++;
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Picture_FileId = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        model.Id = reader.GetGuid(1);
                    }


                }
                viewFileStore.Add(model);
            }
            cn.Close();
            //return Json(new { data = viewFileStore }, JsonRequestBehavior.AllowGet);
            return Json(viewFileStore);
        }
    }

    public ActionResult UploadFileStoreByFin(FileStoreUploaded FileUploadLocation)
    {
        var Id = Session["Id"];
        var Status = Session["Status"];
        ViewBag.IsDepart = @Session["Department"];
        ViewBag.IsRole = @Session["Role"];
        string Deptment = @Session["Department"].ToString();

        if (FileUploadLocation.FileUploadFile != null && FileUploadLocation.set == "save")
        {
            var fileName = Path.GetFileName(FileUploadLocation.FileUploadFile.FileName);
            var path = Path.Combine(Server.MapPath("~/FileStore"), fileName);
            FileUploadLocation.FileUploadFile.SaveAs(path);

            using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            {
                Guid guidId = Guid.NewGuid();
                string createdOn = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss tt");
                cn2.Open();
                SqlCommand command;
                command = new SqlCommand("INSERT INTO [IflowSeed].[dbo].[FileStoreUploaded] (Id,CreatedOn,Picture_FileId,JobInstructionId,UrgencySts,Picture_Extension,Department) values (@Id,@CreatedOn,@Picture_FileId,@JobInstructionId,@UrgencySts,@Picture_Extension,@Department)", cn2);
                command.Parameters.AddWithValue("@Id", guidId);
                command.Parameters.AddWithValue("@CreatedOn", createdOn);
                command.Parameters.AddWithValue("@Picture_FileId", fileName.Trim());
                command.Parameters.AddWithValue("@JobInstructionId", Id);
                command.Parameters.AddWithValue("@UrgencySts", 0);
                command.Parameters.AddWithValue("@Picture_Extension", FileUploadLocation.FileUploadFile.ContentType);
                command.Parameters.AddWithValue("@Department", Deptment);

                command.ExecuteNonQuery();
                cn2.Close();

                return RedirectToAction("AddAttentionTo", "Finance", new { Id = Id });
            }
        }

        if (FileUploadLocation.set == "back")
        {
            return RedirectToAction("AddAttentionTo", "Finance", new { Id = Id });
        }

        return View();
    }

    public ActionResult DownloadFileStore0(string Id)
    {
        Guid IdPartner = Guid.Empty;

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT Picture_FileId,Picture_Extension,JobInstructionId
                                      FROM [IflowSeed].[dbo].[FileStoreUploaded]
                                      WHERE Id=@Id";
            command.Parameters.AddWithValue("@Id", Id.ToString());
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    var Picture_FileId = reader.GetString(0);
                    var Picture_Extension = reader.GetString(1);
                    IdPartner = reader.GetGuid(2);
                    var path = PathSource + Picture_FileId;
                    string contentType = Picture_Extension.ToString();
                    return File(path, contentType, Picture_FileId);
                }
            }
        }

        return RedirectToAction("AddAttentionTo", "Finance", new { Id = Session["IdPartner"] });
    }

    public ActionResult DownloadFileStore1(string Id)
    {
        Guid IdDow = Guid.Empty;

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT Picture_FileId,Picture_Extension,JobInstructionId
                                      FROM [IflowSeed].[dbo].[FileStoreUploaded]
                                      WHERE Id=@Id";
            command.Parameters.AddWithValue("@Id", Id.ToString());
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    var Picture_FileId = reader.GetString(0);
                    var Picture_Extension = reader.GetString(1);
                    IdDow = reader.GetGuid(2);
                    var path = PathSource2 + Picture_FileId;
                    string contentType = Picture_Extension.ToString();
                    return File(path, contentType, Picture_FileId);
                }
            }
        }

        return RedirectToAction("AddAttentionTo", "Finance", new { Id = Session["IdDow"] });
    }

    public ActionResult DeleteFileStoreUploaded0(string Id)
    {
        if (Id != null)
        {
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                cn.Open();
                command.CommandText = @"SELECT Picture_FileId,JobEnquiry
                                      FROM [IflowSeed].[dbo].[FileStoreUploaded]
                                      WHERE Id=@Id";
                command.Parameters.AddWithValue("@Id", Id.ToString());
                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        var Picture_FileId = reader.GetString(0);
                        var path = Path.Combine(Server.MapPath("~/FileStore"), Picture_FileId);
                        System.IO.File.Delete(path);

                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {
                            cn3.Open();
                            SqlCommand command3;
                            command3 = new SqlCommand("DELETE [IflowSeed].[dbo].[FileStoreUploaded]  WHERE Id=@Id", cn3);
                            command3.Parameters.AddWithValue("@Id", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();
                        }
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        var JobEnquiryId = reader.GetGuid(1);
                        Session["Id"] = JobEnquiryId;
                    }
                }
                cn.Close();
            }
        }

        return RedirectToAction("AddAttentionTo", "Finance", new { JobEnquiryId = Session["JobEnquiryId"], status = Session["Status"].ToString() });
    }

    public ActionResult DeleteFileStoreUploaded1(string Id)
    {
        if (Id != null)
        {
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            using (SqlCommand command = new SqlCommand("", cn))
            {
                cn.Open();
                command.CommandText = @"SELECT Picture_FileId,JobEnquiry
                                      FROM [IflowSeed].[dbo].[FileStoreUploaded]
                                      WHERE Id=@Id";
                command.Parameters.AddWithValue("@Id", Id.ToString());
                var reader = command.ExecuteReader();
                while (reader.Read())
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        var Picture_FileId = reader.GetString(0);
                        var path = Path.Combine(Server.MapPath("~/FileStore"), Picture_FileId);
                        System.IO.File.Delete(path);

                        using (SqlConnection cn3 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
                        {
                            cn3.Open();
                            SqlCommand command3;
                            command3 = new SqlCommand("DELETE [IflowSeed].[dbo].[FileStoreUploaded]  WHERE Id=@Id", cn3);
                            command3.Parameters.AddWithValue("@Id", Id);
                            command3.ExecuteNonQuery();
                            cn3.Close();
                        }
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        var JobEnquiryId = reader.GetGuid(1);
                        Session["Id"] = JobEnquiryId;
                    }
                }
                cn.Close();
            }
        }

        return RedirectToAction("AddAttentionTo", "Finance", new { JobEnquiryId = Session["JobEnquiryId"], status = Session["Status"].ToString() });
    }

    public double pucbGrnTotal;
    public double pribGrnTotalIP;
    public double pribGrnTotalV;

    public ActionResult ViewMPR(string Id, string JobInstructionId, string DescriptionMaterials, string LogTagNo, string ServiceChange, string CourierChanges, string DeliveryCharge, string SelfMailer, string Others, string Others2, string Others5, string Mix, string Postage, string Franking, string Imprest, string Others3, string Others4, string Others6, string Others7, string Others8, string Others9, string Others10, string GrandTotalAll)
    {
        var IdentityName = @Session["Fullname"];
        ViewBag.IdentityName = @Session["Fullname"];
        ViewBag.IsDepart = @Session["Department"];
        var IsDepart = @Session["Department"];
        var Role = @Session["Role"];
        var Username = @Session["Username"];
        ViewBag.Username = @Session["Username"];
        Session["Id"] = Id;

        // processing

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(GrandTotal)=1
                                            THEN CONVERT(MONEY,GrandTotal) ELSE 0 END)
                                            )
                                            AS [GrandTotalAll]
                                         FROM [IflowSeed].[dbo].[TblGrandTotal]
                                         WHERE JobInstructionId=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    //ViewBag.GrandTotal = reader.GetDecimal(0);
                    //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                    ViewBag.GrandTotalAll = string.Format("{0:n}", reader.GetDecimal(0));

                    var grntotal = string.Format("{0:n}", reader.GetDecimal(0));
                    pucbGrnTotal = Convert.ToDouble(grntotal);


                }


            }
            cn.Close();

        }


        // material

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @" SELECT
                                            SUM((CASE WHEN ISNUMERIC(TotalAmountPaper)=1
                                            THEN CONVERT(MONEY,TotalAmountPaper) ELSE 0 END)
                                            )
                                            AS [GrandTotalP],
											  SUM((CASE WHEN ISNUMERIC(TotalAmountEnv)=1
                                            THEN CONVERT(MONEY,TotalAmountEnv) ELSE 0 END)
                                            )
                                            AS [GrandTotalV]
                                         FROM [IflowSeed].[dbo].[TblMaterials]
                                         WHERE JobInstructionId=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    //ViewBag.GrandTotal = reader.GetDecimal(0);
                    //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                    ViewBag.GrandTotalP = string.Format("{0:n}", reader.GetDecimal(0));
                    pribGrnTotalIP = Convert.ToDouble(ViewBag.GrandTotalP);


                }
                if (reader.IsDBNull(1) == false)
                {
                    //ViewBag.GrandTotal = reader.GetDecimal(0);
                    //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                    ViewBag.GrandTotalV = string.Format("{0:n}", reader.GetDecimal(1));
                    pribGrnTotalV = Convert.ToDouble(ViewBag.GrandTotalV);


                }

            }
            cn.Close();
            double GrandAll = pribGrnTotalIP + pribGrnTotalV + pucbGrnTotal;
            ViewBag.ViewGrnTotal = GrandAll.ToString("F");
        }



        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT JobInstruction.AccountsQty, JobInstruction.ImpressionQty, JobInstruction.PagesQty, PostingManifest.PostingDateOn, PostingManifest.PostingTime, PostingManifest.Local, PostingManifest.Oversea, PostingManifest.Re_turn, PostingManifest.Courier, PostingManifest.Recovery, PostingManifest.PO_BOX, PostingManifest.InsertMMP, PostingManifest.Shred, PostingManifest.Hold, PostingManifest.RemarkIns_Material, PostingManifest.Ins_Material,JobAuditTrailDetail.LogTagNo,JobInstruction.ProductName
                                   FROM  JobInstruction INNER JOIN
                                   PostingManifest ON JobInstruction.Id = PostingManifest.JobInstructionId INNER JOIN
                                   JobAuditTrailDetail ON JobInstruction.Id = JobAuditTrailDetail.JobAuditTrailId
                                        WHERE JobInstruction.Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    ViewBag.AccountsQty = reader.GetString(0);
                }

                if (reader.IsDBNull(1) == false)
                {
                    ViewBag.ImpressionQty = reader.GetString(1);
                }
                if (reader.IsDBNull(2) == false)
                {
                    ViewBag.PagesQty = reader.GetString(2);
                }

                if (reader.IsDBNull(3) == false)
                {
                    ViewBag.PostingDateOn = String.Format("{0:dd/MM/yyyy}", (DateTime)reader.GetDateTime(3));
                }

                if (reader.IsDBNull(4) == false)
                {
                    ViewBag.PostingTime = reader.GetString(4);
                }

                if (reader.IsDBNull(5) == false)
                {
                    ViewBag.Local = reader.GetString(5);
                }
                if (reader.IsDBNull(6) == false)
                {
                    ViewBag.Oversea = reader.GetString(6);
                }
                if (reader.IsDBNull(7) == false)
                {
                    ViewBag.Re_turn = reader.GetString(7);
                }

                if (reader.IsDBNull(8) == false)
                {
                    ViewBag.Courier = reader.GetString(8);
                }
                if (reader.IsDBNull(9) == false)
                {
                    ViewBag.Recovery = reader.GetString(9);
                }
                if (reader.IsDBNull(10) == false)
                {
                    ViewBag.PO_BOX = reader.GetString(10);
                }
                if (reader.IsDBNull(11) == false)
                {
                    ViewBag.InsertMMP = reader.GetString(11);
                }
                if (reader.IsDBNull(12) == false)
                {
                    ViewBag.Shred = reader.GetString(12);
                }
                if (reader.IsDBNull(13) == false)
                {
                    ViewBag.Hold = reader.GetString(13);
                }

                if (reader.IsDBNull(14) == false)
                {
                    ViewBag.RemarkIns_Material = reader.GetString(14);
                }
                if (reader.IsDBNull(15) == false)
                {
                    bool getIns_Material = reader.GetBoolean(15);
                    if (getIns_Material == false)
                    {
                        ViewBag.Ins_Material = "";
                    }
                    else
                    {
                        ViewBag.Ins_Material = "checked";
                    }
                }
                if (reader.IsDBNull(16) == false)
                {
                    ViewBag.LogTagNo = reader.GetString(16);
                }
                if (reader.IsDBNull(17) == false)
                {
                    ViewBag.ProductName = reader.GetString(17);
                }

            }
            cn.Close();
        }

        List<JobInstruction> viewPosting2 = new List<JobInstruction>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil3 = 1;
            cn.Open();
            command.CommandText = @"SELECT JobInstruction.JobSheetNo,  Finance.Contact_Person, Finance.InvoiceNo, Finance.Cust_Department,JobAuditTrailDetail.JobNameIT,JobInstruction.QuotationRef
                                    FROM  JobInstruction INNER JOIN
                                   JobAuditTrailDetail ON JobInstruction.Id = JobAuditTrailDetail.JobAuditTrailId INNER JOIN
                                   Finance ON JobInstruction.Id = Finance.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                JobInstruction model = new JobInstruction();
                {
                    model.Bil = _bil3++;

                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.JobSheetNo = reader.GetString(0);
                    }

                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.Contact_Person = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.InvoiceNo = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.Cust_Department = reader.GetString(3);
                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.JobNameIT = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.QuotationRef = reader.GetString(5);
                    }
                }
                viewPosting2.Add(model);
            }
            cn.Close();
        }


        List<JobInstruction> viewPosting3 = new List<JobInstruction>();


        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil3 = 1;
            cn.Open();
            command.CommandText = @"SELECT JobInstruction.QuotationRef, JobInstruction.JobSheetNo, JobInstruction.CreatedOn, Finance.InvoiceNo, 
                                  JobInstruction.Customer_Name, JobInstruction.Contact_Person, PostingManifest.Local, PostingManifest.Oversea, PostingManifest.Courier,
                                  PostingManifest.Re_turn, PostingManifest.PO_BOX, PostingManifest.Ins_Material, PostingManifest.InsertMMP, PostingManifest.Shred, PostingManifest.Hold
                                  FROM [IflowSeed].[dbo].[JobInstruction]
                                  LEFT JOIN [IflowSeed].[dbo].[Finance]
                                  On JobInstruction.Id = Finance.JobInstructionId
                                  LEFT JOIN [IflowSeed].[dbo].[PostingManifest]
                                  On JobInstruction.Id = PostingManifest.JobInstructionId                                  
                                  WHERE JobInstruction.Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                JobInstruction model = new JobInstruction();
                {
                    model.Bil = _bil3++;

                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.QuotationRef = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.JobSheetNo = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.CreatedOn = String.Format("{0:dd/MM/yyyy}", (DateTime)reader.GetDateTime(2));
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.InvoiceNo = reader.GetString(3);
                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Customer_Name = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Contact_Person = reader.GetString(5);
                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Local = reader.GetString(6);
                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.Oversea = reader.GetString(7);
                    }
                    if (reader.IsDBNull(8) == false)
                    {
                        ViewBag.Courier = reader.GetString(8);
                    }
                    if (reader.IsDBNull(9) == false)
                    {
                        ViewBag.Re_turn = reader.GetString(9);
                    }
                    if (reader.IsDBNull(10) == false)
                    {
                        ViewBag.PO_BOX = reader.GetString(10);
                    }
                    if (reader.IsDBNull(11) == false)
                    {
                        ViewBag.Ins_Material = reader.GetBoolean(11);
                    }
                    if (reader.IsDBNull(12) == false)
                    {
                        ViewBag.InsertMMP = reader.GetString(12);
                    }
                    if (reader.IsDBNull(13) == false)
                    {
                        ViewBag.Shred = reader.GetString(13);
                    }
                    if (reader.IsDBNull(13) == false)
                    {
                        ViewBag.Hold = reader.GetString(13);
                    }

                }
                viewPosting3.Add(model);
            }
            cn.Close();
        }


        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(Sst)=1
                                            THEN CONVERT(MONEY,Sst) ELSE 0 END)
                                            )
                                            AS [GrandTotalSst]
                                         FROM [IflowSeed].[dbo].[TblBilling]
                                         WHERE JobInstructionId=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    //ViewBag.GrandTotal = reader.GetDecimal(0);
                    //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                    ViewBag.GrandTotalSst = string.Format("{0:n}", reader.GetDecimal(0));


                }


            }
            cn.Close();

        }


        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(Sst)=1
                                            THEN CONVERT(MONEY,Sst) ELSE 0 END)
                                            )
                                            AS [GrandTotalSst]
                                         FROM [IflowSeed].[dbo].[TblMaterials]
                                         WHERE JobInstructionId=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    //ViewBag.GrandTotal = reader.GetDecimal(0);
                    //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                    ViewBag.GrandTOTMaterialSst = string.Format("{0:n}", reader.GetDecimal(0));


                }


            }
            cn.Close();

        }


        List<TblBilling> viewTblBillng = new List<TblBilling>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT TblBilling.ServiceChange, TblBilling.Postage, TblBilling.RateServie, TblBilling.CourierChanges, TblBilling.DeliveryCharge, TblBilling.Franking, TblBilling.SelfMailer, TblBilling.Others, TblBilling.Imprest, TblBilling.Others2, TblBilling.Others3, TblBilling.Others4, TblBilling.Others5, TblBilling.PrintingDuplex, TblBilling.Inserting1, TblBilling.Inserting2, TblBilling.Inserting3, TblBilling.Inserting4, TblBilling.BrochureInsert, TblBilling.MailBelow_5K, TblBilling.Handling, TblBilling.Sealing, TblBilling.Tearing, TblBilling.Folding, TblBilling.Sticking, TblBilling.Matching, 
                                    TblBilling.CDArchiving, TblBilling.Npc, TblBilling.EnvelopeType, TblBilling.EnvelopePrice, TblBilling.Paper
                                    FROM  JobInstruction LEFT OUTER JOIN
                                    TblBilling ON JobInstruction.Id = TblBilling.JobInstructionId
                                     WHERE JobInstruction.Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                TblBilling list = new TblBilling();
                if (reader.IsDBNull(0) == false)
                {
                    ViewBag.ServiceChange = reader.GetString(0);
                    list.ServiceChange = reader.GetString(0);
                }

                if (reader.IsDBNull(1) == false)
                {
                    ViewBag.Postage = reader.GetString(1);
                    list.Postage = reader.GetString(1);
                }
                if (reader.IsDBNull(2) == false)
                {
                    ViewBag.RateServie = reader.GetString(2);
                    list.RateServie = reader.GetString(2);
                }



                if (reader.IsDBNull(3) == false)
                {
                    ViewBag.CourierChanges = reader.GetString(3);
                    list.CourierChanges = reader.GetString(3);
                }

                if (reader.IsDBNull(4) == false)
                {
                    ViewBag.DeliveryCharge = reader.GetString(4);
                    list.DeliveryCharge = reader.GetString(4);
                }
                if (reader.IsDBNull(5) == false)
                {
                    ViewBag.Franking = reader.GetString(5);
                    list.Franking = reader.GetString(5);
                }
                if (reader.IsDBNull(6) == false)
                {
                    ViewBag.SelfMailer = reader.GetString(6);
                    list.SelfMailer = reader.GetString(6);

                }

                if (reader.IsDBNull(7) == false)
                {
                    ViewBag.Others = reader.GetString(7);
                    list.Others = reader.GetString(7);
                }
                if (reader.IsDBNull(8) == false)
                {
                    ViewBag.Imprest = reader.GetString(8);
                    list.Imprest = reader.GetString(8);
                }
                if (reader.IsDBNull(9) == false)
                {
                    ViewBag.Others2 = reader.GetString(9);
                    list.Others2 = reader.GetString(9);


                }
                if (reader.IsDBNull(10) == false)
                {
                    ViewBag.Others3 = reader.GetString(10);
                    list.Others3 = reader.GetString(10);

                }
                if (reader.IsDBNull(11) == false)
                {
                    ViewBag.Others4 = reader.GetString(11);
                    list.Others4 = reader.GetString(11);
                }
                if (reader.IsDBNull(12) == false)
                {
                    ViewBag.Others5 = reader.GetString(12);
                    list.Others5 = reader.GetString(12);
                }

                if (reader.IsDBNull(14) == false)
                {
                    ViewBag.PrintingDuplex = reader.GetString(14);
                    list.PrintingDuplex = reader.GetString(14);

                }
                if (reader.IsDBNull(15) == false)
                {
                    ViewBag.Inserting1 = reader.GetString(15);
                    list.Inserting1 = reader.GetString(15);
                }

                if (reader.IsDBNull(16) == false)
                {
                    ViewBag.Inserting2 = reader.GetString(16);
                    list.Inserting2 = reader.GetString(16);
                }
                if (reader.IsDBNull(17) == false)
                {
                    ViewBag.Inserting3 = reader.GetString(17);
                    list.Inserting3 = reader.GetString(17);
                }
                if (reader.IsDBNull(18) == false)
                {
                    ViewBag.Inserting4 = reader.GetString(18);
                    list.Inserting4 = reader.GetString(18);
                }
                if (reader.IsDBNull(19) == false)
                {
                    ViewBag.BrochureInsert = reader.GetString(19);
                    list.BrochureInsert = reader.GetString(19);
                }

                if (reader.IsDBNull(20) == false)
                {
                    ViewBag.MailBelow_5K = reader.GetString(20);
                    list.MailBelow_5K = reader.GetString(20);
                }
                if (reader.IsDBNull(21) == false)
                {
                    ViewBag.Handling = reader.GetString(21);
                    list.Handling = reader.GetString(21);
                }

                if (reader.IsDBNull(22) == false)
                {
                    ViewBag.Sealing = reader.GetString(22);
                    list.Sealing = reader.GetString(22);


                }

                if (reader.IsDBNull(23) == false)
                {
                    ViewBag.Tearing = reader.GetString(23);
                    list.Tearing = reader.GetString(23);
                }
                if (reader.IsDBNull(24) == false)
                {
                    ViewBag.Folding = reader.GetString(24);
                    list.Folding = reader.GetString(24);

                }
                if (reader.IsDBNull(25) == false)
                {
                    ViewBag.Sticking = reader.GetString(25);
                    list.Sticking = reader.GetString(25);

                }
                if (reader.IsDBNull(26) == false)
                {
                    ViewBag.Matching = reader.GetString(26);
                    list.Matching = reader.GetString(26);
                }
                if (reader.IsDBNull(26) == false)
                {
                    ViewBag.CDArchiving = reader.GetString(26);
                    list.CDArchiving = reader.GetString(26);
                }
                if (reader.IsDBNull(27) == false)
                {
                    ViewBag.Npc = reader.GetString(27);
                }

                if (reader.IsDBNull(28) == false)
                {
                    ViewBag.EnvelopeType = reader.GetString(28);
                    list.EnvelopeType = reader.GetString(28);
                }

                if (reader.IsDBNull(29) == false)
                {
                    ViewBag.EnvelopePrice = reader.GetString(29);
                    list.EnvelopePrice = reader.GetString(29);
                }
                if (reader.IsDBNull(30) == false)
                {
                    ViewBag.Paper = reader.GetString(30);
                    list.Paper = reader.GetString(30);

                }
            }

            cn.Close();
        }

        //retrieve table c
        List<MPRTableC> tableC = new List<MPRTableC>();
        decimal TotalAccountsQty = 0;
        decimal TotalImpressionQty = 0;
        decimal TotalPagesQty = 0;

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT JobAuditTrailDetail.FileId, JobAuditTrailDetail.ProcessDate, JobAuditTrailDetail.TimeProcessIt, JobAuditTrailDetail.AccQty, JobAuditTrailDetail.ImpQty, JobAuditTrailDetail.PageQty, JobAuditTrailDetail.JobInstructionId, JobInstruction.Id,JobAuditTrailDetail.JobNameIT
                                    FROM  JobInstruction INNER JOIN
                                   JobAuditTrailDetail ON JobInstruction.Id = JobAuditTrailDetail.JobAuditTrailId
                                  WHERE JobAuditTrailDetail.JobAuditTrailId=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();


            while (reader.Read())
            {

                tableC.Add(new MPRTableC
                {
                    FileId = reader.IsDBNull(0) ? null : reader.GetString(0),
                    ProcessDate = reader.IsDBNull(1) ? null : String.Format("{0:dd/MM/yyyy}", (DateTime)reader.GetDateTime(1)),
                    TimeProcessIt = reader.IsDBNull(2) ? null : reader.GetString(2),
                    AccQty = reader.IsDBNull(3) ? null : reader.GetString(3),
                    ImpQty = reader.IsDBNull(4) ? null : reader.GetString(4),
                    PageQty = reader.IsDBNull(5) ? null : reader.GetString(5)
                });

                if (reader.IsDBNull(3) == false)
                {
                    TotalAccountsQty += Decimal.Parse(reader.GetString(3));
                }
                if (reader.IsDBNull(4) == false)
                {
                    TotalImpressionQty += Decimal.Parse(reader.GetString(4));
                }
                if (reader.IsDBNull(5) == false)
                {
                    TotalPagesQty += Decimal.Parse(reader.GetString(5));
                }
                if (reader.IsDBNull(6) == false)
                {
                    ViewBag.JobNameIT = reader.GetString(0);
                }


            }

            cn.Close();
            ViewBag.tableC = tableC;
            ViewBag.TotalAccountsQty = TotalAccountsQty;
            ViewBag.TotalImpressionQty = TotalImpressionQty;
            ViewBag.TotalPagesQty = TotalPagesQty;
        }



        decimal TotalAmount = 0;
        decimal TotAmntSST = 0;
        decimal totalAmountSst = 0;
        decimal totVolume = 0;
        decimal TotalProcessingCharge_Postage = 0;
        decimal TotalAll = 0;


        //retrieve TblBillingService



        List<tblListBilling> listBillServies = new List<tblListBilling>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.ServiceChange,TblBilling.VolumeService,TblBilling.RateServie,TblBilling.TotalAmountService,TblBilling.Sst
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id  ";
            command.Parameters.AddWithValue("@Id", Id);


            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.ServiceChange = reader.GetString(0);
                        model2.ServiceChange = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeService = reader.GetString(1);
                        model2.VolumeService = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateServie = reader.GetString(2);
                        model2.RateServie = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountService = reader.GetString(3);
                        model2.TotalAmountService = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountSevice = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountSevice = GetTotalAmountSevice;


                    }

                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Sst = reader.GetString(4);
                        model2.Sst = reader.GetString(4);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    ////TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));



                }




                listBillServies.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSevices = listBillServies;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;





            }
        }


        //retrieve TblBillingmix
        List<tblListBilling> listBillMix = new List<tblListBilling>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeMix,TblBilling.RateMix,TblBilling.TotalAmountMix,TblBilling.Process,TblBilling.Sst,TblBilling.Mix
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id  ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeMix = reader.GetString(1);
                        model2.VolumeMix = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateMix = reader.GetString(2);
                        model2.RateMix = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountMix = reader.GetString(3);
                        model2.TotalAmountMix = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountMix = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountMix = GetTotalAmountMix;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Mix = reader.GetString(6);
                        model2.Mix = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMix.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMix = listBillMix;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;

            }
        }

        //retrieve TblBillingPostage
        List<tblListBilling> listBillPostages = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.ValuePostage,TblBilling.RatePostage,TblBilling.TotalAmountPostage,TblBilling.Process,TblBilling.Sst,TblBilling.Postage
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);

            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.ValuePostage = reader.GetString(1);
                        model2.ValuePostage = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RatePostage = reader.GetString(2);
                        model2.RatePostage = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountPostage = reader.GetString(3);
                        model2.TotalAmountPostage = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountPostage = GetTotalAmount + AddAmount;

                        ViewBag.GrandTotal = GetTotalAmountPostage;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Postage = reader.GetString(6);
                        model2.Postage = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillPostages.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingPostages = listBillPostages;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblBillingCourierChanges
        List<tblListBilling> listBillCourierChanges = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeCC,TblBilling.RateCC,TblBilling.TotalAmountCC,TblBilling.Process,TblBilling.Sst,TblBilling.CourierChanges
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeCC = reader.GetString(1);
                        model2.VolumeCC = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateCC = reader.GetString(2);
                        model2.RateCC = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountCC = reader.GetString(3);
                        model2.TotalAmountCC = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountCC = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountCC = GetTotalAmountCC;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.CourierChanges = reader.GetString(6);
                        model2.CourierChanges = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillCourierChanges.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingCourierChanges = listBillCourierChanges;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }



        //retrieve TblBillingDeliveryCharg
        List<tblListBilling> listBillDeliveryCharge = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeDC,TblBilling.RateDC,TblBilling.TotalAmountDC,TblBilling.Process,TblBilling.Sst,TblBilling.DeliveryCharge
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);

            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeDC = reader.GetString(1);
                        model2.VolumeDC = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateDC = reader.GetString(2);
                        model2.RateDC = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountDC = reader.GetString(3);
                        model2.TotalAmountDC = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountDC = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountDC = GetTotalAmountDC;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DeliveryCharge = reader.GetString(6);
                        model2.DeliveryCharge = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDeliveryCharge.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDeliveryCharge = listBillDeliveryCharge;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }



        //retrieve TblBillingDeliveryFranking
        List<tblListBilling> listBillFranking = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeF,TblBilling.RateF,TblBilling.TotalAmountF,TblBilling.Process,TblBilling.Sst,TblBilling.Franking
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeF = reader.GetString(1);
                        model2.VolumeF = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateF = reader.GetString(2);
                        model2.RateF = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountF = reader.GetString(3);
                        model2.TotalAmountF = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountF = GetTotalAmount + AddAmount;

                        ViewBag.GrandTotal = GetTotalAmountF;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Franking = reader.GetString(6);
                        model2.Franking = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }

                listBillFranking.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingFranking = listBillFranking;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;

            }
        }

        //retrieve TblBillingSelfmailer
        List<tblListBilling> listBillSelfMailer = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeS,TblBilling.RateS,TblBilling.TotalAmountS,TblBilling.Process,TblBilling.Sst,TblBilling.SelfMailer
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);

            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeS = reader.GetString(1);
                        model2.VolumeS = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateS = reader.GetString(2);
                        model2.RateS = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountS = reader.GetString(3);
                        model2.TotalAmountS = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountS = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountS = GetTotalAmountS;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.SelfMailer = reader.GetString(6);
                        model2.SelfMailer = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }

                listBillSelfMailer.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSelfMailer = listBillSelfMailer;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;

            }
        }



        //retrieve TblBillingImprest
        List<tblListBilling> listBillImprest = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.ValueImprest,TblBilling.RateImprest,TblBilling.TotalAmountImprest,TblBilling.Process,TblBilling.Sst,TblBilling.Imprest
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);

            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.ValueImprest = reader.GetString(1);
                        model2.ValueImprest = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateImprest = reader.GetString(2);
                        model2.RateImprest = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountImprest = reader.GetString(3);
                        model2.TotalAmountImprest = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountImprest = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountImprest = GetTotalAmountImprest;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Imprest = reader.GetString(6);
                        model2.Imprest = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillImprest.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingImprest = listBillImprest;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }



        //retrieve TblBillingOthers
        List<tblListBilling> listBillOthers = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeO,TblBilling.RateO,TblBilling.TotalAmountO,TblBilling.Process,TblBilling.Sst,TblBilling.Others
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeO = reader.GetString(1);
                        model2.VolumeO = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateO = reader.GetString(2);
                        model2.RateO = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountO = reader.GetString(3);
                        model2.TotalAmountO = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountO = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountO = GetTotalAmountO;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Others = reader.GetString(6);
                        model2.Others = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillOthers.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingOthers = listBillOthers;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;

            }
        }

        //retrieve TblBillingOthers2
        List<tblListBilling> listBillOthers2 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeO2,TblBilling.RateO2,TblBilling.TotalAmountO2,TblBilling.Process,TblBilling.Sst,TblBilling.Others2
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);

            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeO2 = reader.GetString(1);
                        model2.VolumeO2 = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateO2 = reader.GetString(2);
                        model2.RateO2 = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountO2 = reader.GetString(3);
                        model2.TotalAmountO2 = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountO2 = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountO2 = GetTotalAmountO2;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Others2 = reader.GetString(6);
                        model2.Others2 = reader.GetString(6);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));

                }

                listBillOthers2.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingOthers2 = listBillOthers2;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }




        //retrieve TblBillingOthers3
        List<tblListBilling> listBillOthers3 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeO3,TblBilling.RateO3,TblBilling.TotalAmountO3,TblBilling.Process,TblBilling.Sst,TblBilling.Others3
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeO3 = reader.GetString(1);
                        model2.VolumeO3 = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateO3 = reader.GetString(2);
                        model2.RateO3 = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountO3 = reader.GetString(3);
                        model2.TotalAmountO3 = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountO3 = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountO3 = GetTotalAmountO3;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Others3 = reader.GetString(6);
                        model2.Others3 = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));

                }

                listBillOthers3.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingOthers3 = listBillOthers3;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblBillingOthers4
        List<tblListBilling> listBillOthers4 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeO4,TblBilling.RateO4,TblBilling.TotalAmountO4,TblBilling.Process,TblBilling.Sst,TblBilling.Others4
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeO4 = reader.GetString(1);
                        model2.VolumeO4 = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateO4 = reader.GetString(2);
                        model2.RateO4 = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountO4 = reader.GetString(3);
                        model2.TotalAmountO4 = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountO4 = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountO4 = GetTotalAmountO4;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Others4 = reader.GetString(6);
                        model2.Others4 = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillOthers4.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingOthers4 = listBillOthers4;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }



        //retrieve TblBillingOthers5
        List<tblListBilling> listBillOthers5 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeO5,TblBilling.RateO5,TblBilling.TotalAmountO5,TblBilling.Process,TblBilling.Sst,TblBilling.Others5
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id   ";
            command.Parameters.AddWithValue("@Id", Id);

            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeO5 = reader.GetString(1);
                        model2.VolumeO5 = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateO5 = reader.GetString(2);
                        model2.RateO5 = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountO5 = reader.GetString(3);
                        model2.TotalAmountO5 = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountO4 = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountO4 = GetTotalAmountO4;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Others5 = reader.GetString(6);
                        model2.Others5 = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillOthers5.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingOthers5 = listBillOthers5;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblBillingOthers6
        List<tblListBilling> listBillOthers6 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeO6,TblBilling.RateO6,TblBilling.TotalAmountO6,TblBilling.Process,TblBilling.Sst,TblBilling.Others6
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id   ";
            command.Parameters.AddWithValue("@Id", Id);

            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeO6 = reader.GetString(1);
                        model2.VolumeO6 = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateO6 = reader.GetString(2);
                        model2.RateO6 = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountO6 = reader.GetString(3);
                        model2.TotalAmountO6 = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountO6 = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountO6 = GetTotalAmountO6;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Others6 = reader.GetString(6);
                        model2.Others6 = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillOthers6.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingOthers6 = listBillOthers6;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblBillingOthers7
        List<tblListBilling> listBillOthers7 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeO7,TblBilling.RateO7,TblBilling.TotalAmountO7,TblBilling.Process,TblBilling.Sst,TblBilling.Others7
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id   ";
            command.Parameters.AddWithValue("@Id", Id);

            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeO7 = reader.GetString(1);
                        model2.VolumeO7 = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateO7 = reader.GetString(2);
                        model2.RateO7 = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountO7 = reader.GetString(3);
                        model2.TotalAmountO7 = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountO7 = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountO7 = GetTotalAmountO7;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Others7 = reader.GetString(6);
                        model2.Others7 = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillOthers7.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingOthers7 = listBillOthers7;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblBillingOthers8
        List<tblListBilling> listBillOthers8 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeO8,TblBilling.RateO8,TblBilling.TotalAmountO8,TblBilling.Process,TblBilling.Sst,TblBilling.Others8
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id   ";
            command.Parameters.AddWithValue("@Id", Id);

            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeO8 = reader.GetString(1);
                        model2.VolumeO8 = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateO8 = reader.GetString(2);
                        model2.RateO8 = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountO8 = reader.GetString(3);
                        model2.TotalAmountO8 = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountO8 = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountO8 = GetTotalAmountO8;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Others8 = reader.GetString(6);
                        model2.Others8 = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillOthers8.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingOthers8 = listBillOthers8;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblBillingOthers9
        List<tblListBilling> listBillOthers9 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeO9,TblBilling.RateO9,TblBilling.TotalAmountO9,TblBilling.Process,TblBilling.Sst,TblBilling.Others9
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id   ";
            command.Parameters.AddWithValue("@Id", Id);

            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeO9 = reader.GetString(1);
                        model2.VolumeO9 = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateO9 = reader.GetString(2);
                        model2.RateO9 = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountO9 = reader.GetString(3);
                        model2.TotalAmountO9 = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountO9 = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountO9 = GetTotalAmountO9;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Others9 = reader.GetString(6);
                        model2.Others9 = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillOthers9.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingOthers9 = listBillOthers9;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblBillingOthers10
        List<tblListBilling> listBillOthers10 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.Volume10,TblBilling.Rate10,TblBilling.TotalAmount10,TblBilling.Process,TblBilling.Sst,TblBilling.Others10
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id   ";
            command.Parameters.AddWithValue("@Id", Id);

            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.Volume10 = reader.GetString(1);
                        model2.Volume10 = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.Rate10 = reader.GetString(2);
                        model2.Rate10 = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmount10 = reader.GetString(3);
                        model2.TotalAmount10 = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmount10 = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmount10 = GetTotalAmount10;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Others10 = reader.GetString(6);
                        model2.Others10 = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillOthers10.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingOthers10 = listBillOthers10;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }







        //retrieve TblBillingPrintingDuplex
        List<tblListBilling> listBillPrintingDuplex = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.PD_Volume,TblBilling.PD_Rate,TblBilling.PD_Total,TblBilling.Process,TblBilling.Sst,TblBilling.PrintingDuplex,TblBilling.LBPrintingDuplex2
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.PD_Volume = reader.GetString(1);
                        model2.PD_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.PD_Rate = reader.GetString(2);
                        model2.PD_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.PD_Total = reader.GetString(3);
                        model2.PD_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetPD_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetPD_Total = GetPD_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.PrintingDuplex = reader.GetString(6);
                        model2.PrintingDuplex = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBPrintingDuplex2 = reader.GetString(7);
                        model2.LBPrintingDuplex2 = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillPrintingDuplex.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingPrintingDuplex = listBillPrintingDuplex;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblBillingInserting1
        List<tblListBilling> listBillInserting1 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.IS1_Volume,TblBilling.IS1_Rate,TblBilling.IS1_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Inserting1,TblBilling.LBInserting1
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.IS1_Volume = reader.GetString(1);
                        model2.IS1_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.IS1_Rate = reader.GetString(2);
                        model2.IS1_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.IS1_Total = reader.GetString(3);
                        model2.IS1_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetIS1_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetIS1_Total = GetIS1_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Inserting1 = reader.GetString(6);
                        model2.Inserting1 = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBInserting1 = reader.GetString(7);
                        model2.LBInserting1 = reader.GetString(7);

                    }

                    //*/totVolume += Decimal.Parse(reader.GetString(1));*/
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillInserting1.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingInserting1 = listBillInserting1;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblBillingInserting2
        List<tblListBilling> listBillInserting2 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.IS2_Volume,TblBilling.IS2_Rate,TblBilling.IS2_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Inserting2,TblBilling.LBInserting2
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.IS2_Volume = reader.GetString(1);
                        model2.IS2_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.IS2_Rate = reader.GetString(2);
                        model2.IS2_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.IS2_Total = reader.GetString(3);
                        model2.IS2_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetIS2_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetIS2_Total = GetIS2_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Inserting2 = reader.GetString(6);
                        model2.Inserting2 = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBInserting2 = reader.GetString(7);
                        model2.LBInserting2 = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillInserting2.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingInserting2 = listBillInserting2;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblBillingInserting3
        List<tblListBilling> listBillInserting3 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.IS3_Volume,TblBilling.IS3_Rate,TblBilling.IS3_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Inserting3,TblBilling.LBInserting3
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.IS3_Volume = reader.GetString(1);
                        model2.IS3_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.IS3_Rate = reader.GetString(2);
                        model2.IS3_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.IS3_Total = reader.GetString(3);
                        model2.IS3_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetIS3_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetIS3_Total = GetIS3_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Inserting3 = reader.GetString(6);
                        model2.Inserting3 = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBInserting3 = reader.GetString(7);
                        model2.LBInserting3 = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillInserting3.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingInserting3 = listBillInserting3;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblBillingInserting4
        List<tblListBilling> listBillInserting4 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.IS4_Volume,TblBilling.IS4_Rate,TblBilling.IS4_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Inserting4,TblBilling.LBInserting4
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.IS4_Volume = reader.GetString(1);
                        model2.IS4_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.IS4_Rate = reader.GetString(2);
                        model2.IS4_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.IS4_Total = reader.GetString(3);
                        model2.IS4_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetIS4_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetIS4_Total = GetIS4_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Inserting4 = reader.GetString(6);
                        model2.Inserting4 = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBInserting4 = reader.GetString(7);
                        model2.LBInserting4 = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillInserting4.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingInserting4 = listBillInserting4;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblBillingBrochureInsert
        List<tblListBilling> listBillBrochureInsert = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.BI_Volume,TblBilling.BI_Rate,TblBilling.BI_Total,TblBilling.Process,TblBilling.Sst,TblBilling.BrochureInsert,TblBilling.LBBrochureInsert
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.BI_Volume = reader.GetString(1);
                        model2.BI_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.BI_Rate = reader.GetString(2);
                        model2.BI_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.BI_Total = reader.GetString(3);
                        model2.BI_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetBI_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetBI_Total = GetBI_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.BrochureInsert = reader.GetString(6);
                        model2.BrochureInsert = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBBrochureInsert = reader.GetString(7);
                        model2.LBBrochureInsert = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillBrochureInsert.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingBrochureInsert = listBillBrochureInsert;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblBillingMailBelow_5K
        List<tblListBilling> listBillMailBelow_5K = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.M5_Volume,TblBilling.M5_Rate,TblBilling.M5_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MailBelow_5K,TblBilling.LBMailBelow_5K
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.M5_Volume = reader.GetString(1);
                        model2.M5_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.M5_Rate = reader.GetString(2);
                        model2.M5_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.M5_Total = reader.GetString(3);
                        model2.M5_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetM5_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetM5_Total = GetM5_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MailBelow_5K = reader.GetString(6);
                        model2.MailBelow_5K = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMailBelow_5K = reader.GetString(7);
                        model2.LBMailBelow_5K = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMailBelow_5K.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMailBelow_5K = listBillMailBelow_5K;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblBillingHandling
        List<tblListBilling> listBillHandling = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.HL_Volume,TblBilling.HL_Rate,TblBilling.HL_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Handling,TblBilling.LBHandling
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.HL_Volume = reader.GetString(1);
                        model2.HL_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.HL_Rate = reader.GetString(2);
                        model2.HL_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.HL_Total = reader.GetString(3);
                        model2.HL_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetHL_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetHL_Total = GetHL_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Handling = reader.GetString(6);
                        model2.Handling = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBHandling = reader.GetString(7);
                        model2.LBHandling = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillHandling.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingHandling = listBillHandling;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblBillingSealing
        List<tblListBilling> listBillSealing = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.PIS_Volume,TblBilling.PIS_Rate,TblBilling.PIS_Total,TblBilling.Process,TblBilling.Sst,TblBilling.PI_Sealing,TblBilling.LBPI_Sealing
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.PIS_Volume = reader.GetString(1);
                        model2.PIS_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.PIS_Rate = reader.GetString(2);
                        model2.PIS_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.PIS_Total = reader.GetString(3);
                        model2.PIS_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetPIS_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetPIS_Total = GetPIS_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.PI_Sealing = reader.GetString(6);
                        model2.PI_Sealing = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBPI_Sealing = reader.GetString(7);
                        model2.LBPI_Sealing = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSealing.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSealing = listBillSealing;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblBillingFolding
        List<tblListBilling> listBillFolding = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.PIF_Volume,TblBilling.PIF_Rate,TblBilling.PIF_Total,TblBilling.Process,TblBilling.Sst,TblBilling.PI_Folding,TblBilling.LBPI_Folding
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.PIF_Volume = reader.GetString(1);
                        model2.PIF_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.PIF_Rate = reader.GetString(2);
                        model2.PIF_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.PIF_Total = reader.GetString(3);
                        model2.PIF_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetPIF_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetPIF_Total = GetPIF_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.PI_Folding = reader.GetString(6);
                        model2.PI_Folding = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBPI_Folding = reader.GetString(7);
                        model2.LBPI_Folding = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillFolding.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingFolding = listBillFolding;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblBillingSticking
        List<tblListBilling> listBillSticking = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.SK_Volume,TblBilling.SK_Rate,TblBilling.SK_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Sticking,TblBilling.LBSticking
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.SK_Volume = reader.GetString(1);
                        model2.SK_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.SK_Rate = reader.GetString(2);
                        model2.SK_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.SK_Total = reader.GetString(3);
                        model2.SK_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetSK_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetSK_Total = GetSK_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Sticking = reader.GetString(6);
                        model2.Sticking = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBSticking = reader.GetString(7);
                        model2.LBSticking = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSticking.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSticking = listBillSticking;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }



        //retrieve TblBillingTearing
        List<tblListBilling> listBillTearing = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.PIT_Volume,TblBilling.PIT_Rate,TblBilling.PIT_Total,TblBilling.Process,TblBilling.Sst,TblBilling.PI_Tearing,TblBilling.LBPI_Tearing
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.PIT_Volume = reader.GetString(1);
                        model2.PIT_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.PIT_Rate = reader.GetString(2);
                        model2.PIT_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.PIT_Total = reader.GetString(3);
                        model2.PIT_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetPIT_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetPIT_Total = GetPIT_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.PI_Tearing = reader.GetString(6);
                        model2.PI_Tearing = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBPI_Tearing = reader.GetString(7);
                        model2.LBPI_Tearing = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillTearing.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingTearing = listBillTearing;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }



        //retrieve TblBillingMatching
        List<tblListBilling> listBillMatching = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MG_Volume,TblBilling.MG_Rate,TblBilling.MG_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Matching,TblBilling.LBMatching
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MG_Volume = reader.GetString(1);
                        model2.MG_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MG_Rate = reader.GetString(2);
                        model2.MG_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MG_Total = reader.GetString(3);
                        model2.MG_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMG_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMG_Total = GetMG_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Matching = reader.GetString(6);
                        model2.Matching = reader.GetString(6);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Matching = reader.GetString(6);
                        model2.Matching = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMatching = reader.GetString(7);
                        model2.LBMatching = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMatching.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMatching = listBillMatching;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblCDArchiving
        List<tblListBilling> listBillCDArchiving = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.CDA_Volume,TblBilling.CDA_Rate,TblBilling.CDA_Total,TblBilling.Process,TblBilling.Sst,TblBilling.CDArchiving,TblBilling.LBCDArchiving
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.CDA_Volume = reader.GetString(1);
                        model2.CDA_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.CDA_Rate = reader.GetString(2);
                        model2.CDA_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.CDA_Total = reader.GetString(3);
                        model2.CDA_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetCDA_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetCDA_Total = GetCDA_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.CDArchiving = reader.GetString(6);
                        model2.CDArchiving = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBCDArchiving = reader.GetString(7);
                        model2.LBCDArchiving = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillCDArchiving.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingCDArchiving = listBillCDArchiving;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblNpc
        List<tblListBilling> listBillNpc = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.NPC_Volume,TblBilling.NPC_Rate,TblBilling.NPC_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Npc,TblBilling.LBNpc
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.NPC_Volume = reader.GetString(1);
                        model2.NPC_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.NPC_Rate = reader.GetString(2);
                        model2.NPC_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.NPC_Total = reader.GetString(3);
                        model2.NPC_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetNPC_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetNPC_Total = GetNPC_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Npc = reader.GetString(6);
                        model2.Npc = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBNpc = reader.GetString(7);
                        model2.LBNpc = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillNpc.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingNpc = listBillNpc;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblEnvelopeType
        List<tblListBilling> listBillEnvelopeType = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.ET_Volume,TblBilling.ET_Rate,TblBilling.ET_Total,TblBilling.Process,TblBilling.Sst,TblBilling.EnvelopeType,TblBilling.LBPI_EnvelopeType
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.ET_Volume = reader.GetString(1);
                        model2.ET_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.ET_Rate = reader.GetString(2);
                        model2.ET_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.ET_Total = reader.GetString(3);
                        model2.ET_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetET_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetET_Total = GetET_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.EnvelopeType = reader.GetString(6);
                        model2.EnvelopeType = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBPI_EnvelopeType = reader.GetString(7);
                        model2.LBPI_EnvelopeType = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillEnvelopeType.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingEnvelopeType = listBillEnvelopeType;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblEnvelopePrice
        List<tblListBilling> listBillEnvelopePrice = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.EP_Volume,TblBilling.EP_Rate,TblBilling.EP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.EnvelopePrice,TblBilling.LBPI_EnvelopePrice
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.EP_Volume = reader.GetString(1);
                        model2.EP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.EP_Rate = reader.GetString(2);
                        model2.EP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.EP_Total = reader.GetString(3);
                        model2.EP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetEP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetEP_Total = GetEP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.EnvelopePrice = reader.GetString(6);
                        model2.EnvelopePrice = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBPI_EnvelopePrice = reader.GetString(7);
                        model2.LBPI_EnvelopePrice = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillEnvelopePrice.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingEnvelopePrice = listBillEnvelopePrice;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblPaper
        List<tblListBilling> listBillPaper = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.P_Volume,TblBilling.P_Rate,TblBilling.P_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Paper,TblBilling.LBPI_Paper
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.P_Volume = reader.GetString(1);
                        model2.P_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.P_Rate = reader.GetString(2);
                        model2.P_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.P_Total = reader.GetString(3);
                        model2.P_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetP_Total = GetP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Paper = reader.GetString(6);
                        model2.Paper = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBPI_Paper = reader.GetString(7);
                        model2.LBPI_Paper = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillPaper.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingPaper = listBillPaper;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }



        //retrieve TblPaperPrice
        List<tblListBilling> listBillPaperPrice = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.PP_Volume,TblBilling.PP_Rate,TblBilling.PP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.PaperPrice,TblBilling.LBPI_PaperPrice
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.PP_Volume = reader.GetString(1);
                        model2.PP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.PP_Rate = reader.GetString(2);
                        model2.PP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.PP_Total = reader.GetString(3);
                        model2.PP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetPP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetPP_Total = GetPP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.PaperPrice = reader.GetString(6);
                        model2.PaperPrice = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBPI_PaperPrice = reader.GetString(7);
                        model2.LBPI_PaperPrice = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillPaperPrice.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingPaperPrice = listBillPaperPrice;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblSM_PrintingSM
        List<tblListBilling> listBillSM_PrintingSM = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.SMPG_Volume,TblBilling.SMPG_Rate,TblBilling.SMPG_Total,TblBilling.Process,TblBilling.Sst,TblBilling.SM_PrintingSM,TblBilling.LBSM_PrintingSM
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.SMPG_Volume = reader.GetString(1);
                        model2.SMPG_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.SMPG_Rate = reader.GetString(2);
                        model2.SMPG_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.SMPG_Total = reader.GetString(3);
                        model2.SMPG_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetSMPG_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetSM_Total = GetSMPG_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.SMPG_PrintingSM = reader.GetString(6);
                        model2.SMPG_PrintingSM = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBSMPG_PrintingSM = reader.GetString(7);
                        model2.LBSMPG_PrintingSM = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSM_PrintingSM.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSM_PrintingSM = listBillSM_PrintingSM;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblSM_SM_SM_Material
        List<tblListBilling> listBillSM_SM_Material = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.SMM_Volume,TblBilling.SMM_Rate,TblBilling.SMM_Total,TblBilling.Process,TblBilling.Sst,TblBilling.SM_SM_Material,TblBilling.LBSM_SM_Material
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.SMM_Volume = reader.GetString(1);
                        model2.SMM_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.SMM_Rate = reader.GetString(2);
                        model2.SMM_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.SMM_Total = reader.GetString(3);
                        model2.SMM_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetSMM_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetSMM_Total = GetSMM_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.SM_SM_Material = reader.GetString(6);
                        model2.SM_SM_Material = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBSM_SM_Material = reader.GetString(7);
                        model2.LBSM_SM_Material = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSM_SM_Material.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSM_SM_Material = listBillSM_SM_Material;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblSM_MailBelow_5K
        List<tblListBilling> listBillSM_MailBelow_5K = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.SM5_Volume,TblBilling.SM5_Rate,TblBilling.SM5_Total,TblBilling.Process,TblBilling.Sst,TblBilling.SM_MailBelow_5K, TblBilling.LBSM_MailBelow_5K
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.SM5_Volume = reader.GetString(1);
                        model2.SM5_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.SM5_Rate = reader.GetString(2);
                        model2.SM5_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.SM5_Total = reader.GetString(3);
                        model2.SM5_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetSM5_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetSM5_Total = GetSM5_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.SM_MailBelow_5K = reader.GetString(6);
                        model2.SM_MailBelow_5K = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBSM_MailBelow_5K = reader.GetString(7);
                        model2.LBSM_MailBelow_5K = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSM_MailBelow_5K.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSM_MailBelow_5K = listBillSM_MailBelow_5K;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblSM_Handling
        List<tblListBilling> listBillSM_Handling = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.SMH_Volume,TblBilling.SMH_Rate,TblBilling.SMH_Total,TblBilling.Process,TblBilling.Sst,TblBilling.SM_Handling,TblBilling.LBSM_Handling
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.SMH_Volume = reader.GetString(1);
                        model2.SMH_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.SMH_Rate = reader.GetString(2);
                        model2.SMH_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.SMH_Total = reader.GetString(3);
                        model2.SMH_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetSMH_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetSMH_Total = GetSMH_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.SM_Handling = reader.GetString(6);
                        model2.SM_Handling = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBSM_Handling = reader.GetString(7);
                        model2.LBSM_Handling = reader.GetString(7);

                    }


                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSM_Handling.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSM_Handling = listBillSM_Handling;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblSM_Paper
        List<tblListBilling> listBillSM_Paper = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.SMP_Volume,TblBilling.SMP_Rate,TblBilling.SMP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.SM_Paper,TblBilling.LBSM_Paper
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.SMP_Volume = reader.GetString(1);
                        model2.SMP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.SMP_Rate = reader.GetString(2);
                        model2.SMP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.SMP_Total = reader.GetString(3);
                        model2.SMP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetSMP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetSMP_Total = GetSMP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.SM_Paper = reader.GetString(6);
                        model2.SM_Paper = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBSM_Paper = reader.GetString(7);
                        model2.LBSM_Paper = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSM_Paper.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSM_Paper = listBillSM_Paper;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblSM_PaperPrice
        List<tblListBilling> listBillSM_PaperPrice = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.SMPP_Volume,TblBilling.SMPP_Rate,TblBilling.SMPP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.SM_PaperPrice,TblBilling.LBSM_PaperPrice
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.SMPP_Volume = reader.GetString(1);
                        model2.SMPP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.SMPP_Rate = reader.GetString(2);
                        model2.SMPP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.SMPP_Total = reader.GetString(3);
                        model2.SMPP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetSMPP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetSMPP_Total = GetSMPP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.SM_PaperPrice = reader.GetString(6);
                        model2.SM_PaperPrice = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBSM_PaperPrice = reader.GetString(7);
                        model2.LBSM_PaperPrice = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSM_PaperPrice.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSM_PaperPrice = listBillSM_PaperPrice;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblSM_Paper2
        List<tblListBilling> listBillSM_Paper2 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.SMP2_Volume,TblBilling.SMP2_Rate,TblBilling.SMP2_Total,TblBilling.Process,TblBilling.Sst,TblBilling.SM_Paper2,TblBilling.LBSM_Paper2
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.SMP2_Volume = reader.GetString(1);
                        model2.SMP2_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.SMP2_Rate = reader.GetString(2);
                        model2.SMP2_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.SMP2_Total = reader.GetString(3);
                        model2.SMP2_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetSMP2_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetSMP2_Total = GetSMP2_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.SM_Paper2 = reader.GetString(6);
                        model2.SM_Paper2 = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBSM_Paper2 = reader.GetString(7);
                        model2.LBSM_Paper2 = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSM_Paper2.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSM_Paper2 = listBillSM_Paper2;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblSM_PaperPrice2
        List<tblListBilling> listBillSM_PaperPrice2 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.SMPP2_Volume,TblBilling.SMPP2_Rate,TblBilling.SMPP2_Total,TblBilling.Process,TblBilling.Sst,TblBilling.SM_PaperPrice2,TblBilling.LBSM_PaperPrice2
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.SMPP2_Volume = reader.GetString(1);
                        model2.SMPP2_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.SMPP2_Rate = reader.GetString(2);
                        model2.SMPP2_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.SMPP_Total = reader.GetString(3);
                        model2.SMPP2_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetSMPP2_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetSMPP_Total = GetSMP2_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.SM_PaperPrice2 = reader.GetString(6);
                        model2.SM_PaperPrice2 = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBSM_PaperPrice2 = reader.GetString(7);
                        model2.LBSM_PaperPrice2 = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSM_PaperPrice2.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSM_PaperPrice2 = listBillSM_PaperPrice2;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_PrintingDuplex
        List<tblListBilling> listBillMMP_PrintingDuplex = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPPD_Volume,TblBilling.MMPPD_Rate,TblBilling.MMPPD_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_PrintingDuplex,TblBilling.LBMMP_PrintingDuplex
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPPD_Volume = reader.GetString(1);
                        model2.MMPPD_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPPD_Rate = reader.GetString(2);
                        model2.MMPPD_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPPD_Total = reader.GetString(3);
                        model2.MMPPD_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPPD_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPD_Total = GetMMPPD_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_PrintingDuplex = reader.GetString(6);
                        model2.MMP_PrintingDuplex = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_PrintingDuplex = reader.GetString(7);
                        model2.LBMMP_PrintingDuplex = reader.GetString(7);

                    }




                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_PrintingDuplex.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_PrintingDuplex = listBillMMP_PrintingDuplex;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_FirstInsert
        List<tblListBilling> listBillMMP_FirstInsert = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPFI_Volume,TblBilling.MMPFI_Rate,TblBilling.MMPFI_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_FirstInsert,TblBilling.LBMMP_FirstInsert
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPFI_Volume = reader.GetString(1);
                        model2.MMPFI_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPFI_Rate = reader.GetString(2);
                        model2.MMPFI_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPFI_Total = reader.GetString(3);
                        model2.MMPFI_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPFI_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPFI_Total = GetMMPFI_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_FirstInsert = reader.GetString(6);
                        model2.MMP_FirstInsert = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_FirstInsert = reader.GetString(7);
                        model2.LBMMP_FirstInsert = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_FirstInsert.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_FirstInsert = listBillMMP_FirstInsert;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_SecondInsert
        List<tblListBilling> listBillMMP_SecondInsert = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPSI_Volume,TblBilling.MMPSI_Rate,TblBilling.MMPSI_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_SecondInsert,TblBilling.LBMMP_SecondInsert
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPSI_Volume = reader.GetString(1);
                        model2.MMPSI_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPSI_Rate = reader.GetString(2);
                        model2.MMPSI_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPSI_Total = reader.GetString(3);
                        model2.MMPSI_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPSI_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPSI_Total = GetMMPSI_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_SecondInsert = reader.GetString(6);
                        model2.MMP_SecondInsert = reader.GetString(6);

                    }


                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_SecondInsert = reader.GetString(7);
                        model2.LBMMP_SecondInsert = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    ////TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_SecondInsert.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_SecondInsert = listBillMMP_SecondInsert;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_InsertingMMP
        List<tblListBilling> listBillMMP_InsertingMMP = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPI_Volume,TblBilling.MMPI_Rate,TblBilling.MMPI_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_InsertingMMP,TblBilling.LBMMP_InsertingMMP
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPI_Volume = reader.GetString(1);
                        model2.MMPI_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPI_Rate = reader.GetString(2);
                        model2.MMPI_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPI_Total = reader.GetString(3);
                        model2.MMPI_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPI_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPI_Total = GetMMPI_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_InsertingMMP = reader.GetString(6);
                        model2.MMP_InsertingMMP = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_InsertingMMP = reader.GetString(7);
                        model2.LBMMP_InsertingMMP = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_InsertingMMP.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_InsertingMMP = listBillMMP_InsertingMMP;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_BrochureInsert
        List<tblListBilling> listBillMMP_BrochureInsert = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPBI_Volume,TblBilling.MMPBI_Rate,TblBilling.MMPBI_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_BrochureInsert,TblBilling.LBMMP_BrochureInsert
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPBI_Volume = reader.GetString(1);
                        model2.MMPBI_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPBI_Rate = reader.GetString(2);
                        model2.MMPBI_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPBI_Total = reader.GetString(3);
                        model2.MMPBI_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPBI_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPBI_Total = GetMMPBI_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_BrochureInsert = reader.GetString(6);
                        model2.MMP_BrochureInsert = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_BrochureInsert = reader.GetString(7);
                        model2.LBMMP_BrochureInsert = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_BrochureInsert.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_BrochureInsert = listBillMMP_BrochureInsert;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblMMP_MailBelow_5K
        List<tblListBilling> listBillMMP_MailBelow_5K = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMP5_Volume,TblBilling.MMP5_Rate,TblBilling.MMP5_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_MailBelow_5K,TblBilling.LBMMP_MailBelow_5K
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMP5_Volume = reader.GetString(1);
                        model2.MMP5_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMP5_Rate = reader.GetString(2);
                        model2.MMP5_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMP5_Total = reader.GetString(3);
                        model2.MMP5_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMP5_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMP5_Total = GetMMP5_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_MailBelow_5K = reader.GetString(6);
                        model2.MMP_MailBelow_5K = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_MailBelow_5K = reader.GetString(7);
                        model2.LBMMP_MailBelow_5K = reader.GetString(7);

                    }


                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_MailBelow_5K.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_MailBelow_5K = listBillMMP_MailBelow_5K;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_Handling
        List<tblListBilling> listBillMMP_Handling = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPH_Volume,TblBilling.MMPH_Rate,TblBilling.MMPH_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_Handling,TblBilling.LBMMP_Handling
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPH_Volume = reader.GetString(1);
                        model2.MMPH_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPH_Rate = reader.GetString(2);
                        model2.MMPH_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPH_Total = reader.GetString(3);
                        model2.MMPH_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPH_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPH_Total = GetMMPH_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_Handling = reader.GetString(6);
                        model2.MMP_Handling = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_Handling = reader.GetString(7);
                        model2.LBMMP_Handling = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_Handling.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_Handling = listBillMMP_Handling;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_Sealing
        List<tblListBilling> listBillMMP_Sealing = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPS_Volume,TblBilling.MMPS_Rate,TblBilling.MMPS_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_Sealing,TblBilling.LBMMP_Sealing
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPS_Volume = reader.GetString(1);
                        model2.MMPS_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPS_Rate = reader.GetString(2);
                        model2.MMPS_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPS_Total = reader.GetString(3);
                        model2.MMPS_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPS_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPS_Total = GetMMPS_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_Sealing = reader.GetString(6);
                        model2.MMP_Sealing = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_Sealing = reader.GetString(7);
                        model2.LBMMP_Sealing = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_Sealing.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_Sealing = listBillMMP_Sealing;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_Tearing
        List<tblListBilling> listBillMMP_Tearing = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPT_Volume,TblBilling.MMPT_Rate,TblBilling.MMPT_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_Tearing,TblBilling.LBMMP_Tearing
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPT_Volume = reader.GetString(1);
                        model2.MMPT_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPT_Rate = reader.GetString(2);
                        model2.MMPT_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPT_Total = reader.GetString(3);
                        model2.MMPT_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPT_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPT_Total = GetMMPT_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_Tearing = reader.GetString(6);
                        model2.MMP_Tearing = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_Tearing = reader.GetString(7);
                        model2.LBMMP_Tearing = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_Tearing.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_Tearing = listBillMMP_Tearing;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_Folding
        List<tblListBilling> listBillMMP_Folding = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPF_Volume,TblBilling.MMPF_Rate,TblBilling.MMPF_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_Folding,TblBilling.LBMMP_Folding
                                   FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                 On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPF_Volume = reader.GetString(1);
                        model2.MMPF_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPF_Rate = reader.GetString(2);
                        model2.MMPF_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPF_Total = reader.GetString(3);
                        model2.MMPF_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPF_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPF_Total = GetMMPF_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_Folding = reader.GetString(6);
                        model2.MMP_Folding = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_Folding = reader.GetString(7);
                        model2.LBMMP_Folding = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_Folding.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_Folding = listBillMMP_Folding;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_Sticking
        List<tblListBilling> listBillMMP_Sticking = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPST_Volume,TblBilling.MMPST_Rate,TblBilling.MMPST_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_Sticking,TblBilling.LBMMP_Sticking
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPST_Volume = reader.GetString(1);
                        model2.MMPST_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPST_Rate = reader.GetString(2);
                        model2.MMPST_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPST_Total = reader.GetString(3);
                        model2.MMPST_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPST_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPST_Total = GetMMPST_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_Sticking = reader.GetString(6);
                        model2.MMP_Sticking = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_Sticking = reader.GetString(7);
                        model2.LBMMP_Sticking = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_Sticking.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_Sticking = listBillMMP_Sticking;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblMMP_Labelling
        List<tblListBilling> listBillMMP_Labelling = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPL_Volume,TblBilling.MMPL_Rate,TblBilling.MMPL_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_Labelling,TblBilling.LBMMP_Labelling
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPL_Volume = reader.GetString(1);
                        model2.MMPL_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPL_Rate = reader.GetString(2);
                        model2.MMPL_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPL_Total = reader.GetString(3);
                        model2.MMPL_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPL_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPL_Total = GetMMPL_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_Labelling = reader.GetString(6);
                        model2.MMP_Labelling = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_Labelling = reader.GetString(7);
                        model2.LBMMP_Labelling = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_Labelling.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_Labelling = listBillMMP_Labelling;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblMMP_Matching
        List<tblListBilling> listBillMMP_Matching = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPM_Volume,TblBilling.MMPM_Rate,TblBilling.MMPM_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_Matching,TblBilling.LBMMP_Matching
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPM_Volume = reader.GetString(1);
                        model2.MMPM_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPM_Rate = reader.GetString(2);
                        model2.MMPM_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPM_Total = reader.GetString(3);
                        model2.MMPM_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPM_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPM_Total = GetMMPM_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_Matching = reader.GetString(6);
                        model2.MMP_Matching = reader.GetString(6);

                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.LBMMP_Matching = reader.GetString(6);
                        model2.LBMMP_Matching = reader.GetString(6);

                    }






                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_Matching.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_Matching = listBillMMP_Matching;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_CDArchiving
        List<tblListBilling> listBillMMP_CDArchiving = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPCD_Volume,TblBilling.MMPCD_Rate,TblBilling.MMPCD_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_CDArchiving,TblBilling.LBMMP_CDArchiving
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPCD_Volume = reader.GetString(1);
                        model2.MMPCD_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPCD_Rate = reader.GetString(2);
                        model2.MMPCD_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPCD_Total = reader.GetString(3);
                        model2.MMPCD_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPCD_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPCD_Total = GetMMPCD_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_CDArchiving = reader.GetString(6);
                        model2.MMP_CDArchiving = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_CDArchiving = reader.GetString(7);
                        model2.LBMMP_CDArchiving = reader.GetString(7);

                    }


                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_CDArchiving.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_CDArchiving = listBillMMP_CDArchiving;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_EnvelopeType
        List<tblListBilling> listBillMMP_EnvelopeType = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPET_Volume,TblBilling.MMPET_Rate,TblBilling.MMPET_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_EnvelopeType,TblBilling.LBMMP_EnvelopeType
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPET_Volume = reader.GetString(1);
                        model2.MMPET_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPET_Rate = reader.GetString(2);
                        model2.MMPET_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPET_Total = reader.GetString(3);
                        model2.MMPET_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPET_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPET_Total = GetMMPET_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_EnvelopeType = reader.GetString(6);
                        model2.MMP_EnvelopeType = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_EnvelopeType = reader.GetString(7);
                        model2.LBMMP_EnvelopeType = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_EnvelopeType.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_EnvelopeType = listBillMMP_EnvelopeType;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblMMP_EnvelopePrice
        List<tblListBilling> listBillMMP_EnvelopePrice = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPEP_Volume,TblBilling.MMPEP_Rate,TblBilling.MMPEP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_EnvelopePrice,TblBilling.LBMMP_EnvelopePrice
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPEP_Volume = reader.GetString(1);
                        model2.MMPEP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPEP_Rate = reader.GetString(2);
                        model2.MMPEP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPEP_Total = reader.GetString(3);
                        model2.MMPEP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPEP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPEP_Total = GetMMPEP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_EnvelopePrice = reader.GetString(6);
                        model2.MMP_EnvelopePrice = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_EnvelopePrice = reader.GetString(7);
                        model2.LBMMP_EnvelopePrice = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_EnvelopePrice.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_EnvelopePrice = listBillMMP_EnvelopePrice;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_Paper
        List<tblListBilling> listBillMMP_Paper = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPPR_Volume,TblBilling.MMPPR_Rate,TblBilling.MMPPR_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_Paper,TblBilling.LBMMP_Paper
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPPR_Volume = reader.GetString(1);
                        model2.MMPPR_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPPR_Rate = reader.GetString(2);
                        model2.MMPPR_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPPR_Total = reader.GetString(3);
                        model2.MMPPR_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPPR_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPPR_Total = GetMMPPR_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_Paper = reader.GetString(6);
                        model2.MMP_Paper = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_Paper = reader.GetString(7);
                        model2.LBMMP_Paper = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_Paper.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_Paper = listBillMMP_Paper;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }



        //retrieve TblMMP_PaperPrice
        List<tblListBilling> listBillMMP_PaperPrice = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPPP_Volume,TblBilling.MMPPP_Rate,TblBilling.MMPPP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_PaperPrice,TblBilling.LBMMP_PaperPrice
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPPP_Volume = reader.GetString(1);
                        model2.MMPPP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPPP_Rate = reader.GetString(2);
                        model2.MMPPP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPPP_Total = reader.GetString(3);
                        model2.MMPPP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPPP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPPP_Total = GetMMPPP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_PaperPrice = reader.GetString(6);
                        model2.MMP_PaperPrice = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_PaperPrice = reader.GetString(7);
                        model2.LBMMP_PaperPrice = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_PaperPrice.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_PaperPrice = listBillMMP_PaperPrice;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }



        //retrieve TblDCP_FoldingCharges
        List<tblListBilling> listBillDCP_FoldingCharges = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPFC_Volume,TblBilling.DCPFC_Rate,TblBilling.DCPFC_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_FoldingCharges,TblBilling.LBDCP_FoldingCharges
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPFC_Volume = reader.GetString(1);
                        model2.DCPFC_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPFC_Rate = reader.GetString(2);
                        model2.DCPFC_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPFC_Total = reader.GetString(3);
                        model2.DCPFC_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPFC_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPFC_Total = GetDCPFC_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_FoldingCharges = reader.GetString(6);
                        model2.DCP_FoldingCharges = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_FoldingCharges = reader.GetString(7);
                        model2.LBDCP_FoldingCharges = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_FoldingCharges.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_FoldingCharges = listBillDCP_FoldingCharges;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_SupplyPrintLabel
        List<tblListBilling> listBillDCP_SupplyPrintLabel = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPSP_Volume,TblBilling.DCPSP_Rate,TblBilling.DCPSP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_SupplyPrintLabel, TblBilling.LBDCP_SupplyPrintLabel
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPSP_Volume = reader.GetString(1);
                        model2.DCPSP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPSP_Rate = reader.GetString(2);
                        model2.DCPSP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPSP_Total = reader.GetString(3);
                        model2.DCPSP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPSP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPSP_Total = GetDCPSP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_SupplyPrintLabel = reader.GetString(6);
                        model2.DCP_SupplyPrintLabel = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_SupplyPrintLabel = reader.GetString(7);
                        model2.LBDCP_SupplyPrintLabel = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_SupplyPrintLabel.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_SupplyPrintLabel = listBillDCP_SupplyPrintLabel;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        ////retrieve TblDCP_FoldingCharges
        //List<tblListBilling> listBillDCP_FoldingCharges = new List<tblListBilling>();

        //using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        //using (SqlCommand command = new SqlCommand("", cn))
        //{

        //    cn.Open();
        //    command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCP_Volume,TblBilling.DCP_Rate,TblBilling.DCP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_FoldingCharges
        //                          FROM [IflowSeed].[dbo].[JobInstruction]                                  
        //                          LEFT JOIN [IflowSeed].[dbo].[TblBilling]
        //                          On JobInstruction.Id = TblBilling.JobInstructionId
        //                          WHERE JobInstruction.Id=@Id ";
        //    command.Parameters.AddWithValue("@Id", Id);
        //    var reader = command.ExecuteReader();
        //    while (reader.Read())
        //    {
        //        tblListBilling model2 = new tblListBilling();
        //        {
        //            if (reader.IsDBNull(0) == false)
        //            {
        //                ViewBag.Description = reader.GetString(0);
        //                model2.Description = reader.GetString(0);
        //            }
        //            if (reader.IsDBNull(1) == false)
        //            {
        //                ViewBag.DCPFC_Volume = reader.GetString(1);
        //                model2.DCPFC_Volume = reader.GetString(1);
        //            }
        //            if (reader.IsDBNull(2) == false)
        //            {
        //                ViewBag.DCPFC_Rate = reader.GetString(2);
        //                model2.DCPFC_Rate = reader.GetString(2);
        //            }
        //            if (reader.IsDBNull(3) == false)
        //            {
        //                ViewBag.DCPFC_Total = reader.GetString(3);
        //                model2.DCPFC_Total = reader.GetString(3);
        //                string TAmount = reader.GetString(3);
        //                double AddAmount = Convert.ToDouble(TAmount);
        //                GetDCPFC_Total = GetTotalAmount + AddAmount;

        //                ViewBag.GetDCPFC_Total = GetDCPFC_Total;


        //            }
        //            if (reader.IsDBNull(4) == false)
        //            {
        //                ViewBag.Process = reader.GetString(4);
        //                model2.Process = reader.GetString(4);
        //            }
        //            if (reader.IsDBNull(5) == false)
        //            {
        //                ViewBag.Sst = reader.GetString(5);
        //                model2.Sst = reader.GetString(5);

        //            }

        //            if (reader.IsDBNull(6) == false)
        //            {
        //                ViewBag.DCP_FoldingCharges = reader.GetString(6);
        //                model2.DCP_FoldingCharges = reader.GetString(6);

        //            }

        //            totVolume += Decimal.Parse(reader.GetString(1));
        //            //TotAmntSST += Decimal.Parse(reader.GetString(5));

        //            TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


        //        }




        //        listBillDCP_FoldingCharges.Add(model2);
        //        ViewBag.Sst = totalAmountSst;


        //        ViewBag.TotAmntSST = TotAmntSST;
        //        ViewBag.tableBilingListingDCP_FoldingCharges = listBillDCP_FoldingCharges;
        //        ViewBag.totVolume = totVolume;
        //        ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
        //        ViewBag.TotalAll = TotalAll;




        //    }
        //}



        //retrieve TblDCP_PrintingDuplex
        List<tblListBilling> listBillDCP_PrintingDuplex = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPPD_Volume,TblBilling.DCPPD_Rate,TblBilling.DCPPD_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_PrintingDuplex,TblBilling.LBDCP_PrintingDuplex
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPPD_Volume = reader.GetString(1);
                        model2.DCPPD_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPPD_Rate = reader.GetString(2);
                        model2.DCPPD_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPPD_Total = reader.GetString(3);
                        model2.DCPPD_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPPD_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPPD_Total = GetDCPPD_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_PrintingDuplex = reader.GetString(6);
                        model2.DCP_PrintingDuplex = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_PrintingDuplex = reader.GetString(7);
                        model2.LBDCP_PrintingDuplex = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_PrintingDuplex.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_PrintingDuplex = listBillDCP_PrintingDuplex;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_FirstInsert
        List<tblListBilling> listBillDCP_FirstInsert = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPFI_Volume,TblBilling.DCPFI_Rate,TblBilling.DCPFI_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_FirstInsert,TblBilling.LBDCP_FirstInsert
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPFI_Volume = reader.GetString(1);
                        model2.DCPFI_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPFI_Rate = reader.GetString(2);
                        model2.DCPFI_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPFI_Total = reader.GetString(3);
                        model2.DCPFI_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPFI_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPFI_Total = GetDCPFI_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_FirstInsert = reader.GetString(6);
                        model2.DCP_FirstInsert = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_FirstInsert = reader.GetString(7);
                        model2.LBDCP_FirstInsert = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_FirstInsert.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_FirstInsert = listBillDCP_FirstInsert;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblDCP_SecondInsert
        List<tblListBilling> listBillDCP_SecondInsert = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPSI_Volume,TblBilling.DCPSI_Rate,TblBilling.DCPSI_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_SecondInsert,TblBilling.LBDCP_SecondInsert
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPSI_Volume = reader.GetString(1);
                        model2.DCPSI_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPSI_Rate = reader.GetString(2);
                        model2.DCPSI_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPSI_Total = reader.GetString(3);
                        model2.DCPSI_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPSI_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPSI_Total = GetDCPSI_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_SecondInsert = reader.GetString(6);
                        model2.DCP_SecondInsert = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_SecondInsert = reader.GetString(7);
                        model2.LBDCP_SecondInsert = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_SecondInsert.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_SecondInsert = listBillDCP_SecondInsert;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_BrochureInsert
        List<tblListBilling> listBillDCP_BrochureInsert = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPBI_Volume,TblBilling.DCPBI_Rate,TblBilling.DCPBI_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_BrochureInsert,TblBilling.LBDCP_BrochureInsert
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPBI_Volume = reader.GetString(1);
                        model2.DCPBI_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPBI_Rate = reader.GetString(2);
                        model2.DCPBI_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPBI_Total = reader.GetString(3);
                        model2.DCPBI_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPBI_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPBI_Total = GetDCPBI_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_BrochureInsert = reader.GetString(6);
                        model2.DCP_BrochureInsert = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_BrochureInsert = reader.GetString(7);
                        model2.LBDCP_BrochureInsert = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_BrochureInsert.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_BrochureInsert = listBillDCP_BrochureInsert;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_MailBelow_5K
        List<tblListBilling> listBillDCP_MailBelow_5K = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCP5_Volume,TblBilling.DCP5_Rate,TblBilling.DCP5_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_MailBelow_5K,TblBilling.LBDCP_MailBelow_5K
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCP5_Volume = reader.GetString(1);
                        model2.DCP5_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCP5_Rate = reader.GetString(2);
                        model2.DCP5_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCP5_Total = reader.GetString(3);
                        model2.DCP5_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCP5_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCP5_Total = GetDCP5_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_MailBelow_5K = reader.GetString(6);
                        model2.DCP_MailBelow_5K = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_MailBelow_5K = reader.GetString(7);
                        model2.LBDCP_MailBelow_5K = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_MailBelow_5K.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_MailBelow_5K = listBillDCP_MailBelow_5K;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblDCP_Handling
        List<tblListBilling> listBillDCP_Handling = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPH_Volume,TblBilling.DCPH_Rate,TblBilling.DCPH_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_Handling,TblBilling.LBDCP_Handling
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPH_Volume = reader.GetString(1);
                        model2.DCPH_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPH_Rate = reader.GetString(2);
                        model2.DCPH_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPH_Total = reader.GetString(3);
                        model2.DCPH_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPH_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPH_Total = GetDCPH_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_Handling = reader.GetString(6);
                        model2.DCP_Handling = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_Handling = reader.GetString(7);
                        model2.LBDCP_Handling = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_Handling.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_Handling = listBillDCP_Handling;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblDCP_Sealing
        List<tblListBilling> listBillDCP_Sealing = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPSL_Volume,TblBilling.DCPSL_Rate,TblBilling.DCPSL_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_Sealing,TblBilling.LBDCP_Sealing
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPSL_Volume = reader.GetString(1);
                        model2.DCPSL_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPSL_Rate = reader.GetString(2);
                        model2.DCPSL_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPSL_Total = reader.GetString(3);
                        model2.DCPSL_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPSL_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPSL_Total = GetDCPSL_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_Sealing = reader.GetString(6);
                        model2.DCP_Sealing = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_Sealing = reader.GetString(7);
                        model2.LBDCP_Sealing = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_Sealing.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_Sealing = listBillDCP_Sealing;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_Tearing
        List<tblListBilling> listBillDCP_Tearing = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPT_Volume,TblBilling.DCPT_Rate,TblBilling.DCPT_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_Tearing,TblBilling.LBDCP_Tearing
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPT_Volume = reader.GetString(1);
                        model2.DCPT_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPT_Rate = reader.GetString(2);
                        model2.DCPT_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPT_Total = reader.GetString(3);
                        model2.DCPT_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPT_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPT_Total = GetDCPT_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_Tearing = reader.GetString(6);
                        model2.DCP_Tearing = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_Tearing = reader.GetString(7);
                        model2.LBDCP_Tearing = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_Tearing.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_Tearing = listBillDCP_Tearing;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblDCP_Folding
        List<tblListBilling> listBillDCP_Folding = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPF_Volume,TblBilling.DCPF_Rate,TblBilling.DCPF_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_Folding,TblBilling.LBDCP_Folding
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPF_Volume = reader.GetString(1);
                        model2.DCPF_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPF_Rate = reader.GetString(2);
                        model2.DCPF_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPF_Total = reader.GetString(3);
                        model2.DCPF_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPF_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPF_Total = GetDCPF_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_Folding = reader.GetString(6);
                        model2.DCP_Folding = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_Folding = reader.GetString(7);
                        model2.LBDCP_Folding = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_Folding.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_Folding = listBillDCP_Folding;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_Sticking
        List<tblListBilling> listBillDCP_Sticking = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPS_Volume,TblBilling.DCPS_Rate,TblBilling.DCPS_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_Sticking,TblBilling.LBDCP_Sticking
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPS_Volume = reader.GetString(1);
                        model2.DCPS_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPS_Rate = reader.GetString(2);
                        model2.DCPS_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPS_Total = reader.GetString(3);
                        model2.DCPS_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPS_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPS_Total = GetDCPS_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_Sticking = reader.GetString(6);
                        model2.DCP_Sticking = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_Sticking = reader.GetString(7);
                        model2.LBDCP_Sticking = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_Sticking.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_Sticking = listBillDCP_Sticking;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_Labelling
        List<tblListBilling> listBillDCP_Labelling = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPL_Volume,TblBilling.DCPL_Rate,TblBilling.DCPL_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_Labelling,TblBilling.LBDCP_Labelling
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPL_Volume = reader.GetString(1);
                        model2.DCPL_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPL_Rate = reader.GetString(2);
                        model2.DCPL_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPL_Total = reader.GetString(3);
                        model2.DCPL_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPL_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPL_Total = GetDCPL_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_Labelling = reader.GetString(6);
                        model2.DCP_Labelling = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_Labelling = reader.GetString(7);
                        model2.LBDCP_Labelling = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_Labelling.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_Labelling = listBillDCP_Labelling;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_Matching
        List<tblListBilling> listBillDCP_Matching = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPM_Volume,TblBilling.DCPM_Rate,TblBilling.DCPM_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_Matching,TblBilling.LBDCP_Matching
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPM_Volume = reader.GetString(1);
                        model2.DCPM_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPM_Rate = reader.GetString(2);
                        model2.DCPM_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPM_Total = reader.GetString(3);
                        model2.DCPM_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPM_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPM_Total = GetDCPM_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_Matching = reader.GetString(6);
                        model2.DCP_Matching = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_Matching = reader.GetString(7);
                        model2.LBDCP_Matching = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_Matching.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_Matching = listBillDCP_Matching;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblDCP_CDArchiving
        List<tblListBilling> listBillDCP_CDArchiving = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPCD_Volume,TblBilling.DCPCD_Rate,TblBilling.DCPCD_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_CDArchiving,TblBilling.LBDCP_CDArchiving
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPCD_Volume = reader.GetString(1);
                        model2.DCPCD_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPCD_Rate = reader.GetString(2);
                        model2.DCPCD_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPCD_Total = reader.GetString(3);
                        model2.DCPCD_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPCD_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPCD_Total = GetDCPCD_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_CDArchiving = reader.GetString(6);
                        model2.DCP_CDArchiving = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_CDArchiving = reader.GetString(7);
                        model2.LBDCP_CDArchiving = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_CDArchiving.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_CDArchiving = listBillDCP_CDArchiving;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_EnvelopeType
        List<tblListBilling> listBillDCP_EnvelopeType = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPET_Volume,TblBilling.DCPET_Rate,TblBilling.DCPET_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_EnvelopeType,TblBilling.LBDCP_EnvelopeType
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPET_Volume = reader.GetString(1);
                        model2.DCPET_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPET_Rate = reader.GetString(2);
                        model2.DCPET_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPET_Total = reader.GetString(3);
                        model2.DCPET_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPET_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPET_Total = GetDCPET_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_EnvelopeType = reader.GetString(6);
                        model2.DCP_EnvelopeType = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_EnvelopeType = reader.GetString(7);
                        model2.LBDCP_EnvelopeType = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_EnvelopeType.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_EnvelopeType = listBillDCP_EnvelopeType;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_EnvelopePrice
        List<tblListBilling> listBillDCP_EnvelopePrice = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPEP_Volume,TblBilling.DCPEP_Rate,TblBilling.DCPEP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_EnvelopePrice,TblBilling.LBDCP_EnvelopePrice
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPEP_Volume = reader.GetString(1);
                        model2.DCPEP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPEP_Rate = reader.GetString(2);
                        model2.DCPEP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPEP_Total = reader.GetString(3);
                        model2.DCPEP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPEP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPEP_Total = GetDCPEP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_EnvelopePrice = reader.GetString(6);
                        model2.DCP_EnvelopePrice = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_EnvelopePrice = reader.GetString(7);
                        model2.LBDCP_EnvelopePrice = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_EnvelopePrice.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_EnvelopePrice = listBillDCP_EnvelopePrice;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_Paper
        List<tblListBilling> listBillDCP_Paper = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPP_Volume,TblBilling.DCPP_Rate,TblBilling.DCPP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_Paper,TblBilling.LBDCP_Paper
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPP_Volume = reader.GetString(1);
                        model2.DCPP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPP_Rate = reader.GetString(2);
                        model2.DCPP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPP_Total = reader.GetString(3);
                        model2.DCPP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPP_Total = GetDCPP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_Paper = reader.GetString(6);
                        model2.DCP_Paper = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_Paper = reader.GetString(7);
                        model2.LBDCP_Paper = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_Paper.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_Paper = listBillDCP_Paper;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_PaperPrice
        List<tblListBilling> listBillDCP_PaperPrice = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPPP_Volume,TblBilling.DCPPP_Rate,TblBilling.DCPPP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_PaperPrice,TblBilling.LBDCP_PaperPrice
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPPP_Volume = reader.GetString(1);
                        model2.DCPPP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPPP_Rate = reader.GetString(2);
                        model2.DCPPP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPPP_Total = reader.GetString(3);
                        model2.DCPPP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPPP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPPP_Total = GetDCPPP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_PaperPrice = reader.GetString(6);
                        model2.DCP_PaperPrice = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_PaperPrice = reader.GetString(7);
                        model2.LBDCP_PaperPrice = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_PaperPrice.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_PaperPrice = listBillDCP_PaperPrice;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblRM_Printing
        List<tblListBilling> listBillRM_Printing = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.RMPT_Volume,TblBilling.RMPT_Rate,TblBilling.RMPT_Total,TblBilling.Process,TblBilling.Sst,TblBilling.RM_Printing,TblBilling.LBRM_Printing
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.RMPT_Volume = reader.GetString(1);
                        model2.RMPT_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RMPT_Rate = reader.GetString(2);
                        model2.RMPT_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.RMPT_Total = reader.GetString(3);
                        model2.RMPT_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetRMPT_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetRMPT_Total = GetRMPT_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.RM_Printing = reader.GetString(6);
                        model2.RM_Printing = reader.GetString(6);

                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.RM_Printing = reader.GetString(6);
                        model2.RM_Printing = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBRM_Printing = reader.GetString(7);
                        model2.LBRM_Printing = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillRM_Printing.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingRM_Printing = listBillRM_Printing;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblRM_Selfmailer
        List<tblListBilling> listBillRM_Selfmailer = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.RMS_Volume,TblBilling.RMS_Rate,TblBilling.RMS_Total,TblBilling.Process,TblBilling.Sst,TblBilling.RM_Selfmailer,TblBilling.LBRM_Selfmailer 
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.RMS_Volume = reader.GetString(1);
                        model2.RMS_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RMS_Rate = reader.GetString(2);
                        model2.RMS_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.RMS_Total = reader.GetString(3);
                        model2.RMS_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetRMS_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetRMS_Total = GetRMS_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.RM_Selfmailer = reader.GetString(6);
                        model2.RM_Selfmailer = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBRM_Selfmailer = reader.GetString(7);
                        model2.LBRM_Selfmailer = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillRM_Selfmailer.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingRM_Selfmailer = listBillRM_Selfmailer;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblRM_MailBelow_5K
        List<tblListBilling> listBillRM_MailBelow_5K = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.RM5_Volume,TblBilling.RM5_Rate,TblBilling.RM5_Total,TblBilling.Process,TblBilling.Sst,TblBilling.RM_MailBelow_5K,TblBilling.LBRM_MailBelow_5K
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.RM5_Volume = reader.GetString(1);
                        model2.RM5_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RM5_Rate = reader.GetString(2);
                        model2.RM5_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.RM5_Total = reader.GetString(3);
                        model2.RM5_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetRM5_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetRM5_Total = GetRM5_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.RM_MailBelow_5K = reader.GetString(6);
                        model2.RM_MailBelow_5K = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBRM_MailBelow_5K = reader.GetString(7);
                        model2.LBRM_MailBelow_5K = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillRM_MailBelow_5K.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingRM_MailBelow_5K = listBillRM_MailBelow_5K;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblRM_Handling
        List<tblListBilling> listBillRM_Handling = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.RMH_Volume,TblBilling.RMH_Rate,TblBilling.RMH_Total,TblBilling.Process,TblBilling.Sst,TblBilling.RM_Handling,TblBilling.LBRM_Handling
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.RMH_Volume = reader.GetString(1);
                        model2.RMH_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RMH_Rate = reader.GetString(2);
                        model2.RMH_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.RMH_Total = reader.GetString(3);
                        model2.RMH_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetRMH_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetRMH_Total = GetRMH_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.RM_Handling = reader.GetString(6);
                        model2.RM_Handling = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBRM_Handling = reader.GetString(7);
                        model2.LBRM_Handling = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillRM_Handling.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingRM_Handling = listBillRM_Handling;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblRM_LabellingRegsterMails
        List<tblListBilling> listBillRM_LabellingRegsterMails = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.RML_Volume,TblBilling.RML_Rate,TblBilling.RML_Total,TblBilling.Process,TblBilling.Sst,TblBilling.RM_LabellingRegsterMails,TblBilling.LBRM_LabellingRegsterMails
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.RML_Volume = reader.GetString(1);
                        model2.RML_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RML_Rate = reader.GetString(2);
                        model2.RML_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.RML_Total = reader.GetString(3);
                        model2.RML_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetRML_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetRML_Total = GetRML_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.RM_LabellingRegsterMails = reader.GetString(6);
                        model2.RM_LabellingRegsterMails = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBRM_LabellingRegsterMails = reader.GetString(7);
                        model2.LBRM_LabellingRegsterMails = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillRM_LabellingRegsterMails.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingRM_LabellingRegsterMails = listBillRM_LabellingRegsterMails;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblRM_Paper
        List<tblListBilling> listBillRM_Paper = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.RMP_Volume,TblBilling.RMP_Rate,TblBilling.RMP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.RM_Paper,TblBilling.LBRM_Paper
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.RMP_Volume = reader.GetString(1);
                        model2.RMP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RMP_Rate = reader.GetString(2);
                        model2.RMP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.RMP_Total = reader.GetString(3);
                        model2.RMP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetRMP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetRMP_Total = GetRMP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.RM_Paper = reader.GetString(6);
                        model2.RM_Paper = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBRM_Paper = reader.GetString(7);
                        model2.LBRM_Paper = reader.GetString(7);

                    }

                    ///*totVolume += Decimal.Parse(reader.GetString(1))*/;
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillRM_Paper.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingRM_Paper = listBillRM_Paper;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblRM_PaperPrice
        List<tblListBilling> listBillRM_PaperPrice = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.RMPP_Volume,TblBilling.RMPP_Rate,TblBilling.RMPP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.RM_PaperPrice,TblBilling.LBRM_PaperPrice
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.RMPP_Volume = reader.GetString(1);
                        model2.RMPP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RMPP_Rate = reader.GetString(2);
                        model2.RMPP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.RMPP_Total = reader.GetString(3);
                        model2.RMPP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetRMPP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetRMPP_Total = GetRMPP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.RM_PaperPrice = reader.GetString(6);
                        model2.RM_PaperPrice = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBRM_PaperPrice = reader.GetString(7);
                        model2.LBRM_PaperPrice = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillRM_PaperPrice.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingRM_PaperPrice = listBillRM_PaperPrice;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }







        //retrieve TblBillingMaterial

        List<TblMaterials> listBill2 = new List<TblMaterials>();

        decimal TotAmnt2 = 0;
        decimal TotAmntSST2 = 0;

        decimal totVolume2 = 0;
        decimal TotalProcessingCharge_Postage2 = 0;




        ViewBag.TotAmnt2 = TotAmnt2;
        ViewBag.TotAmntSST2 = TotAmntSST2;
        ViewBag.totVolume2 = totVolume2;
        ViewBag.TotalProcessingCharge_Postage2 = TotalProcessingCharge_Postage2;




        using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command2 = new SqlCommand("", cn2))
        {

            ViewBag.TblMaterials = listBill2;


            cn2.Open();
            command2.CommandText = @"SELECT TblMaterials.Paper, TblMaterials.VolumePaper, TblMaterials.RatePaper, TblMaterials.Env, TblMaterials.RateEnv, TblMaterials.VolumeEnv,TblMaterials.Sst,TblMaterials.TotalAmountPaper,TblMaterials.TotalAmountEnv
                                  FROM  JobInstruction INNER JOIN
                                  TblMaterials ON JobInstruction.Id = TblMaterials.JobInstructionId
                                  WHERE JobInstruction.Id=@Id";
            command2.Parameters.AddWithValue("@Id", Id);
            var reader2 = command2.ExecuteReader();
            while (reader2.Read())
            {
                TblMaterials model2 = new TblMaterials();
                {
                    if (reader2.IsDBNull(0) == false)
                    {
                        ViewBag.Paper = reader2.GetString(0);
                        model2.Paper = reader2.GetString(0);
                    }
                    if (reader2.IsDBNull(1) == false)
                    {
                        ViewBag.VolumePaper = reader2.GetString(1);
                        model2.VolumePaper = reader2.GetString(1);
                    }
                    if (reader2.IsDBNull(2) == false)
                    {
                        ViewBag.RatePaper = reader2.GetString(2);
                        model2.RatePaper = reader2.GetString(2);
                    }
                    if (reader2.IsDBNull(3) == false)
                    {
                        ViewBag.Env = reader2.GetString(3);
                        model2.Env = reader2.GetString(3);
                    }
                    if (reader2.IsDBNull(4) == false)
                    {
                        ViewBag.RateEnv = reader2.GetString(4);
                        model2.RateEnv = reader2.GetString(4);
                    }
                    if (reader2.IsDBNull(5) == false)
                    {
                        ViewBag.VolumeEnv = reader2.GetString(5);
                        model2.VolumeEnv = reader2.GetString(5);
                    }
                    if (reader2.IsDBNull(6) == false)
                    {
                        ViewBag.Sst = reader2.GetString(6);
                        model2.Sst = reader2.GetString(6);

                        string Sst = reader2.GetString(6);

                        totalAmountSst = (Decimal.Parse(reader2.GetString(6)) * Decimal.Parse(Sst) + Decimal.Parse(reader2.GetString(6)));

                        model2.TotalAmountSst = ((decimal)(Math.Round(totalAmountSst, 2))).ToString();
                    }

                    if (reader2.IsDBNull(7) == false)
                    {
                        model2.TotalAmountPaper = reader2.GetString(7);
                        string TotalAmountPaper = reader2.GetString(7);
                        double AddAmount2 = Convert.ToDouble(TotalAmountPaper);

                        ViewBag.AddAmount2 = AddAmount2;



                    }

                    if (reader2.IsDBNull(8) == false)
                    {

                        model2.TotalAmountEnv = reader2.GetString(8);
                        string TotalAmountEnv = reader2.GetString(8);
                        double AddAmount3 = Convert.ToDouble(TotalAmountEnv);

                        ViewBag.AddAmount3 = AddAmount3;
                    }


                    ViewBag.GrandTotalMaterial = ViewBag.AddAmount2 + ViewBag.AddAmount3;



                    TotalProcessingCharge_Postage = TotalAmount + totalAmountSst;



                }
                var Result = new TblMaterials();
                //ViewBag.TotalAllValue = ViewBag.GrandTotalAll +ViewBag.GrandTotalMaterial;
                {
                    ViewBag.TotalAllValue = (GrandTotalAll + GrandTotalMaterial);
                }


                listBill2.Add(model2);



            }



            cn2.Close();
        }

        ReloadWorksheetList(Id);

        return View(viewPosting);

        //return new Rotativa.ViewAsPdf("ViewMPR", viewPosting)
        //{
        //    // FileName = flightPlan.ListingItemDetailsModel.FlightDetails + ".pdf",
        //    PageMargins = new Rotativa.Options.Margins(12, 12, 12, 12),
        //    //PageOrientation = Rotativa.Options.Orientation.Landscape,
        //    PageOrientation = Rotativa.Options.Orientation.Portrait,
        //    //PageWidth = 210,
        //    //PageHeight = 297
        //};
    }




    public ActionResult ViewMPR2(string Id, string JobInstructionId, string DescriptionMaterials)
    {
        var IdentityName = @Session["Fullname"];
        ViewBag.IdentityName = @Session["Fullname"];
        ViewBag.IsDepart = @Session["Department"];
        var IsDepart = @Session["Department"];
        var Role = @Session["Role"];
        var Username = @Session["Username"];
        ViewBag.Username = @Session["Username"];
        Session["Id"] = Id;

        // processing

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT SUM((CASE WHEN ISNUMERIC(GrandTotal)=1 THEN CONVERT(MONEY,GrandTotal) ELSE 0 END))
                                            AS [GrandTotalAll] FROM [IflowSeed].[dbo].[TblGrandTotal] WHERE JobInstructionId=@Id";

            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    //ViewBag.GrandTotal = reader.GetDecimal(0);
                    //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                    ViewBag.GrandTotalAll = string.Format("{0:n}", reader.GetDecimal(0));

                    var grntotal = string.Format("{0:n}", reader.GetDecimal(0));
                    pucbGrnTotal = Convert.ToDouble(grntotal);


                }


            }
            cn.Close();

        }

        // material

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @" SELECT
                                            SUM((CASE WHEN ISNUMERIC(TotalAmountPaper)=1
                                            THEN CONVERT(MONEY,TotalAmountPaper) ELSE 0 END)
                                            )
                                            AS [GrandTotalP],
											  SUM((CASE WHEN ISNUMERIC(TotalAmountEnv)=1
                                            THEN CONVERT(MONEY,TotalAmountEnv) ELSE 0 END)
                                            )
                                            AS [GrandTotalV]
                                         FROM [IflowSeed].[dbo].[TblMaterials]
                                         WHERE JobInstructionId=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    //ViewBag.GrandTotal = reader.GetDecimal(0);
                    //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                    ViewBag.GrandTotalP = string.Format("{0:n}", reader.GetDecimal(0));
                    pribGrnTotalIP = Convert.ToDouble(ViewBag.GrandTotalP);


                }
                if (reader.IsDBNull(1) == false)
                {
                    //ViewBag.GrandTotal = reader.GetDecimal(0);
                    //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                    ViewBag.GrandTotalV = string.Format("{0:n}", reader.GetDecimal(1));
                    pribGrnTotalV = Convert.ToDouble(ViewBag.GrandTotalV);


                }

            }
            cn.Close();
            double GrandAll = pribGrnTotalIP + pribGrnTotalV + pucbGrnTotal;
            ViewBag.ViewGrnTotal = GrandAll.ToString("F");
        }



        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT JobInstruction.AccountsQty, JobInstruction.ImpressionQty, JobInstruction.PagesQty, PostingManifest.PostingDateOn, PostingManifest.PostingTime, PostingManifest.Local, PostingManifest.Oversea, PostingManifest.Re_turn, PostingManifest.Courier, PostingManifest.Recovery, PostingManifest.PO_BOX, PostingManifest.InsertMMP, PostingManifest.Shred, PostingManifest.Hold, PostingManifest.RemarkIns_Material, PostingManifest.Ins_Material,JobAuditTrailDetail.LogTagNo,JobInstruction.ProductName
                                   FROM  JobInstruction INNER JOIN
                                   PostingManifest ON JobInstruction.Id = PostingManifest.JobInstructionId INNER JOIN
                                   JobAuditTrailDetail ON JobInstruction.Id = JobAuditTrailDetail.JobAuditTrailId
                                        WHERE JobInstruction.Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    ViewBag.AccountsQty = reader.GetString(0);
                }

                if (reader.IsDBNull(1) == false)
                {
                    ViewBag.ImpressionQty = reader.GetString(1);
                }
                if (reader.IsDBNull(2) == false)
                {
                    ViewBag.PagesQty = reader.GetString(2);
                }

                if (reader.IsDBNull(3) == false)
                {
                    ViewBag.PostingDateOn = String.Format("{0:dd/MM/yyyy}", (DateTime)reader.GetDateTime(3));
                }

                if (reader.IsDBNull(4) == false)
                {
                    ViewBag.PostingTime = reader.GetString(4);
                }

                if (reader.IsDBNull(5) == false)
                {
                    ViewBag.Local = reader.GetString(5);
                }
                if (reader.IsDBNull(6) == false)
                {
                    ViewBag.Oversea = reader.GetString(6);
                }
                if (reader.IsDBNull(7) == false)
                {
                    ViewBag.Re_turn = reader.GetString(7);
                }

                if (reader.IsDBNull(8) == false)
                {
                    ViewBag.Courier = reader.GetString(8);
                }
                if (reader.IsDBNull(9) == false)
                {
                    ViewBag.Recovery = reader.GetString(9);
                }
                if (reader.IsDBNull(10) == false)
                {
                    ViewBag.PO_BOX = reader.GetString(10);
                }
                if (reader.IsDBNull(11) == false)
                {
                    ViewBag.InsertMMP = reader.GetString(11);
                }
                if (reader.IsDBNull(12) == false)
                {
                    ViewBag.Shred = reader.GetString(12);
                }
                if (reader.IsDBNull(13) == false)
                {
                    ViewBag.Hold = reader.GetString(13);
                }

                if (reader.IsDBNull(14) == false)
                {
                    ViewBag.RemarkIns_Material = reader.GetString(14);
                }
                if (reader.IsDBNull(15) == false)
                {
                    bool getIns_Material = reader.GetBoolean(15);
                    if (getIns_Material == false)
                    {
                        ViewBag.Ins_Material = "";
                    }
                    else
                    {
                        ViewBag.Ins_Material = "checked";
                    }
                }
                if (reader.IsDBNull(16) == false)
                {
                    ViewBag.LogTagNo = reader.GetString(16);
                }
                if (reader.IsDBNull(17) == false)
                {
                    ViewBag.ProductName = reader.GetString(17);
                }

            }
            cn.Close();
        }



        List<JobInstruction> viewPosting = new List<JobInstruction>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT  JobInstruction.Id,JobInstruction.Customer_Name, JobInstruction.ProductName, ProgDevWorksheet.Paper, ProgDevWorksheet.up_1, ProgDevWorksheet.up_2, ProgDevWorksheet.JobClass, ProgDevWorksheet.CreateUser, ProgDevWorksheet.SalesExecutiveBy, ProgDevWorksheet.JobRequest,JobInstruction.QuotationRef
                                  FROM  JobInstruction INNER JOIN
                                  ProgDevWorksheet ON JobInstruction.Id = ProgDevWorksheet.JobInstructionId
                                  WHERE JobInstruction.Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                JobInstruction model = new JobInstruction();
                {
                    model.Bil = _bil++;

                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Id = reader.GetGuid(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.Customer_Name = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.ProductName = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.Paper = reader.GetString(3);
                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.up_1 = reader.GetBoolean(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.up_2 = reader.GetBoolean(5);
                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.JobClass = reader.GetString(6);
                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.CreateUser = reader.GetString(7);
                    }
                    if (reader.IsDBNull(8) == false)
                    {
                        ViewBag.SalesExecutiveBy = reader.GetString(8);
                    }
                    if (reader.IsDBNull(9) == false)
                    {
                        ViewBag.JobRequest = reader.GetDateTime(9);
                    }
                    if (reader.IsDBNull(10) == false)
                    {
                        ViewBag.QuotationRef = reader.GetString(10);
                    }

                }
            }
            cn.Close();
        }

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT JobInstruction.AccountsQty, JobInstruction.ImpressionQty, JobInstruction.PagesQty, PostingManifest.PostingDateOn, PostingManifest.PostingTime, PostingManifest.Local, PostingManifest.Oversea, PostingManifest.Re_turn, PostingManifest.Courier, PostingManifest.Recovery, PostingManifest.PO_BOX, PostingManifest.InsertMMP, PostingManifest.Shred, PostingManifest.Hold, PostingManifest.RemarkIns_Material, PostingManifest.Ins_Material
                                         FROM  JobInstruction INNER JOIN
                                         PostingManifest ON JobInstruction.Id = PostingManifest.JobInstructionId
                                        WHERE JobInstruction.Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    ViewBag.AccountsQty = reader.GetString(0);
                }

                if (reader.IsDBNull(1) == false)
                {
                    ViewBag.ImpressionQty = reader.GetString(1);
                }
                if (reader.IsDBNull(2) == false)
                {
                    ViewBag.PagesQty = reader.GetString(2);
                }

                if (reader.IsDBNull(3) == false)
                {
                    ViewBag.PostingDateOn = String.Format("{0:dd/MM/yyyy}", (DateTime)reader.GetDateTime(3));
                }

                if (reader.IsDBNull(4) == false)
                {
                    ViewBag.PostingTime = reader.GetString(4);
                }

                if (reader.IsDBNull(5) == false)
                {
                    ViewBag.Local = reader.GetString(5);
                }
                if (reader.IsDBNull(6) == false)
                {
                    ViewBag.Oversea = reader.GetString(6);
                }
                if (reader.IsDBNull(7) == false)
                {
                    ViewBag.Re_turn = reader.GetString(7);
                }

                if (reader.IsDBNull(8) == false)
                {
                    ViewBag.Courier = reader.GetString(8);
                }
                if (reader.IsDBNull(9) == false)
                {
                    ViewBag.Recovery = reader.GetString(9);
                }
                if (reader.IsDBNull(10) == false)
                {
                    ViewBag.PO_BOX = reader.GetString(10);
                }
                if (reader.IsDBNull(11) == false)
                {
                    ViewBag.InsertMMP = reader.GetString(11);
                }
                if (reader.IsDBNull(12) == false)
                {
                    ViewBag.Shred = reader.GetString(12);
                }
                if (reader.IsDBNull(13) == false)
                {
                    ViewBag.Hold = reader.GetString(13);
                }

                if (reader.IsDBNull(14) == false)
                {
                    ViewBag.RemarkIns_Material = reader.GetString(14);
                }
                if (reader.IsDBNull(15) == false)
                {
                    bool getIns_Material = reader.GetBoolean(15);
                    if (getIns_Material == false)
                    {
                        ViewBag.Ins_Material = "";
                    }
                    else
                    {
                        ViewBag.Ins_Material = "checked";
                    }
                }


            }
            cn.Close();
        }

        List<JobInstruction> viewPosting2 = new List<JobInstruction>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil3 = 1;
            cn.Open();
            command.CommandText = @"SELECT JobInstruction.JobSheetNo, JobAuditTrailDetail.LogTagNo, Finance.Contact_Person, Finance.InvoiceNo, Finance.Cust_Department,JobAuditTrailDetail.JobNameIT,JobInstruction.QuotationRef
                                    FROM  JobInstruction INNER JOIN
                                   JobAuditTrailDetail ON JobInstruction.Id = JobAuditTrailDetail.JobAuditTrailId INNER JOIN
                                   Finance ON JobInstruction.Id = Finance.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                JobInstruction model = new JobInstruction();
                {
                    model.Bil = _bil3++;

                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.JobSheetNo = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.LogTagNo = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.Contact_Person = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.InvoiceNo = reader.GetString(3);
                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Cust_Department = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.JobNameIT = reader.GetString(5);
                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.QuotationRef = reader.GetString(6);
                    }
                }
                viewPosting2.Add(model);
            }
            cn.Close();
        }


        List<JobInstruction> viewPosting3 = new List<JobInstruction>();


        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            int _bil3 = 1;
            cn.Open();
            command.CommandText = @"SELECT JobInstruction.QuotationRef, JobInstruction.JobSheetNo, JobInstruction.CreatedOn, Finance.InvoiceNo, 
                                  JobInstruction.Customer_Name, JobInstruction.Contact_Person, PostingManifest.Local, PostingManifest.Oversea, PostingManifest.Courier,
                                  PostingManifest.Re_turn, PostingManifest.PO_BOX, PostingManifest.Ins_Material, PostingManifest.InsertMMP, PostingManifest.Shred, PostingManifest.Hold
                                  FROM [IflowSeed].[dbo].[JobInstruction]
                                  LEFT JOIN [IflowSeed].[dbo].[Finance]
                                  On JobInstruction.Id = Finance.JobInstructionId
                                  LEFT JOIN [IflowSeed].[dbo].[PostingManifest]
                                  On JobInstruction.Id = PostingManifest.JobInstructionId                                  
                                  WHERE JobInstruction.Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                JobInstruction model = new JobInstruction();
                {
                    model.Bil = _bil3++;

                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.QuotationRef = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.JobSheetNo = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.CreatedOn = String.Format("{0:dd/MM/yyyy}", (DateTime)reader.GetDateTime(2));
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.InvoiceNo = reader.GetString(3);
                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Customer_Name = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Contact_Person = reader.GetString(5);
                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Local = reader.GetString(6);
                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.Oversea = reader.GetString(7);
                    }
                    if (reader.IsDBNull(8) == false)
                    {
                        ViewBag.Courier = reader.GetString(8);
                    }
                    if (reader.IsDBNull(9) == false)
                    {
                        ViewBag.Re_turn = reader.GetString(9);
                    }
                    if (reader.IsDBNull(10) == false)
                    {
                        ViewBag.PO_BOX = reader.GetString(10);
                    }
                    if (reader.IsDBNull(11) == false)
                    {
                        ViewBag.Ins_Material = reader.GetBoolean(11);
                    }
                    if (reader.IsDBNull(12) == false)
                    {
                        ViewBag.InsertMMP = reader.GetString(12);
                    }
                    if (reader.IsDBNull(13) == false)
                    {
                        ViewBag.Shred = reader.GetString(13);
                    }
                    if (reader.IsDBNull(13) == false)
                    {
                        ViewBag.Hold = reader.GetString(13);
                    }

                }
                viewPosting3.Add(model);
            }
            cn.Close();
        }


        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(Sst)=1
                                            THEN CONVERT(MONEY,Sst) ELSE 0 END)
                                            )
                                            AS [GrandTotalSst]
                                         FROM [IflowSeed].[dbo].[TblBilling]
                                         WHERE JobInstructionId=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    //ViewBag.GrandTotal = reader.GetDecimal(0);
                    //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                    ViewBag.GrandTotalSst = string.Format("{0:n}", reader.GetDecimal(0));


                }


            }
            cn.Close();

        }


        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT
                                            SUM((CASE WHEN ISNUMERIC(Sst)=1
                                            THEN CONVERT(MONEY,Sst) ELSE 0 END)
                                            )
                                            AS [GrandTotalSst]
                                         FROM [IflowSeed].[dbo].[TblMaterials]
                                         WHERE JobInstructionId=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                if (reader.IsDBNull(0) == false)
                {
                    //ViewBag.GrandTotal = reader.GetDecimal(0);
                    //ViewBag.GrandTotal = reader.GetDecimal(reader.GetOrdinal("GrandTotal"));
                    ViewBag.GrandTOTMaterialSst = string.Format("{0:n}", reader.GetDecimal(0));


                }


            }
            cn.Close();

        }


        //retrieve table c
        List<MPRTableC> tableC = new List<MPRTableC>();
        decimal TotalAccountsQty = 0;
        decimal TotalImpressionQty = 0;
        decimal TotalPagesQty = 0;

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT TblChecklistlogTagNo.LogTagNo, TblChecklistlogTagNo.ProcessDate, TblChecklistlogTagNo.TimeProcessIt, TblChecklistlogTagNo.AccQty, TblChecklistlogTagNo.ImpQty, TblChecklistlogTagNo.PageQty,JobInstruction.JobNameIT
                                FROM  JobInstruction INNER JOIN
                                 TblChecklistlogTagNo ON JobInstruction.Id = TblChecklistlogTagNo.JobInstructionId
                                  WHERE TblChecklistlogTagNo.JobInstructionId=@Id AND TblChecklistlogTagNo.StatLogTag='YES' ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();


            while (reader.Read())
            {

                tableC.Add(new MPRTableC
                {
                    LogTagNo = reader.IsDBNull(0) ? null : reader.GetString(0),
                    ProcessDate = reader.IsDBNull(1) ? null : String.Format("{0:dd/MM/yyyy}", (DateTime)reader.GetDateTime(1)),
                    TimeProcessIt = reader.IsDBNull(2) ? null : reader.GetString(2),
                    AccQty = reader.IsDBNull(3) ? null : reader.GetString(3),
                    ImpQty = reader.IsDBNull(4) ? null : reader.GetString(4),
                    PageQty = reader.IsDBNull(5) ? null : reader.GetString(5)
                });

                if (reader.IsDBNull(3) == false)
                {
                    TotalAccountsQty += Decimal.Parse(reader.GetString(3));
                }
                if (reader.IsDBNull(4) == false)
                {
                    TotalImpressionQty += Decimal.Parse(reader.GetString(4));
                }
                if (reader.IsDBNull(5) == false)
                {
                    TotalPagesQty += Decimal.Parse(reader.GetString(5));
                }
                if (reader.IsDBNull(6) == false)
                {
                    ViewBag.JobNameIT = reader.GetString(6);
                }


            }

            cn.Close();
            ViewBag.tableC = tableC;
            ViewBag.TotalAccountsQty = TotalAccountsQty;
            ViewBag.TotalImpressionQty = TotalImpressionQty;
            ViewBag.TotalPagesQty = TotalPagesQty;
        }





        decimal TotalAmount = 0;
        decimal TotAmntSST = 0;
        decimal totalAmountSst = 0;
        decimal totVolume = 0;
        decimal TotalProcessingCharge_Postage = 0;
        decimal TotalAll = 0;


        //retrieve TblBillingService



        List<tblListBilling> listBillServies = new List<tblListBilling>();
        List<double> grandtotal = new List<double>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.ServiceChange,TblBilling.VolumeService,TblBilling.RateServie,TblBilling.TotalAmountService,TblBilling.Sst
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id  ";
            command.Parameters.AddWithValue("@Id", Id);


            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.ServiceChange = reader.GetString(0);
                        model2.ServiceChange = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeService = reader.GetString(1);
                        model2.VolumeService = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateServie = reader.GetString(2);
                        model2.RateServie = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountService = reader.GetString(3);
                        model2.TotalAmountService = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountSevice = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountSevice = GetTotalAmountSevice;

                    }

                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Sst = reader.GetString(4);
                        model2.Sst = reader.GetString(4);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    ////TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));



                }

                listBillServies.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSevices = listBillServies;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
            }


        }


        //retrieve TblBillingmix
        List<tblListBilling> listBillMix = new List<tblListBilling>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeMix,TblBilling.RateMix,TblBilling.TotalAmountMix,TblBilling.Process,TblBilling.Sst,TblBilling.Mix
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id  ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeMix = reader.GetString(1);
                        model2.VolumeMix = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateMix = reader.GetString(2);
                        model2.RateMix = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountMix = reader.GetString(3);
                        model2.TotalAmountMix = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountMix = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountMix = GetTotalAmountMix;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Mix = reader.GetString(6);
                        model2.Mix = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMix.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMix = listBillMix;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }



        //retrieve TblBillingPostage
        List<tblListBilling> listBillPostages = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.ValuePostage,TblBilling.RatePostage,TblBilling.TotalAmountPostage,TblBilling.Process,TblBilling.Sst,TblBilling.Postage
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);

            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.ValuePostage = reader.GetString(1);
                        model2.ValuePostage = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RatePostage = reader.GetString(2);
                        model2.RatePostage = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountPostage = reader.GetString(3);
                        model2.TotalAmountPostage = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountPostage = GetTotalAmount + AddAmount;

                        ViewBag.GrandTotal = GetTotalAmountPostage;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Postage = reader.GetString(6);
                        model2.Postage = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillPostages.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingPostages = listBillPostages;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblBillingCourierChanges
        List<tblListBilling> listBillCourierChanges = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeCC,TblBilling.RateCC,TblBilling.TotalAmountCC,TblBilling.Process,TblBilling.Sst,TblBilling.CourierChanges
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeCC = reader.GetString(1);
                        model2.VolumeCC = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateCC = reader.GetString(2);
                        model2.RateCC = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountCC = reader.GetString(3);
                        model2.TotalAmountCC = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountCC = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountCC = GetTotalAmountCC;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.CourierChanges = reader.GetString(6);
                        model2.CourierChanges = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillCourierChanges.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingCourierChanges = listBillCourierChanges;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }



        //retrieve TblBillingDeliveryCharg
        List<tblListBilling> listBillDeliveryCharge = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeDC,TblBilling.RateDC,TblBilling.TotalAmountDC,TblBilling.Process,TblBilling.Sst,TblBilling.DeliveryCharge
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);

            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeDC = reader.GetString(1);
                        model2.VolumeDC = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateDC = reader.GetString(2);
                        model2.RateDC = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountDC = reader.GetString(3);
                        model2.TotalAmountDC = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountDC = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountDC = GetTotalAmountDC;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DeliveryCharge = reader.GetString(6);
                        model2.DeliveryCharge = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDeliveryCharge.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDeliveryCharge = listBillDeliveryCharge;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }



        //retrieve TblBillingDeliveryFranking
        List<tblListBilling> listBillFranking = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeF,TblBilling.RateF,TblBilling.TotalAmountF,TblBilling.Process,TblBilling.Sst,TblBilling.Franking
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeF = reader.GetString(1);
                        model2.VolumeF = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateF = reader.GetString(2);
                        model2.RateF = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountF = reader.GetString(3);
                        model2.TotalAmountF = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountF = GetTotalAmount + AddAmount;

                        ViewBag.GrandTotal = GetTotalAmountF;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Franking = reader.GetString(6);
                        model2.Franking = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillFranking.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingFranking = listBillFranking;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }





        //retrieve TblBillingSelfmailer
        List<tblListBilling> listBillSelfMailer = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeS,TblBilling.RateS,TblBilling.TotalAmountS,TblBilling.Process,TblBilling.Sst,TblBilling.SelfMailer
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);

            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeS = reader.GetString(1);
                        model2.VolumeS = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateS = reader.GetString(2);
                        model2.RateS = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountS = reader.GetString(3);
                        model2.TotalAmountS = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountS = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountS = GetTotalAmountS;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.SelfMailer = reader.GetString(6);
                        model2.SelfMailer = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSelfMailer.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSelfMailer = listBillSelfMailer;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }



        //retrieve TblBillingImprest
        List<tblListBilling> listBillImprest = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.ValueImprest,TblBilling.RateImprest,TblBilling.TotalAmountImprest,TblBilling.Process,TblBilling.Sst,TblBilling.Imprest
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);

            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.ValueImprest = reader.GetString(1);
                        model2.ValueImprest = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateImprest = reader.GetString(2);
                        model2.RateImprest = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountImprest = reader.GetString(3);
                        model2.TotalAmountImprest = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountImprest = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountImprest = GetTotalAmountImprest;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Imprest = reader.GetString(6);
                        model2.Imprest = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillImprest.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingImprest = listBillImprest;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }



        //retrieve TblBillingOthers
        List<tblListBilling> listBillOthers = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeO,TblBilling.RateO,TblBilling.TotalAmountO,TblBilling.Process,TblBilling.Sst,TblBilling.Others
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeO = reader.GetString(1);
                        model2.VolumeO = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateO = reader.GetString(2);
                        model2.RateO = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountO = reader.GetString(3);
                        model2.TotalAmountO = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountO = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountO = GetTotalAmountO;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Others = reader.GetString(6);
                        model2.Others = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillOthers.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingOthers = listBillOthers;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }





        //retrieve TblBillingOthers2
        List<tblListBilling> listBillOthers2 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeO2,TblBilling.RateO2,TblBilling.TotalAmountO2,TblBilling.Process,TblBilling.Sst,TblBilling.Others2
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);

            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeO2 = reader.GetString(1);
                        model2.VolumeO2 = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateO2 = reader.GetString(2);
                        model2.RateO2 = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountO2 = reader.GetString(3);
                        model2.TotalAmountO2 = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountO2 = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountO2 = GetTotalAmountO2;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Others2 = reader.GetString(6);
                        model2.Others2 = reader.GetString(6);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));



                }




                listBillOthers2.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingOthers2 = listBillOthers2;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }




        //retrieve TblBillingOthers3
        List<tblListBilling> listBillOthers3 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeO3,TblBilling.RateO3,TblBilling.TotalAmountO3,TblBilling.Process,TblBilling.Sst,TblBilling.Others3
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeO3 = reader.GetString(1);
                        model2.VolumeO3 = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateO3 = reader.GetString(2);
                        model2.RateO3 = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountO3 = reader.GetString(3);
                        model2.TotalAmountO3 = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountO3 = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountO3 = GetTotalAmountO3;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Others3 = reader.GetString(6);
                        model2.Others3 = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillOthers3.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingOthers3 = listBillOthers3;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }




        //retrieve TblBillingOthers4
        List<tblListBilling> listBillOthers4 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeO4,TblBilling.RateO4,TblBilling.TotalAmountO4,TblBilling.Process,TblBilling.Sst,TblBilling.Others4
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeO4 = reader.GetString(1);
                        model2.VolumeO4 = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateO4 = reader.GetString(2);
                        model2.RateO4 = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountO4 = reader.GetString(3);
                        model2.TotalAmountO4 = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountO4 = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountO4 = GetTotalAmountO4;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Others4 = reader.GetString(6);
                        model2.Others4 = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillOthers4.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingOthers4 = listBillOthers4;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }



        //retrieve TblBillingOthers5
        List<tblListBilling> listBillOthers5 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.VolumeO5,TblBilling.RateO5,TblBilling.TotalAmountO5,TblBilling.Process,TblBilling.Sst,TblBilling.Others5
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id   ";
            command.Parameters.AddWithValue("@Id", Id);

            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.VolumeO5 = reader.GetString(1);
                        model2.VolumeO5 = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RateO5 = reader.GetString(2);
                        model2.RateO5 = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.TotalAmountO5 = reader.GetString(3);
                        model2.TotalAmountO5 = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetTotalAmountO4 = GetTotalAmount + AddAmount;

                        ViewBag.GetTotalAmountO4 = GetTotalAmountO4;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Others5 = reader.GetString(6);
                        model2.Others5 = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillOthers5.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingOthers5 = listBillOthers5;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }







        //retrieve TblBillingPrintingDuplex
        List<tblListBilling> listBillPrintingDuplex = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.PD_Volume,TblBilling.PD_Rate,TblBilling.PD_Total,TblBilling.Process,TblBilling.Sst,TblBilling.PrintingDuplex,TblBilling.LBPrintingDuplex2
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.PD_Volume = reader.GetString(1);
                        model2.PD_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.PD_Rate = reader.GetString(2);
                        model2.PD_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.PD_Total = reader.GetString(3);
                        model2.PD_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetPD_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetPD_Total = GetPD_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.PrintingDuplex = reader.GetString(6);
                        model2.PrintingDuplex = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBPrintingDuplex2 = reader.GetString(7);
                        model2.LBPrintingDuplex2 = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillPrintingDuplex.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingPrintingDuplex = listBillPrintingDuplex;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblBillingInserting1
        List<tblListBilling> listBillInserting1 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.IS1_Volume,TblBilling.IS1_Rate,TblBilling.IS1_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Inserting1
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.IS1_Volume = reader.GetString(1);
                        model2.IS1_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.IS1_Rate = reader.GetString(2);
                        model2.IS1_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.IS1_Total = reader.GetString(3);
                        model2.IS1_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetIS1_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetIS1_Total = GetIS1_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Inserting1 = reader.GetString(6);
                        model2.Inserting1 = reader.GetString(6);

                    }

                    //*/totVolume += Decimal.Parse(reader.GetString(1));*/
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillInserting1.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingInserting1 = listBillInserting1;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblBillingInserting2
        List<tblListBilling> listBillInserting2 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.IS2_Volume,TblBilling.IS2_Rate,TblBilling.IS2_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Inserting2
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.IS2_Volume = reader.GetString(1);
                        model2.IS2_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.IS2_Rate = reader.GetString(2);
                        model2.IS2_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.IS2_Total = reader.GetString(3);
                        model2.IS2_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetIS2_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetIS2_Total = GetIS2_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Inserting2 = reader.GetString(6);
                        model2.Inserting2 = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillInserting2.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingInserting2 = listBillInserting2;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblBillingInserting3
        List<tblListBilling> listBillInserting3 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.IS3_Volume,TblBilling.IS3_Rate,TblBilling.IS3_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Inserting3
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.IS3_Volume = reader.GetString(1);
                        model2.IS3_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.IS3_Rate = reader.GetString(2);
                        model2.IS3_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.IS3_Total = reader.GetString(3);
                        model2.IS3_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetIS3_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetIS3_Total = GetIS3_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Inserting3 = reader.GetString(6);
                        model2.Inserting3 = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillInserting3.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingInserting3 = listBillInserting3;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblBillingInserting4
        List<tblListBilling> listBillInserting4 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.IS4_Volume,TblBilling.IS4_Rate,TblBilling.IS4_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Inserting4
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.IS4_Volume = reader.GetString(1);
                        model2.IS4_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.IS4_Rate = reader.GetString(2);
                        model2.IS4_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.IS4_Total = reader.GetString(3);
                        model2.IS4_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetIS4_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetIS4_Total = GetIS4_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Inserting4 = reader.GetString(6);
                        model2.Inserting4 = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillInserting4.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingInserting4 = listBillInserting4;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblBillingBrochureInsert
        List<tblListBilling> listBillBrochureInsert = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.BI_Volume,TblBilling.BI_Rate,TblBilling.BI_Total,TblBilling.Process,TblBilling.Sst,TblBilling.BrochureInsert
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.BI_Volume = reader.GetString(1);
                        model2.BI_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.BI_Rate = reader.GetString(2);
                        model2.BI_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.BI_Total = reader.GetString(3);
                        model2.BI_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetBI_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetBI_Total = GetBI_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.BrochureInsert = reader.GetString(6);
                        model2.BrochureInsert = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillBrochureInsert.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingBrochureInsert = listBillBrochureInsert;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblBillingMailBelow_5K
        List<tblListBilling> listBillMailBelow_5K = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.M5_Volume,TblBilling.M5_Rate,TblBilling.M5_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MailBelow_5K
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.M5_Volume = reader.GetString(1);
                        model2.M5_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.M5_Rate = reader.GetString(2);
                        model2.M5_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.M5_Total = reader.GetString(3);
                        model2.M5_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetM5_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetM5_Total = GetM5_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MailBelow_5K = reader.GetString(6);
                        model2.MailBelow_5K = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMailBelow_5K.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMailBelow_5K = listBillMailBelow_5K;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblBillingHandling
        List<tblListBilling> listBillHandling = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.HL_Volume,TblBilling.HL_Rate,TblBilling.HL_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Handling
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.HL_Volume = reader.GetString(1);
                        model2.HL_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.HL_Rate = reader.GetString(2);
                        model2.HL_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.HL_Total = reader.GetString(3);
                        model2.HL_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetHL_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetHL_Total = GetHL_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Handling = reader.GetString(6);
                        model2.Handling = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillHandling.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingHandling = listBillHandling;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblBillingSealing
        List<tblListBilling> listBillSealing = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.PIS_Volume,TblBilling.PIS_Rate,TblBilling.PIS_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Sealing
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.PIS_Volume = reader.GetString(1);
                        model2.PIS_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.PIS_Rate = reader.GetString(2);
                        model2.PIS_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.PIS_Total = reader.GetString(3);
                        model2.PIS_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetPIS_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetPIS_Total = GetPIS_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Sealing = reader.GetString(6);
                        model2.Sealing = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSealing.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSealing = listBillSealing;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblBillingFolding
        List<tblListBilling> listBillFolding = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.PIF_Volume,TblBilling.PIF_Rate,TblBilling.PIF_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Folding
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.PIF_Volume = reader.GetString(1);
                        model2.PIF_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.PIF_Rate = reader.GetString(2);
                        model2.PIF_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.PIF_Total = reader.GetString(3);
                        model2.PIF_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetPIF_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetPIF_Total = GetPIF_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Folding = reader.GetString(6);
                        model2.Folding = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillFolding.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingFolding = listBillFolding;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblBillingSticking
        List<tblListBilling> listBillSticking = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.SK_Volume,TblBilling.SK_Rate,TblBilling.SK_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Sticking
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.SK_Volume = reader.GetString(1);
                        model2.SK_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.SK_Rate = reader.GetString(2);
                        model2.SK_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.SK_Total = reader.GetString(3);
                        model2.SK_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetSK_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetSK_Total = GetSK_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Sticking = reader.GetString(6);
                        model2.Sticking = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSticking.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSticking = listBillSticking;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }



        //retrieve TblBillingTearing
        List<tblListBilling> listBillTearing = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.PIT_Volume,TblBilling.PIT_Rate,TblBilling.PIT_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Tearing
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.PIT_Volume = reader.GetString(1);
                        model2.PIT_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.PIT_Rate = reader.GetString(2);
                        model2.PIT_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.PIT_Total = reader.GetString(3);
                        model2.PIT_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetPIT_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetPIT_Total = GetPIT_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Tearing = reader.GetString(6);
                        model2.Tearing = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillTearing.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingTearing = listBillTearing;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }



        //retrieve TblBillingMatching
        List<tblListBilling> listBillMatching = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MG_Volume,TblBilling.MG_Rate,TblBilling.MG_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Matching
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MG_Volume = reader.GetString(1);
                        model2.MG_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MG_Rate = reader.GetString(2);
                        model2.MG_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MG_Total = reader.GetString(3);
                        model2.MG_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMG_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMG_Total = GetMG_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Matching = reader.GetString(6);
                        model2.Matching = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMatching.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMatching = listBillMatching;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblCDArchiving
        List<tblListBilling> listBillCDArchiving = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.CDA_Volume,TblBilling.CDA_Rate,TblBilling.CDA_Total,TblBilling.Process,TblBilling.Sst,TblBilling.CDArchiving
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.CDA_Volume = reader.GetString(1);
                        model2.CDA_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.CDA_Rate = reader.GetString(2);
                        model2.CDA_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.CDA_Total = reader.GetString(3);
                        model2.CDA_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetCDA_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetCDA_Total = GetCDA_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.CDArchiving = reader.GetString(6);
                        model2.CDArchiving = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillCDArchiving.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingCDArchiving = listBillCDArchiving;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblNpc
        List<tblListBilling> listBillNpc = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.NPC_Volume,TblBilling.NPC_Rate,TblBilling.NPC_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Npc
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.NPC_Volume = reader.GetString(1);
                        model2.NPC_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.NPC_Rate = reader.GetString(2);
                        model2.NPC_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.NPC_Total = reader.GetString(3);
                        model2.NPC_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetNPC_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetNPC_Total = GetNPC_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Npc = reader.GetString(6);
                        model2.Npc = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillNpc.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingNpc = listBillNpc;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblEnvelopeType
        List<tblListBilling> listBillEnvelopeType = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.ET_Volume,TblBilling.ET_Rate,TblBilling.ET_Total,TblBilling.Process,TblBilling.Sst,TblBilling.EnvelopeType
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.ET_Volume = reader.GetString(1);
                        model2.ET_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.ET_Rate = reader.GetString(2);
                        model2.ET_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.ET_Total = reader.GetString(3);
                        model2.ET_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetET_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetET_Total = GetET_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.EnvelopeType = reader.GetString(6);
                        model2.EnvelopeType = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillEnvelopeType.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingEnvelopeType = listBillEnvelopeType;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblEnvelopePrice
        List<tblListBilling> listBillEnvelopePrice = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.EP_Volume,TblBilling.EP_Rate,TblBilling.EP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.EnvelopePrice
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.EP_Volume = reader.GetString(1);
                        model2.EP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.EP_Rate = reader.GetString(2);
                        model2.EP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.EP_Total = reader.GetString(3);
                        model2.EP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetEP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetEP_Total = GetEP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.EnvelopePrice = reader.GetString(6);
                        model2.EnvelopePrice = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillEnvelopePrice.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingEnvelopePrice = listBillEnvelopePrice;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblPaper
        List<tblListBilling> listBillPaper = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.P_Volume,TblBilling.P_Rate,TblBilling.P_Total,TblBilling.Process,TblBilling.Sst,TblBilling.Paper
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.P_Volume = reader.GetString(1);
                        model2.P_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.P_Rate = reader.GetString(2);
                        model2.P_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.P_Total = reader.GetString(3);
                        model2.P_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetP_Total = GetP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.Paper = reader.GetString(6);
                        model2.Paper = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillPaper.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingPaper = listBillPaper;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }



        //retrieve TblPaperPrice
        List<tblListBilling> listBillPaperPrice = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.PP_Volume,TblBilling.PP_Rate,TblBilling.PP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.PaperPrice
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.PP_Volume = reader.GetString(1);
                        model2.PP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.PP_Rate = reader.GetString(2);
                        model2.PP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.PP_Total = reader.GetString(3);
                        model2.PP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetPP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetPP_Total = GetPP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.PaperPrice = reader.GetString(6);
                        model2.PaperPrice = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillPaperPrice.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingPaperPrice = listBillPaperPrice;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblSM_PrintingSM
        List<tblListBilling> listBillSM_PrintingSM = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.SMPG_Volume,TblBilling.SMPG_Rate,TblBilling.SMPG_Total,TblBilling.Process,TblBilling.Sst,TblBilling.SM_PrintingSM
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.SMPG_Volume = reader.GetString(1);
                        model2.SMPG_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.SMPG_Rate = reader.GetString(2);
                        model2.SMPG_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.SMPG_Total = reader.GetString(3);
                        model2.SMPG_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetSMPG_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetSM_Total = GetSMPG_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.SMPG_PrintingSM = reader.GetString(6);
                        model2.SMPG_PrintingSM = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSM_PrintingSM.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSM_PrintingSM = listBillSM_PrintingSM;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblSM_SM_SM_Material
        List<tblListBilling> listBillSM_SM_Material = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.SMM_Volume,TblBilling.SMM_Rate,TblBilling.SMM_Total,TblBilling.Process,TblBilling.Sst,TblBilling.SM_SM_Material,TblBilling.LBSM_SM_Material
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.SMM_Volume = reader.GetString(1);
                        model2.SMM_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.SMM_Rate = reader.GetString(2);
                        model2.SMM_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.SMM_Total = reader.GetString(3);
                        model2.SMM_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetSMM_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetSMM_Total = GetSMM_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.SM_SM_Material = reader.GetString(6);
                        model2.SM_SM_Material = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBSM_SM_Material = reader.GetString(7);
                        model2.LBSM_SM_Material = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSM_SM_Material.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSM_SM_Material = listBillSM_SM_Material;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblSM_MailBelow_5K
        List<tblListBilling> listBillSM_MailBelow_5K = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.SM5_Volume,TblBilling.SM5_Rate,TblBilling.SM5_Total,TblBilling.Process,TblBilling.Sst,TblBilling.SM_MailBelow_5K, TblBilling.LBSM_MailBelow_5K
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.SM5_Volume = reader.GetString(1);
                        model2.SM5_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.SM5_Rate = reader.GetString(2);
                        model2.SM5_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.SM5_Total = reader.GetString(3);
                        model2.SM5_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetSM5_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetSM5_Total = GetSM5_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.SM_MailBelow_5K = reader.GetString(6);
                        model2.SM_MailBelow_5K = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBSM_MailBelow_5K = reader.GetString(7);
                        model2.LBSM_MailBelow_5K = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSM_MailBelow_5K.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSM_MailBelow_5K = listBillSM_MailBelow_5K;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblSM_Handling
        List<tblListBilling> listBillSM_Handling = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.SMH_Volume,TblBilling.SMH_Rate,TblBilling.SMH_Total,TblBilling.Process,TblBilling.Sst,TblBilling.SM_Handling,TblBilling.LBSM_Handling
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.SMH_Volume = reader.GetString(1);
                        model2.SMH_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.SMH_Rate = reader.GetString(2);
                        model2.SMH_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.SMH_Total = reader.GetString(3);
                        model2.SMH_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetSMH_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetSMH_Total = GetSMH_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.SM_Handling = reader.GetString(6);
                        model2.SM_Handling = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBSM_Handling = reader.GetString(7);
                        model2.LBSM_Handling = reader.GetString(6);

                    }


                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSM_Handling.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSM_Handling = listBillSM_Handling;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblSM_Paper
        List<tblListBilling> listBillSM_Paper = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.SMP_Volume,TblBilling.SMP_Rate,TblBilling.SMP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.SM_Paper
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.SMP_Volume = reader.GetString(1);
                        model2.SMP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.SMP_Rate = reader.GetString(2);
                        model2.SMP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.SMP_Total = reader.GetString(3);
                        model2.SMP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetSMP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetSMP_Total = GetSMP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.SM_Paper = reader.GetString(6);
                        model2.SM_Paper = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSM_Paper.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSM_Paper = listBillSM_Paper;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblSM_PaperPrice
        List<tblListBilling> listBillSM_PaperPrice = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.SMPP_Volume,TblBilling.SMPP_Rate,TblBilling.SMPP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.SM_PaperPrice
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.SMPP_Volume = reader.GetString(1);
                        model2.SMPP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.SMPP_Rate = reader.GetString(2);
                        model2.SMPP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.SMPP_Total = reader.GetString(3);
                        model2.SMPP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetSMPP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetSMPP_Total = GetSMPP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.SM_PaperPrice = reader.GetString(6);
                        model2.SM_PaperPrice = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSM_PaperPrice.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSM_PaperPrice = listBillSM_PaperPrice;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblSM_Paper2
        List<tblListBilling> listBillSM_Paper2 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.SMP2_Volume,TblBilling.SMP2_Rate,TblBilling.SMP2_Total,TblBilling.Process,TblBilling.Sst,TblBilling.SM_Paper2
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.SMP2_Volume = reader.GetString(1);
                        model2.SMP2_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.SMP2_Rate = reader.GetString(2);
                        model2.SMP2_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.SMP2_Total = reader.GetString(3);
                        model2.SMP2_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetSMP2_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetSMP2_Total = GetSMP2_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.SM_Paper2 = reader.GetString(6);
                        model2.SM_Paper2 = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSM_Paper2.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSM_Paper2 = listBillSM_Paper2;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblSM_PaperPrice2
        List<tblListBilling> listBillSM_PaperPrice2 = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.SMPP2_Volume,TblBilling.SMPP2_Rate,TblBilling.SMPP2_Total,TblBilling.Process,TblBilling.Sst,TblBilling.SM_PaperPrice2
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.SMPP2_Volume = reader.GetString(1);
                        model2.SMPP2_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.SMPP2_Rate = reader.GetString(2);
                        model2.SMPP2_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.SMPP_Total = reader.GetString(3);
                        model2.SMPP2_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetSMPP2_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetSMPP_Total = GetSMP2_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.SM_PaperPrice2 = reader.GetString(6);
                        model2.SM_PaperPrice2 = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillSM_PaperPrice2.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingSM_PaperPrice2 = listBillSM_PaperPrice2;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_PrintingDuplex
        List<tblListBilling> listBillMMP_PrintingDuplex = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPPD_Volume,TblBilling.MMPPD_Rate,TblBilling.MMPPD_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_PrintingDuplex,TblBilling.LBMMP_PrintingDuplex
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPPD_Volume = reader.GetString(1);
                        model2.MMPPD_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPPD_Rate = reader.GetString(2);
                        model2.MMPPD_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPPD_Total = reader.GetString(3);
                        model2.MMPPD_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPPD_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPD_Total = GetMMPPD_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_PrintingDuplex = reader.GetString(6);
                        model2.MMP_PrintingDuplex = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_PrintingDuplex = reader.GetString(7);
                        model2.LBMMP_PrintingDuplex = reader.GetString(7);

                    }




                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_PrintingDuplex.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_PrintingDuplex = listBillMMP_PrintingDuplex;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_FirstInsert
        List<tblListBilling> listBillMMP_FirstInsert = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPFI_Volume,TblBilling.MMPFI_Rate,TblBilling.MMPFI_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_FirstInsert,TblBilling.LBMMP_FirstInsert
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPFI_Volume = reader.GetString(1);
                        model2.MMPFI_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPFI_Rate = reader.GetString(2);
                        model2.MMPFI_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPFI_Total = reader.GetString(3);
                        model2.MMPFI_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPFI_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPFI_Total = GetMMPFI_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_FirstInsert = reader.GetString(6);
                        model2.MMP_FirstInsert = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_FirstInsert = reader.GetString(7);
                        model2.LBMMP_FirstInsert = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_FirstInsert.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_FirstInsert = listBillMMP_FirstInsert;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_SecondInsert
        List<tblListBilling> listBillMMP_SecondInsert = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPSI_Volume,TblBilling.MMPSI_Rate,TblBilling.MMPSI_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_SecondInsert,TblBilling.LBMMP_SecondInsert
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPSI_Volume = reader.GetString(1);
                        model2.MMPSI_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPSI_Rate = reader.GetString(2);
                        model2.MMPSI_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPSI_Total = reader.GetString(3);
                        model2.MMPSI_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPSI_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPSI_Total = GetMMPSI_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_SecondInsert = reader.GetString(6);
                        model2.MMP_SecondInsert = reader.GetString(6);

                    }


                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.MMP_SecondInsert = reader.GetString(7);
                        model2.MMP_SecondInsert = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    ////TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_SecondInsert.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_SecondInsert = listBillMMP_SecondInsert;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_InsertingMMP
        List<tblListBilling> listBillMMP_InsertingMMP = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPI_Volume,TblBilling.MMPI_Rate,TblBilling.MMPI_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_InsertingMMP,TblBilling.LBMMP_InsertingMMP
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPI_Volume = reader.GetString(1);
                        model2.MMPI_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPI_Rate = reader.GetString(2);
                        model2.MMPI_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPI_Total = reader.GetString(3);
                        model2.MMPI_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPI_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPI_Total = GetMMPI_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_InsertingMMP = reader.GetString(6);
                        model2.MMP_InsertingMMP = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.MMP_InsertingMMP = reader.GetString(7);
                        model2.MMP_InsertingMMP = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_InsertingMMP.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_InsertingMMP = listBillMMP_InsertingMMP;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_BrochureInsert
        List<tblListBilling> listBillMMP_BrochureInsert = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPBI_Volume,TblBilling.MMPBI_Rate,TblBilling.MMPBI_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_BrochureInsert,TblBilling.LBMMP_BrochureInsert
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPBI_Volume = reader.GetString(1);
                        model2.MMPBI_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPBI_Rate = reader.GetString(2);
                        model2.MMPBI_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPBI_Total = reader.GetString(3);
                        model2.MMPBI_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPBI_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPBI_Total = GetMMPBI_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_BrochureInsert = reader.GetString(6);
                        model2.MMP_BrochureInsert = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_BrochureInsert = reader.GetString(7);
                        model2.LBMMP_BrochureInsert = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_BrochureInsert.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_BrochureInsert = listBillMMP_BrochureInsert;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblMMP_MailBelow_5K
        List<tblListBilling> listBillMMP_MailBelow_5K = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMP5_Volume,TblBilling.MMP5_Rate,TblBilling.MMP5_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_MailBelow_5K,TblBilling.LBMMP_MailBelow_5K
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMP5_Volume = reader.GetString(1);
                        model2.MMP5_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMP5_Rate = reader.GetString(2);
                        model2.MMP5_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMP5_Total = reader.GetString(3);
                        model2.MMP5_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMP5_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMP5_Total = GetMMP5_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_MailBelow_5K = reader.GetString(6);
                        model2.MMP_MailBelow_5K = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_MailBelow_5K = reader.GetString(7);
                        model2.LBMMP_MailBelow_5K = reader.GetString(7);

                    }


                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_MailBelow_5K.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_MailBelow_5K = listBillMMP_MailBelow_5K;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_Handling
        List<tblListBilling> listBillMMP_Handling = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPH_Volume,TblBilling.MMPH_Rate,TblBilling.MMPH_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_Handling,TblBilling.LBMMP_Handling
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPH_Volume = reader.GetString(1);
                        model2.MMPH_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPH_Rate = reader.GetString(2);
                        model2.MMPH_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPH_Total = reader.GetString(3);
                        model2.MMPH_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPH_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPH_Total = GetMMPH_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_Handling = reader.GetString(6);
                        model2.MMP_Handling = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_Handling = reader.GetString(7);
                        model2.LBMMP_Handling = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_Handling.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_Handling = listBillMMP_Handling;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_Sealing
        List<tblListBilling> listBillMMP_Sealing = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPS_Volume,TblBilling.MMPS_Rate,TblBilling.MMPS_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_Sealing,TblBilling.LBMMP_Sealing
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPS_Volume = reader.GetString(1);
                        model2.MMPS_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPS_Rate = reader.GetString(2);
                        model2.MMPS_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPS_Total = reader.GetString(3);
                        model2.MMPS_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPS_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPS_Total = GetMMPS_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_Sealing = reader.GetString(6);
                        model2.MMP_Sealing = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_Sealing = reader.GetString(7);
                        model2.LBMMP_Sealing = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_Sealing.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_Sealing = listBillMMP_Sealing;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_Tearing
        List<tblListBilling> listBillMMP_Tearing = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPT_Volume,TblBilling.MMPT_Rate,TblBilling.MMPT_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_Tearing,TblBilling.LBMMP_Tearing
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPT_Volume = reader.GetString(1);
                        model2.MMPT_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPT_Rate = reader.GetString(2);
                        model2.MMPT_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPT_Total = reader.GetString(3);
                        model2.MMPT_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPT_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPT_Total = GetMMPT_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_Tearing = reader.GetString(6);
                        model2.MMP_Tearing = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_Tearing = reader.GetString(7);
                        model2.LBMMP_Tearing = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_Tearing.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_Tearing = listBillMMP_Tearing;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_Folding
        List<tblListBilling> listBillMMP_Folding = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPF_Volume,TblBilling.MMPF_Rate,TblBilling.MMPF_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_Folding,TblBilling.LBMMP_Folding
                                   FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPF_Volume = reader.GetString(1);
                        model2.MMPF_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPF_Rate = reader.GetString(2);
                        model2.MMPF_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPF_Total = reader.GetString(3);
                        model2.MMPF_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPF_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPF_Total = GetMMPF_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_Folding = reader.GetString(6);
                        model2.MMP_Folding = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_Folding = reader.GetString(7);
                        model2.LBMMP_Folding = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_Folding.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_Folding = listBillMMP_Folding;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_Sticking
        List<tblListBilling> listBillMMP_Sticking = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPST_Volume,TblBilling.MMPST_Rate,TblBilling.MMPST_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_Sticking,TblBilling.LBMMP_Sticking
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPST_Volume = reader.GetString(1);
                        model2.MMPST_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPST_Rate = reader.GetString(2);
                        model2.MMPST_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPST_Total = reader.GetString(3);
                        model2.MMPST_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPST_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPST_Total = GetMMPST_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_Sticking = reader.GetString(6);
                        model2.MMP_Sticking = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_Sticking = reader.GetString(7);
                        model2.LBMMP_Sticking = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_Sticking.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_Sticking = listBillMMP_Sticking;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblMMP_Labelling
        List<tblListBilling> listBillMMP_Labelling = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPL_Volume,TblBilling.MMPL_Rate,TblBilling.MMPL_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_Labelling,TblBilling.LBMMP_Labelling
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPL_Volume = reader.GetString(1);
                        model2.MMPL_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPL_Rate = reader.GetString(2);
                        model2.MMPL_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPL_Total = reader.GetString(3);
                        model2.MMPL_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPL_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPL_Total = GetMMPL_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_Labelling = reader.GetString(6);
                        model2.MMP_Labelling = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_Labelling = reader.GetString(7);
                        model2.LBMMP_Labelling = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_Labelling.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_Labelling = listBillMMP_Labelling;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblMMP_Matching
        List<tblListBilling> listBillMMP_Matching = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPM_Volume,TblBilling.MMPM_Rate,TblBilling.MMPM_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_Matching,TblBilling.LBMMP_Matching
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPM_Volume = reader.GetString(1);
                        model2.MMPM_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPM_Rate = reader.GetString(2);
                        model2.MMPM_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPM_Total = reader.GetString(3);
                        model2.MMPM_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPM_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPM_Total = GetMMPM_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_Matching = reader.GetString(6);
                        model2.MMP_Matching = reader.GetString(6);

                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.LBMMP_Matching = reader.GetString(6);
                        model2.LBMMP_Matching = reader.GetString(6);

                    }






                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_Matching.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_Matching = listBillMMP_Matching;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_CDArchiving
        List<tblListBilling> listBillMMP_CDArchiving = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPCD_Volume,TblBilling.MMPCD_Rate,TblBilling.MMPCD_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_CDArchiving,TblBilling.LBMMP_CDArchiving
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPCD_Volume = reader.GetString(1);
                        model2.MMPCD_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPCD_Rate = reader.GetString(2);
                        model2.MMPCD_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPCD_Total = reader.GetString(3);
                        model2.MMPCD_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPCD_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPCD_Total = GetMMPCD_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_CDArchiving = reader.GetString(6);
                        model2.MMP_CDArchiving = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBMMP_CDArchiving = reader.GetString(7);
                        model2.LBMMP_CDArchiving = reader.GetString(7);

                    }


                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_CDArchiving.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_CDArchiving = listBillMMP_CDArchiving;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_EnvelopeType
        List<tblListBilling> listBillMMP_EnvelopeType = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPET_Volume,TblBilling.MMPET_Rate,TblBilling.MMPET_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_EnvelopeType
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPET_Volume = reader.GetString(1);
                        model2.MMPET_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPET_Rate = reader.GetString(2);
                        model2.MMPET_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPET_Total = reader.GetString(3);
                        model2.MMPET_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPET_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPET_Total = GetMMPET_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_EnvelopeType = reader.GetString(6);
                        model2.MMP_EnvelopeType = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_EnvelopeType.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_EnvelopeType = listBillMMP_EnvelopeType;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblMMP_EnvelopePrice
        List<tblListBilling> listBillMMP_EnvelopePrice = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPEP_Volume,TblBilling.MMPEP_Rate,TblBilling.MMPEP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_EnvelopePrice
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPEP_Volume = reader.GetString(1);
                        model2.MMPEP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPEP_Rate = reader.GetString(2);
                        model2.MMPEP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPEP_Total = reader.GetString(3);
                        model2.MMPEP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPEP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPEP_Total = GetMMPEP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_EnvelopePrice = reader.GetString(6);
                        model2.MMP_EnvelopePrice = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_EnvelopePrice.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_EnvelopePrice = listBillMMP_EnvelopePrice;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblMMP_Paper
        List<tblListBilling> listBillMMP_Paper = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPPR_Volume,TblBilling.MMPPR_Rate,TblBilling.MMPPR_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_Paper
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPPR_Volume = reader.GetString(1);
                        model2.MMPPR_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPPR_Rate = reader.GetString(2);
                        model2.MMPPR_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPPR_Total = reader.GetString(3);
                        model2.MMPPR_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPPR_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPPR_Total = GetMMPPR_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_Paper = reader.GetString(6);
                        model2.MMP_Paper = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_Paper.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_Paper = listBillMMP_Paper;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }



        //retrieve TblMMP_PaperPrice
        List<tblListBilling> listBillMMP_PaperPrice = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.MMPPP_Volume,TblBilling.MMPPP_Rate,TblBilling.MMPPP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.MMP_PaperPrice
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.MMPPP_Volume = reader.GetString(1);
                        model2.MMPPP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.MMPPP_Rate = reader.GetString(2);
                        model2.MMPPP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.MMPPP_Total = reader.GetString(3);
                        model2.MMPPP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetMMPPP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetMMPPP_Total = GetMMPPP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.MMP_PaperPrice = reader.GetString(6);
                        model2.MMP_PaperPrice = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillMMP_PaperPrice.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingMMP_PaperPrice = listBillMMP_PaperPrice;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }



        //retrieve TblDCP_FoldingCharges
        List<tblListBilling> listBillDCP_FoldingCharges = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPFC_Volume,TblBilling.DCPFC_Rate,TblBilling.DCPFC_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_FoldingCharges,TblBilling.LBDCP_FoldingCharges
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPFC_Volume = reader.GetString(1);
                        model2.DCPFC_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPFC_Rate = reader.GetString(2);
                        model2.DCPFC_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPFC_Total = reader.GetString(3);
                        model2.DCPFC_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPFC_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPFC_Total = GetDCPFC_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_FoldingCharges = reader.GetString(6);
                        model2.DCP_FoldingCharges = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_FoldingCharges = reader.GetString(7);
                        model2.LBDCP_FoldingCharges = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_FoldingCharges.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_FoldingCharges = listBillDCP_FoldingCharges;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_SupplyPrintLabel
        List<tblListBilling> listBillDCP_SupplyPrintLabel = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPSP_Volume,TblBilling.DCPSP_Rate,TblBilling.DCPSP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_SupplyPrintLabel, TblBilling.LBDCP_SupplyPrintLabel
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPSP_Volume = reader.GetString(1);
                        model2.DCPSP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPSP_Rate = reader.GetString(2);
                        model2.DCPSP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPSP_Total = reader.GetString(3);
                        model2.DCPSP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPSP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPSP_Total = GetDCPSP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_SupplyPrintLabel = reader.GetString(6);
                        model2.DCP_SupplyPrintLabel = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_SupplyPrintLabel = reader.GetString(7);
                        model2.LBDCP_SupplyPrintLabel = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_SupplyPrintLabel.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_SupplyPrintLabel = listBillDCP_SupplyPrintLabel;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        ////retrieve TblDCP_FoldingCharges
        //List<tblListBilling> listBillDCP_FoldingCharges = new List<tblListBilling>();

        //using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        //using (SqlCommand command = new SqlCommand("", cn))
        //{

        //    cn.Open();
        //    command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCP_Volume,TblBilling.DCP_Rate,TblBilling.DCP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_FoldingCharges
        //                          FROM [IflowSeed].[dbo].[JobInstruction]                                  
        //                          LEFT JOIN [IflowSeed].[dbo].[TblBilling]
        //                          On JobInstruction.Id = TblBilling.JobInstructionId
        //                          WHERE JobInstruction.Id=@Id ";
        //    command.Parameters.AddWithValue("@Id", Id);
        //    var reader = command.ExecuteReader();
        //    while (reader.Read())
        //    {
        //        tblListBilling model2 = new tblListBilling();
        //        {
        //            if (reader.IsDBNull(0) == false)
        //            {
        //                ViewBag.Description = reader.GetString(0);
        //                model2.Description = reader.GetString(0);
        //            }
        //            if (reader.IsDBNull(1) == false)
        //            {
        //                ViewBag.DCPFC_Volume = reader.GetString(1);
        //                model2.DCPFC_Volume = reader.GetString(1);
        //            }
        //            if (reader.IsDBNull(2) == false)
        //            {
        //                ViewBag.DCPFC_Rate = reader.GetString(2);
        //                model2.DCPFC_Rate = reader.GetString(2);
        //            }
        //            if (reader.IsDBNull(3) == false)
        //            {
        //                ViewBag.DCPFC_Total = reader.GetString(3);
        //                model2.DCPFC_Total = reader.GetString(3);
        //                string TAmount = reader.GetString(3);
        //                double AddAmount = Convert.ToDouble(TAmount);
        //                GetDCPFC_Total = GetTotalAmount + AddAmount;

        //                ViewBag.GetDCPFC_Total = GetDCPFC_Total;


        //            }
        //            if (reader.IsDBNull(4) == false)
        //            {
        //                ViewBag.Process = reader.GetString(4);
        //                model2.Process = reader.GetString(4);
        //            }
        //            if (reader.IsDBNull(5) == false)
        //            {
        //                ViewBag.Sst = reader.GetString(5);
        //                model2.Sst = reader.GetString(5);

        //            }

        //            if (reader.IsDBNull(6) == false)
        //            {
        //                ViewBag.DCP_FoldingCharges = reader.GetString(6);
        //                model2.DCP_FoldingCharges = reader.GetString(6);

        //            }

        //            totVolume += Decimal.Parse(reader.GetString(1));
        //            //TotAmntSST += Decimal.Parse(reader.GetString(5));

        //            TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


        //        }




        //        listBillDCP_FoldingCharges.Add(model2);
        //        ViewBag.Sst = totalAmountSst;


        //        ViewBag.TotAmntSST = TotAmntSST;
        //        ViewBag.tableBilingListingDCP_FoldingCharges = listBillDCP_FoldingCharges;
        //        ViewBag.totVolume = totVolume;
        //        ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
        //        ViewBag.TotalAll = TotalAll;




        //    }
        //}



        //retrieve TblDCP_PrintingDuplex
        List<tblListBilling> listBillDCP_PrintingDuplex = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPPD_Volume,TblBilling.DCPPD_Rate,TblBilling.DCPPD_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_PrintingDuplex,TblBilling.LBDCP_PrintingDuplex
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPPD_Volume = reader.GetString(1);
                        model2.DCPPD_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPPD_Rate = reader.GetString(2);
                        model2.DCPPD_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPPD_Total = reader.GetString(3);
                        model2.DCPPD_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPPD_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPPD_Total = GetDCPPD_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_PrintingDuplex = reader.GetString(6);
                        model2.DCP_PrintingDuplex = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_PrintingDuplex = reader.GetString(7);
                        model2.LBDCP_PrintingDuplex = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_PrintingDuplex.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_PrintingDuplex = listBillDCP_PrintingDuplex;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_FirstInsert
        List<tblListBilling> listBillDCP_FirstInsert = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPFI_Volume,TblBilling.DCPFI_Rate,TblBilling.DCPFI_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_FirstInsert,TblBilling.LBDCP_FirstInsert
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPFI_Volume = reader.GetString(1);
                        model2.DCPFI_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPFI_Rate = reader.GetString(2);
                        model2.DCPFI_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPFI_Total = reader.GetString(3);
                        model2.DCPFI_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPFI_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPFI_Total = GetDCPFI_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_FirstInsert = reader.GetString(6);
                        model2.DCP_FirstInsert = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_FirstInsert = reader.GetString(7);
                        model2.LBDCP_FirstInsert = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_FirstInsert.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_FirstInsert = listBillDCP_FirstInsert;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblDCP_SecondInsert
        List<tblListBilling> listBillDCP_SecondInsert = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPSI_Volume,TblBilling.DCPSI_Rate,TblBilling.DCPSI_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_SecondInsert,TblBilling.LBDCP_SecondInsert
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPSI_Volume = reader.GetString(1);
                        model2.DCPSI_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPSI_Rate = reader.GetString(2);
                        model2.DCPSI_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPSI_Total = reader.GetString(3);
                        model2.DCPSI_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPSI_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPSI_Total = GetDCPSI_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_SecondInsert = reader.GetString(6);
                        model2.DCP_SecondInsert = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_SecondInsert = reader.GetString(7);
                        model2.LBDCP_SecondInsert = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_SecondInsert.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_SecondInsert = listBillDCP_SecondInsert;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_BrochureInsert
        List<tblListBilling> listBillDCP_BrochureInsert = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPBI_Volume,TblBilling.DCPBI_Rate,TblBilling.DCPBI_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_BrochureInsert,TblBilling.LBDCP_BrochureInsert
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPBI_Volume = reader.GetString(1);
                        model2.DCPBI_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPBI_Rate = reader.GetString(2);
                        model2.DCPBI_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPBI_Total = reader.GetString(3);
                        model2.DCPBI_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPBI_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPBI_Total = GetDCPBI_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_BrochureInsert = reader.GetString(6);
                        model2.DCP_BrochureInsert = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_BrochureInsert = reader.GetString(7);
                        model2.LBDCP_BrochureInsert = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_BrochureInsert.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_BrochureInsert = listBillDCP_BrochureInsert;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_MailBelow_5K
        List<tblListBilling> listBillDCP_MailBelow_5K = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCP5_Volume,TblBilling.DCP5_Rate,TblBilling.DCP5_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_MailBelow_5K,TblBilling.LBDCP_MailBelow_5K
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCP5_Volume = reader.GetString(1);
                        model2.DCP5_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCP5_Rate = reader.GetString(2);
                        model2.DCP5_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCP5_Total = reader.GetString(3);
                        model2.DCP5_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCP5_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCP5_Total = GetDCP5_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_MailBelow_5K = reader.GetString(6);
                        model2.DCP_MailBelow_5K = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_MailBelow_5K = reader.GetString(7);
                        model2.LBDCP_MailBelow_5K = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_MailBelow_5K.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_MailBelow_5K = listBillDCP_MailBelow_5K;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblDCP_Handling
        List<tblListBilling> listBillDCP_Handling = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPH_Volume,TblBilling.DCPH_Rate,TblBilling.DCPH_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_Handling,TblBilling.LBDCP_Handling
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPH_Volume = reader.GetString(1);
                        model2.DCPH_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPH_Rate = reader.GetString(2);
                        model2.DCPH_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPH_Total = reader.GetString(3);
                        model2.DCPH_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPH_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPH_Total = GetDCPH_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_Handling = reader.GetString(6);
                        model2.DCP_Handling = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_Handling = reader.GetString(7);
                        model2.LBDCP_Handling = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_Handling.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_Handling = listBillDCP_Handling;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblDCP_Sealing
        List<tblListBilling> listBillDCP_Sealing = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPSL_Volume,TblBilling.DCPSL_Rate,TblBilling.DCPSL_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_Sealing,TblBilling.LBDCP_Sealing
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPSL_Volume = reader.GetString(1);
                        model2.DCPSL_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPSL_Rate = reader.GetString(2);
                        model2.DCPSL_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPSL_Total = reader.GetString(3);
                        model2.DCPSL_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPSL_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPSL_Total = GetDCPSL_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_Sealing = reader.GetString(6);
                        model2.DCP_Sealing = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_Sealing = reader.GetString(7);
                        model2.LBDCP_Sealing = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_Sealing.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_Sealing = listBillDCP_Sealing;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_Tearing
        List<tblListBilling> listBillDCP_Tearing = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPT_Volume,TblBilling.DCPT_Rate,TblBilling.DCPT_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_Tearing,TblBilling.LBDCP_Tearing
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPT_Volume = reader.GetString(1);
                        model2.DCPT_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPT_Rate = reader.GetString(2);
                        model2.DCPT_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPT_Total = reader.GetString(3);
                        model2.DCPT_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPT_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPT_Total = GetDCPT_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_Tearing = reader.GetString(6);
                        model2.DCP_Tearing = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_Tearing = reader.GetString(7);
                        model2.LBDCP_Tearing = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_Tearing.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_Tearing = listBillDCP_Tearing;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblDCP_Folding
        List<tblListBilling> listBillDCP_Folding = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPF_Volume,TblBilling.DCPF_Rate,TblBilling.DCPF_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_Folding,TblBilling.LBDCP_Folding
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPF_Volume = reader.GetString(1);
                        model2.DCPF_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPF_Rate = reader.GetString(2);
                        model2.DCPF_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPF_Total = reader.GetString(3);
                        model2.DCPF_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPF_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPF_Total = GetDCPF_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_Folding = reader.GetString(6);
                        model2.DCP_Folding = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_Folding = reader.GetString(7);
                        model2.LBDCP_Folding = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_Folding.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_Folding = listBillDCP_Folding;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_Sticking
        List<tblListBilling> listBillDCP_Sticking = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPS_Volume,TblBilling.DCPS_Rate,TblBilling.DCPS_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_Sticking,TblBilling.LBDCP_Sticking
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPS_Volume = reader.GetString(1);
                        model2.DCPS_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPS_Rate = reader.GetString(2);
                        model2.DCPS_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPS_Total = reader.GetString(3);
                        model2.DCPS_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPS_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPS_Total = GetDCPS_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_Sticking = reader.GetString(6);
                        model2.DCP_Sticking = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_Sticking = reader.GetString(7);
                        model2.LBDCP_Sticking = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_Sticking.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_Sticking = listBillDCP_Sticking;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_Labelling
        List<tblListBilling> listBillDCP_Labelling = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPL_Volume,TblBilling.DCPL_Rate,TblBilling.DCPL_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_Labelling,TblBilling.LBDCP_Labelling
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPL_Volume = reader.GetString(1);
                        model2.DCPL_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPL_Rate = reader.GetString(2);
                        model2.DCPL_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPL_Total = reader.GetString(3);
                        model2.DCPL_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPL_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPL_Total = GetDCPL_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_Labelling = reader.GetString(6);
                        model2.DCP_Labelling = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_Labelling = reader.GetString(7);
                        model2.LBDCP_Labelling = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_Labelling.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_Labelling = listBillDCP_Labelling;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_Matching
        List<tblListBilling> listBillDCP_Matching = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPM_Volume,TblBilling.DCPM_Rate,TblBilling.DCPM_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_Matching,TblBilling.LBDCP_Matching
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPM_Volume = reader.GetString(1);
                        model2.DCPM_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPM_Rate = reader.GetString(2);
                        model2.DCPM_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPM_Total = reader.GetString(3);
                        model2.DCPM_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPM_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPM_Total = GetDCPM_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_Matching = reader.GetString(6);
                        model2.DCP_Matching = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_Matching = reader.GetString(7);
                        model2.LBDCP_Matching = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_Matching.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_Matching = listBillDCP_Matching;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblDCP_CDArchiving
        List<tblListBilling> listBillDCP_CDArchiving = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPCD_Volume,TblBilling.DCPCD_Rate,TblBilling.DCPCD_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_CDArchiving,TblBilling.LBDCP_CDArchiving
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPCD_Volume = reader.GetString(1);
                        model2.DCPCD_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPCD_Rate = reader.GetString(2);
                        model2.DCPCD_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPCD_Total = reader.GetString(3);
                        model2.DCPCD_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPCD_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPCD_Total = GetDCPCD_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_CDArchiving = reader.GetString(6);
                        model2.DCP_CDArchiving = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBDCP_CDArchiving = reader.GetString(7);
                        model2.LBDCP_CDArchiving = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_CDArchiving.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_CDArchiving = listBillDCP_CDArchiving;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_EnvelopeType
        List<tblListBilling> listBillDCP_EnvelopeType = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPET_Volume,TblBilling.DCPET_Rate,TblBilling.DCPET_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_EnvelopeType
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPET_Volume = reader.GetString(1);
                        model2.DCPET_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPET_Rate = reader.GetString(2);
                        model2.DCPET_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPET_Total = reader.GetString(3);
                        model2.DCPET_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPET_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPET_Total = GetDCPET_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_EnvelopeType = reader.GetString(6);
                        model2.DCP_EnvelopeType = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_EnvelopeType.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_EnvelopeType = listBillDCP_EnvelopeType;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_EnvelopePrice
        List<tblListBilling> listBillDCP_EnvelopePrice = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPEP_Volume,TblBilling.DCPEP_Rate,TblBilling.DCPEP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_EnvelopePrice
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPEP_Volume = reader.GetString(1);
                        model2.DCPEP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPEP_Rate = reader.GetString(2);
                        model2.DCPEP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPEP_Total = reader.GetString(3);
                        model2.DCPEP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPEP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPEP_Total = GetDCPEP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_EnvelopePrice = reader.GetString(6);
                        model2.DCP_EnvelopePrice = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_EnvelopePrice.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_EnvelopePrice = listBillDCP_EnvelopePrice;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_Paper
        List<tblListBilling> listBillDCP_Paper = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPP_Volume,TblBilling.DCPP_Rate,TblBilling.DCPP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_Paper
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPP_Volume = reader.GetString(1);
                        model2.DCPP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPP_Rate = reader.GetString(2);
                        model2.DCPP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPP_Total = reader.GetString(3);
                        model2.DCPP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPP_Total = GetDCPP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_Paper = reader.GetString(6);
                        model2.DCP_Paper = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_Paper.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_Paper = listBillDCP_Paper;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblDCP_PaperPrice
        List<tblListBilling> listBillDCP_PaperPrice = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.DCPPP_Volume,TblBilling.DCPPP_Rate,TblBilling.DCPPP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.DCP_PaperPrice
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.DCPPP_Volume = reader.GetString(1);
                        model2.DCPPP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.DCPPP_Rate = reader.GetString(2);
                        model2.DCPPP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.DCPPP_Total = reader.GetString(3);
                        model2.DCPPP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetDCPPP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetDCPPP_Total = GetDCPPP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.DCP_PaperPrice = reader.GetString(6);
                        model2.DCP_PaperPrice = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillDCP_PaperPrice.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingDCP_PaperPrice = listBillDCP_PaperPrice;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblRM_Printing
        List<tblListBilling> listBillRM_Printing = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.RMPT_Volume,TblBilling.RMPT_Rate,TblBilling.RMPT_Total,TblBilling.Process,TblBilling.Sst,TblBilling.RM_Printing,TblBilling.LBRM_Printing
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.RMPT_Volume = reader.GetString(1);
                        model2.RMPT_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RMPT_Rate = reader.GetString(2);
                        model2.RMPT_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.RMPT_Total = reader.GetString(3);
                        model2.RMPT_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetRMPT_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetRMPT_Total = GetRMPT_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.RM_Printing = reader.GetString(6);
                        model2.RM_Printing = reader.GetString(6);

                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.RM_Printing = reader.GetString(6);
                        model2.RM_Printing = reader.GetString(6);

                    }

                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBRM_Printing = reader.GetString(7);
                        model2.LBRM_Printing = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillRM_Printing.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingRM_Printing = listBillRM_Printing;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblRM_Selfmailer
        List<tblListBilling> listBillRM_Selfmailer = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.RMS_Volume,TblBilling.RMS_Rate,TblBilling.RMS_Total,TblBilling.Process,TblBilling.Sst,TblBilling.RM_Selfmailer,TblBilling.LBRM_Selfmailer 
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.RMS_Volume = reader.GetString(1);
                        model2.RMS_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RMS_Rate = reader.GetString(2);
                        model2.RMS_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.RMS_Total = reader.GetString(3);
                        model2.RMS_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetRMS_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetRMS_Total = GetRMS_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.RM_Selfmailer = reader.GetString(6);
                        model2.RM_Selfmailer = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBRM_Selfmailer = reader.GetString(7);
                        model2.LBRM_Selfmailer = reader.GetString(7);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillRM_Selfmailer.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingRM_Selfmailer = listBillRM_Selfmailer;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblRM_MailBelow_5K
        List<tblListBilling> listBillRM_MailBelow_5K = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.RM5_Volume,TblBilling.RM5_Rate,TblBilling.RM5_Total,TblBilling.Process,TblBilling.Sst,TblBilling.RM_MailBelow_5K,TblBilling.LBRM_MailBelow_5K
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.RM5_Volume = reader.GetString(1);
                        model2.RM5_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RM5_Rate = reader.GetString(2);
                        model2.RM5_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.RM5_Total = reader.GetString(3);
                        model2.RM5_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetRM5_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetRM5_Total = GetRM5_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.RM_MailBelow_5K = reader.GetString(6);
                        model2.RM_MailBelow_5K = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBRM_MailBelow_5K = reader.GetString(7);
                        model2.LBRM_MailBelow_5K = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillRM_MailBelow_5K.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingRM_MailBelow_5K = listBillRM_MailBelow_5K;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblRM_Handling
        List<tblListBilling> listBillRM_Handling = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.RMH_Volume,TblBilling.RMH_Rate,TblBilling.RMH_Total,TblBilling.Process,TblBilling.Sst,TblBilling.RM_Handling,TblBilling.LBRM_Handling
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.RMH_Volume = reader.GetString(1);
                        model2.RMH_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RMH_Rate = reader.GetString(2);
                        model2.RMH_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.RMH_Total = reader.GetString(3);
                        model2.RMH_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetRMH_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetRMH_Total = GetRMH_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.RM_Handling = reader.GetString(6);
                        model2.RM_Handling = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.LBRM_Handling = reader.GetString(7);
                        model2.LBRM_Handling = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillRM_Handling.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingRM_Handling = listBillRM_Handling;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblRM_LabellingRegsterMails
        List<tblListBilling> listBillRM_LabellingRegsterMails = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.RML_Volume,TblBilling.RML_Rate,TblBilling.RML_Total,TblBilling.Process,TblBilling.Sst,TblBilling.RM_LabellingRegsterMails,TblBilling.LBRM_LabellingRegsterMails
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.RML_Volume = reader.GetString(1);
                        model2.RML_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RML_Rate = reader.GetString(2);
                        model2.RML_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.RML_Total = reader.GetString(3);
                        model2.RML_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetRML_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetRML_Total = GetRML_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.RM_LabellingRegsterMails = reader.GetString(6);
                        model2.RM_LabellingRegsterMails = reader.GetString(6);

                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        ViewBag.RM_LabellingRegsterMails = reader.GetString(7);
                        model2.LBRM_LabellingRegsterMails = reader.GetString(7);

                    }
                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillRM_LabellingRegsterMails.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingRM_LabellingRegsterMails = listBillRM_LabellingRegsterMails;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }

        //retrieve TblRM_Paper
        List<tblListBilling> listBillRM_Paper = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.RMP_Volume,TblBilling.RMP_Rate,TblBilling.RMP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.RM_Paper
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.RMP_Volume = reader.GetString(1);
                        model2.RMP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RMP_Rate = reader.GetString(2);
                        model2.RMP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.RMP_Total = reader.GetString(3);
                        model2.RMP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetRMP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetRMP_Total = GetRMP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.RM_Paper = reader.GetString(6);
                        model2.RM_Paper = reader.GetString(6);

                    }

                    ///*totVolume += Decimal.Parse(reader.GetString(1))*/;
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillRM_Paper.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingRM_Paper = listBillRM_Paper;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }


        //retrieve TblRM_PaperPrice
        List<tblListBilling> listBillRM_PaperPrice = new List<tblListBilling>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            cn.Open();
            command.CommandText = @"SELECT TblBilling.Description,TblBilling.RMPP_Volume,TblBilling.RMPP_Rate,TblBilling.RMPP_Total,TblBilling.Process,TblBilling.Sst,TblBilling.RM_PaperPrice
                                  FROM [IflowSeed].[dbo].[JobInstruction]                                  
                                  LEFT JOIN [IflowSeed].[dbo].[TblBilling]
                                  On JobInstruction.Id = TblBilling.JobInstructionId
                                  WHERE JobInstruction.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                tblListBilling model2 = new tblListBilling();
                {
                    if (reader.IsDBNull(0) == false)
                    {
                        ViewBag.Description = reader.GetString(0);
                        model2.Description = reader.GetString(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        ViewBag.RMPP_Volume = reader.GetString(1);
                        model2.RMPP_Volume = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        ViewBag.RMPP_Rate = reader.GetString(2);
                        model2.RMPP_Rate = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        ViewBag.RMPP_Total = reader.GetString(3);
                        model2.RMPP_Total = reader.GetString(3);
                        string TAmount = reader.GetString(3);
                        double AddAmount = Convert.ToDouble(TAmount);
                        GetRMPP_Total = GetTotalAmount + AddAmount;

                        ViewBag.GetRMPP_Total = GetRMPP_Total;


                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        ViewBag.Process = reader.GetString(4);
                        model2.Process = reader.GetString(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        ViewBag.Sst = reader.GetString(5);
                        model2.Sst = reader.GetString(5);

                    }

                    if (reader.IsDBNull(6) == false)
                    {
                        ViewBag.RM_PaperPrice = reader.GetString(6);
                        model2.RM_PaperPrice = reader.GetString(6);

                    }

                    //totVolume += Decimal.Parse(reader.GetString(1));
                    //TotAmntSST += Decimal.Parse(reader.GetString(5));

                    TotAmntSST += ((decimal)(Math.Round(totalAmountSst, 5)));


                }




                listBillRM_PaperPrice.Add(model2);
                ViewBag.Sst = totalAmountSst;


                ViewBag.TotAmntSST = TotAmntSST;
                ViewBag.tableBilingListingRM_PaperPrice = listBillRM_PaperPrice;
                ViewBag.totVolume = totVolume;
                ViewBag.TotalProcessingCharge_Postage = TotalProcessingCharge_Postage;
                ViewBag.TotalAll = TotalAll;




            }
        }







        //retrieve TblBillingMaterial

        List<TblMaterials> listBill2 = new List<TblMaterials>();

        decimal TotAmnt2 = 0;
        decimal TotAmntSST2 = 0;

        decimal totVolume2 = 0;
        decimal TotalProcessingCharge_Postage2 = 0;




        ViewBag.TotAmnt2 = TotAmnt2;
        ViewBag.TotAmntSST2 = TotAmntSST2;
        ViewBag.totVolume2 = totVolume2;
        ViewBag.TotalProcessingCharge_Postage2 = TotalProcessingCharge_Postage2;




        using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command2 = new SqlCommand("", cn2))
        {

            ViewBag.TblMaterials = listBill2;


            cn2.Open();
            command2.CommandText = @"SELECT TblMaterials.Paper, TblMaterials.VolumePaper, TblMaterials.RatePaper, TblMaterials.Env, TblMaterials.RateEnv, TblMaterials.VolumeEnv,TblMaterials.Sst,TblMaterials.TotalAmountPaper,TblMaterials.TotalAmountEnv
                                  FROM  JobInstruction INNER JOIN
                                  TblMaterials ON JobInstruction.Id = TblMaterials.JobInstructionId
                                  WHERE JobInstruction.Id=@Id";
            command2.Parameters.AddWithValue("@Id", Id);
            var reader2 = command2.ExecuteReader();
            while (reader2.Read())
            {
                TblMaterials model2 = new TblMaterials();
                {
                    if (reader2.IsDBNull(0) == false)
                    {
                        ViewBag.Paper = reader2.GetString(0);
                        model2.Paper = reader2.GetString(0);
                    }
                    if (reader2.IsDBNull(1) == false)
                    {
                        ViewBag.VolumePaper = reader2.GetString(1);
                        model2.VolumePaper = reader2.GetString(1);
                    }
                    if (reader2.IsDBNull(2) == false)
                    {
                        ViewBag.RatePaper = reader2.GetString(2);
                        model2.RatePaper = reader2.GetString(2);
                    }
                    if (reader2.IsDBNull(3) == false)
                    {
                        ViewBag.Env = reader2.GetString(3);
                        model2.Env = reader2.GetString(3);
                    }
                    if (reader2.IsDBNull(4) == false)
                    {
                        ViewBag.RateEnv = reader2.GetString(4);
                        model2.RateEnv = reader2.GetString(4);
                    }
                    if (reader2.IsDBNull(5) == false)
                    {
                        ViewBag.VolumeEnv = reader2.GetString(5);
                        model2.VolumeEnv = reader2.GetString(5);
                    }
                    if (reader2.IsDBNull(6) == false)
                    {
                        ViewBag.Sst = reader2.GetString(6);
                        model2.Sst = reader2.GetString(6);

                        string Sst = reader2.GetString(6);

                        totalAmountSst = (Decimal.Parse(reader2.GetString(6)) * Decimal.Parse(Sst) + Decimal.Parse(reader2.GetString(6)));

                        model2.TotalAmountSst = ((decimal)(Math.Round(totalAmountSst, 2))).ToString();
                    }

                    if (reader2.IsDBNull(7) == false)
                    {
                        model2.TotalAmountPaper = reader2.GetString(7);
                        string TotalAmountPaper = reader2.GetString(7);
                        double AddAmount2 = Convert.ToDouble(TotalAmountPaper);

                        ViewBag.AddAmount2 = AddAmount2;



                    }

                    if (reader2.IsDBNull(8) == false)
                    {

                        model2.TotalAmountEnv = reader2.GetString(8);
                        string TotalAmountEnv = reader2.GetString(8);
                        double AddAmount3 = Convert.ToDouble(TotalAmountEnv);

                        ViewBag.AddAmount3 = AddAmount3;
                    }


                    ViewBag.GrandTotalMaterial = ViewBag.AddAmount2 + ViewBag.AddAmount3;



                    TotalProcessingCharge_Postage = TotalAmount + totalAmountSst;



                }
                var Result = new TblMaterials();
                //ViewBag.TotalAllValue = ViewBag.GrandTotalAll +ViewBag.GrandTotalMaterial;
                {
                    ViewBag.TotalAllValue = (GrandTotalAll + GrandTotalMaterial);
                }


                listBill2.Add(model2);



            }



            cn2.Close();


        }

        ReloadWorksheetList(Id);

        return View(viewPosting);

        //return new Rotativa.ViewAsPdf("ViewMPR2", viewPosting)
        //{
        //    // FileName = flightPlan.ListingItemDetailsModel.FlightDetails + ".pdf",
        //    PageMargins = new Rotativa.Options.Margins(12, 12, 12, 12),
        //    PageOrientation = Rotativa.Options.Orientation.Landscape,
        //    //PageWidth = 210,
        //    //PageHeight = 297
        //};
    }




    List<ProgDevWorksheet> viewWorksheet = new List<ProgDevWorksheet>();
    private int value;
    private int _bil;
    private double totalValuePaper;
    private double totalValueEnv;
    private SqlConnection cn;

    public double GetTotalAmount { get; set; }
    public double GetTotalValue { get; set; }
    public int GrandTotal { get; set; }
    public double totalValue { get; set; }

    public int GetTotalR { get; set; }
    public int GetTotalV { get; set; }
    public int GetGrandTotal { get; set; }
    public int TotalV { get; set; }
    public int TotalR { get; set; }
    public double TotalAmountSst { get; set; }
    public double Z { get; private set; }

    public double GrandTotalMaterial { get; set; }
    public double GetTotalAmountSevice { get; set; }
    public double GetTotalAmountPostage { get; set; }
    public double TotalAmountServices { get; private set; }
    public double TotalAmountPostages { get; private set; }
    public double GetTotalAmountMix { get; private set; }
    public double GetTotalAmountDC { get; private set; }
    public double GetTotalAmountCC { get; private set; }
    public double GetTotalAmountF { get; private set; }
    public dynamic GetTotalAmountS { get; private set; }
    public double GetTotalAmountImprest { get; private set; }
    public double GetTotalAmountO { get; private set; }
    public double GetTotalAmountO2 { get; private set; }
    public dynamic GetTotalAmountO3 { get; private set; }
    public double GetTotalAmountO4 { get; private set; }
    public double GetTotalAmountO9 { get; private set; }
    public double GetTotalAmountO6 { get; private set; }
    public double GetTotalAmountO7 { get; private set; }
    public double GetTotalAmountO8 { get; private set; }
    public double GetTotalAmount10 { get; private set; }

    public double GetPD_Total { get; private set; }
    public double GetIS1_Total { get; private set; }
    public double GetIS2_Total { get; private set; }
    public double GetIS3_Total { get; private set; }
    public double GetIS4_Total { get; private set; }
    public double GetBI_Total { get; private set; }
    public double GetM5_Total { get; private set; }
    public double GetHL_Total { get; private set; }
    public double GetPIS_Total { get; private set; }
    public double GetPIF_Total { get; private set; }
    public double GetSK_Total { get; private set; }
    public double GetPIT_Total { get; private set; }
    public double GetCDA_Total { get; private set; }
    public double GetMG_Total { get; private set; }
    public double GetNPC_Total { get; private set; }
    public double GetET_Total { get; private set; }
    public double GetEP_Total { get; private set; }
    public double GetP_Total { get; private set; }
    public double GetSMPG_Total { get; private set; }
    public dynamic GetPP_Total { get; private set; }
    public double GetSM5_Total { get; private set; }
    public double GetSMM_Total { get; private set; }
    public double GetSMH_Total { get; private set; }
    public double GetSMP_Total { get; private set; }
    public double GetSMPP_Total { get; private set; }
    public double GetSMP2_Total { get; private set; }
    public double GetSMPP2_Total { get; private set; }
    public double GetMMPPD_Total { get; private set; }
    public double GetMMPFI_Total { get; private set; }
    public double GetMMPSI_Total { get; private set; }
    public double GetMMPI_Total { get; private set; }
    public double GetDCPM_Total { get; private set; }
    public double GetMMPBI_Total { get; private set; }
    public double GetMMP5_Total { get; private set; }
    public double GetMMPS_Total { get; private set; }
    public double GetMMPH_Total { get; private set; }
    public double GetDCPH_Total { get; private set; }
    public double GetMMPT_Total { get; private set; }
    public double GetMMPF_Total { get; private set; }
    public double GetDCPT_Total { get; private set; }
    public double GetRMP_Total { get; private set; }
    public double GetMMPST_Total { get; private set; }
    public double GetMMPL_Total { get; private set; }
    public double GetMMPM_Total { get; private set; }
    public double GetMMPCD_Total { get; private set; }
    public double GetMMPET_Total { get; private set; }
    public double GetMMPEP_Total { get; private set; }
    public double GetMMPPR_Total { get; private set; }
    public double GetMMPPP_Total { get; private set; }
    public double GetDCPFC_Total { get; private set; }
    public double GetDCPSP_Total { get; private set; }
    public double GetDCPPD_Total { get; private set; }
    public double GetDCPFI_Total { get; private set; }
    public double GetDCPSI_Total { get; private set; }
    public double GetDCPBI_Total { get; private set; }
    public double GetDCPSL_Total { get; private set; }
    public double GetDCP5_Total { get; private set; }
    public double GetDCPF_Total { get; private set; }
    public double GetDCPS_Total { get; private set; }
    public double GetDCPL_Total { get; private set; }
    public double GetDCPCD_Total { get; private set; }
    public dynamic GetRMH_Total { get; private set; }
    public double GetDCPET_Total { get; private set; }
    public double GetDCPEP_Total { get; private set; }
    public double GetDCPPP_Total { get; private set; }
    public dynamic GetRMPT_Total { get; private set; }
    public double GetRMS_Total { get; private set; }
    public double GetRM5_Total { get; private set; }
    public double GetRML_Total { get; private set; }
    public double GetRMPP_Total { get; private set; }
    public dynamic GetDCPP_Total { get; private set; }
    public object GrandTotalV { get; private set; }
    public double GrandTotalAll { get; private set; }

    private void ReloadWorksheetList(string Id)
    {
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {

            int _bil = 1;
            cn.Open();
            command.CommandText = @"SELECT b.Id,b.Customer_Name,b.ProductName,b.Paper,b.up_1,b.up_2,b.JobClass, b.CreateUser, b.SalesExecutiveBy,
                                           b.JobRequest,b.Complexity,b.StartDevOn,b.CompleteDevOn,
                                           b.MainProgramId,b.ProgramId,b.ProgramDesc,b.TypeOfData,b.ReasonDev,
                                           b.ProgramType,b.IsDedup,b.Dedup,b.IsSplitting,b.Splitting,b.IsRestructuring,
                                           b.Restructuring,b.Charges,b.TotalCharges,b.ProgrammerBy,
                                           b.IsReviseTemplate,b.ReviseTemplate,b.IsReviseContent,b.ReviseContent,b.IsReviseDataStructure,b.ReviseDataStructure,
                                           b.Field_1until10,b.Field_11until20,b.Field_21until30, b.AmendmentCharges,
                                           a.Activities,a.Duration,a.Charges, a.ProgDevWorksheetId
                                           FROM[IflowSeed].[dbo].[ProgDevWorksheet] b, [IflowSeed].[dbo].[ITO_NewProgram] a
                                           WHERE a.ProgDevWorksheetId=b.Id AND b.Id=@Id ";
            command.Parameters.AddWithValue("@Id", Id);
            var reader = command.ExecuteReader();
            while (reader.Read())
            {
                ProgDevWorksheet model = new ProgDevWorksheet();
                {
                    model.Bil = _bil++;
                    if (reader.IsDBNull(0) == false)
                    {
                        model.Id = reader.GetGuid(0);
                    }
                    if (reader.IsDBNull(1) == false)
                    {
                        model.Customer_Name = reader.GetString(1);
                    }
                    if (reader.IsDBNull(2) == false)
                    {
                        model.ProductName = reader.GetString(2);
                    }
                    if (reader.IsDBNull(3) == false)
                    {
                        model.Paper = reader.GetString(3);
                    }
                    if (reader.IsDBNull(4) == false)
                    {
                        model.up_1 = reader.GetBoolean(4);
                    }
                    if (reader.IsDBNull(5) == false)
                    {
                        model.up_2 = reader.GetBoolean(5);
                    }
                    if (reader.IsDBNull(6) == false)
                    {
                        model.JobClass = reader.GetString(6);
                    }
                    if (reader.IsDBNull(7) == false)
                    {
                        model.CreateUser = reader.GetString(7);
                    }
                    if (reader.IsDBNull(8) == false)
                    {
                        model.SalesExecutiveBy = reader.GetString(8);
                    }
                    if (reader.IsDBNull(9) == false)
                    {
                        model.JobRequest = reader.GetDateTime(9);
                    }
                    if (reader.IsDBNull(10) == false)
                    {
                        model.Complexity = reader.GetString(10);
                    }
                    if (reader.IsDBNull(11) == false)
                    {
                        model.StartDevOn = reader.GetDateTime(11);
                    }
                    if (reader.IsDBNull(12) == false)
                    {
                        model.CompleteDevOn = reader.GetDateTime(12);
                    }
                    if (reader.IsDBNull(13) == false)
                    {
                        model.MainProgramId = reader.GetString(13);
                    }
                    if (reader.IsDBNull(14) == false)
                    {
                        model.ProgramId = reader.GetString(14);
                    }
                    if (reader.IsDBNull(15) == false)
                    {
                        model.ProgramDesc = reader.GetString(15);
                    }
                    if (reader.IsDBNull(16) == false)
                    {
                        model.TypeOfData = reader.GetString(16);
                    }
                    if (reader.IsDBNull(17) == false)
                    {
                        model.ReasonDev = reader.GetString(17);
                    }
                    if (reader.IsDBNull(18) == false)
                    {
                        model.ProgramType = reader.GetString(18);
                    }
                    if (reader.IsDBNull(19) == false)
                    {
                        model.IsDedup = reader.GetBoolean(19);
                    }
                    if (reader.IsDBNull(20) == false)
                    {
                        model.Dedup = reader.GetString(20);
                    }
                    if (reader.IsDBNull(21) == false)
                    {
                        model.IsSplitting = reader.GetBoolean(21);
                    }
                    if (reader.IsDBNull(22) == false)
                    {
                        model.Splitting = reader.GetString(22);
                    }
                    if (reader.IsDBNull(23) == false)
                    {
                        model.IsRestructuring = reader.GetBoolean(23);
                    }
                    if (reader.IsDBNull(24) == false)
                    {
                        model.Restructuring = reader.GetString(24);
                    }
                    if (reader.IsDBNull(25) == false)
                    {
                        model.Charges = reader.GetString(25);
                    }
                    if (reader.IsDBNull(26) == false)
                    {
                        model.TotalCharges = reader.GetString(26);
                    }
                    if (reader.IsDBNull(27) == false)
                    {
                        model.ProgrammerBy = reader.GetString(27);
                    }
                    if (reader.IsDBNull(28) == false)
                    {
                        model.IsReviseTemplate = reader.GetBoolean(28);
                    }
                    if (reader.IsDBNull(29) == false)
                    {
                        model.ReviseTemplate = reader.GetString(29);
                    }
                    if (reader.IsDBNull(30) == false)
                    {
                        model.IsReviseContent = reader.GetBoolean(30);
                    }
                    if (reader.IsDBNull(31) == false)
                    {
                        model.ReviseContent = reader.GetString(31);
                    }
                    if (reader.IsDBNull(32) == false)
                    {
                        model.IsReviseDataStructure = reader.GetBoolean(32);
                    }
                    if (reader.IsDBNull(33) == false)
                    {
                        model.ReviseDataStructure = reader.GetString(33);
                    }
                    if (reader.IsDBNull(34) == false)
                    {
                        model.Field_1until10 = reader.GetBoolean(34);
                    }
                    if (reader.IsDBNull(35) == false)
                    {
                        model.Field_11until20 = reader.GetBoolean(35);
                    }
                    if (reader.IsDBNull(36) == false)
                    {
                        model.Field_21until30 = reader.GetBoolean(36);
                    }
                    if (reader.IsDBNull(37) == false)
                    {
                        model.AmendmentCharges = reader.GetString(37);
                    }
                    if (reader.IsDBNull(38) == false)
                    {
                        model.Activities = reader.GetString(38);
                    }
                    if (reader.IsDBNull(39) == false)
                    {
                        model.Duration = reader.GetString(39);
                    }
                    if (reader.IsDBNull(40) == false)
                    {
                        model.Charges = reader.GetString(40);
                    }
                    if (reader.IsDBNull(41) == false)
                    {
                        model.ProgDevWorksheetId = reader.GetGuid(41);
                    }
                }

                viewWorksheet.Add(model);
            }
            cn.Close();
        }


    }

    public ActionResult DeleteRate(string Id)
    {
        if (!string.IsNullOrEmpty(Id))
        {
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            {
                cn.Open();
                SqlCommand command;
                command = new SqlCommand("DELETE [IflowSeed].[dbo].[PricingSchedule] WHERE Id=@Id", cn);
                command.Parameters.AddWithValue("@Id", Id);
                command.ExecuteNonQuery();
                cn.Close();
            }
        }
        return RedirectToAction("ManagePricingSchedule", "Finance");
    }


    public ActionResult CloseJob(string Id, string CreatedOn, string CompanyName, string PartneBrand, string EndDate, string StartDate, JobInstruction get)
    {
        ViewBag.IsDepart = @Session["Department"];
        ViewBag.IsRole = @Session["Role"];
        var IdentityName = @Session["Fullname"];
        ViewBag.IdentityName = @Session["Fullname"];


        if (!string.IsNullOrEmpty(Id))
        {
            using (SqlConnection cn2 = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
            {
                cn2.Open();
                SqlCommand command;
                command = new SqlCommand("UPDATE [IflowSeed].[dbo].[JobInstruction] SET Status=@Status WHERE Id = @Id", cn2);
                command.Parameters.AddWithValue("@Id", get.Id);
                command.Parameters.AddWithValue("@Status", "Close");
                command.ExecuteNonQuery();
                cn2.Close();
            }



        }
        return RedirectToAction("ManageFin", "Finance");
        //return RedirectToAction("CloseJob", "Finance");
    }

    List<JobAuditTrailDetail> completedlogtag = new List<JobAuditTrailDetail>();
    public ActionResult CompletedLogTag(string LogTagNo, string set)
    {
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        {
            cn.Open();

            if (set == "search")
            {
                int bil = 1;

                SqlCommand cmd = new SqlCommand("SELECT DISTINCT LogTagNo, JobSheetNo, Customer_Name, ProductName,Status FROM JobAuditTrailDetail WHERE Status='COMPLETED' AND (LogTagNo LIKE @LogTagNoSearch OR Customer_Name LIKE @LogTagNoSearch OR ProductName LIKE @LogTagNoSearch OR JobType LIKE @LogTagNoSearch OR JobClass LIKE @LogTagNoSearch)", cn);
                cmd.Parameters.AddWithValue("@LogTagNoSearch", "%" + LogTagNo + "%");
                SqlDataReader rm = cmd.ExecuteReader();

                if (rm.HasRows)
                {
                    while (rm.Read())
                    {
                        var model = new JobAuditTrailDetail();
                        {
                            model.Bil = bil;
                            if (!rm.IsDBNull(0))
                            {
                                model.LogTagNo = rm.GetString(0);

                            }

                            if (!rm.IsDBNull(1))
                            {
                                model.JobSheetNo = rm.GetString(1);

                            }

                            if (!rm.IsDBNull(2))
                            {
                                model.Customer_Name = rm.GetString(2);

                            }

                            if (!rm.IsDBNull(3))
                            {
                                model.ProductName = rm.GetString(3);
                            }

                            if (!rm.IsDBNull(4))
                            {
                                model.Status = rm.GetString(4);

                            }

                        }
                        bil++;
                        completedlogtag.Add(model);
                    }
                }

            }
            else
            {
                int bil = 1;

                SqlCommand cmd = new SqlCommand("SELECT DISTINCT LogTagNo, JobSheetNo, Customer_Name, ProductName,Status FROM JobAuditTrailDetail WHERE Status='COMPLETED'", cn);
                SqlDataReader rm = cmd.ExecuteReader();

                while (rm.Read())
                {
                    var model = new JobAuditTrailDetail();
                    {
                        model.Bil = bil;
                        model.LogTagNo = rm.GetString(0);
                        model.JobSheetNo = rm.GetString(1);
                        model.Customer_Name = rm.GetString(2);
                        model.ProductName = rm.GetString(3);
                        model.Status = rm.GetString(4);
                    }
                    bil++;
                    completedlogtag.Add(model);
                }
            }


            cn.Close();
        }

        return View(completedlogtag);
    }


    public ActionResult CreateMPR(string LogTagNo, string Customer_Name, string BatchId, string MaterialType, string MaterialDescription, string RatePerPiece, string TotalCharges, string MaterialTypeMMP, string MaterialDescriptionMMP, string RatePerPieceMMP, string TotalChargesMMP,
        string Posting1Desc, string Posting1Vol, string Posting1Rate, string Posting1Charges, string Posting2Desc, string Posting2Vol, string Posting2Rate, string Posting2Charges, string VolumeUsageMMP,
        string Insertion1Desc, string Insertion1Vol, string Insertion1Rate, string Insertion1Charges, string Insertion2Desc, string Insertion2Vol, string Insertion2Rate, string Insertion2Charges, string Insertion3Desc, string Insertion3Vol, string Insertion3Rate,
        string Insertion3Charges, string Insertion4Desc, string Insertion4Vol, string Insertion4Rate, string Insertion4Charges, string MixDesc, string MixVol, string MixRate, string MixCharges, string StatementDesc, string StatementVol, string StatementRate, string StatementCharges,
        string Brochure1Desc, string Brochure1Vol, string Brochure1Rate, string Brochure1Charges, string Brochure2Desc, string Brochure2Vol, string Brochure2Rate, string Brochure2Charges, string Brochure3Desc, string Brochure3Vol, string Brochure3Rate, string Brochure3Charges,
        string Brochure4Desc, string Brochure4Vol, string Brochure4Rate, string Brochure4Charges, string Brochure5Desc, string Brochure5Vol, string Brochure5Rate, string Brochure5Charges, string MB5KVol, string MB5KRate, string MB5KCharges, string InsertingVol, string InsertingRate,
        string InsertingCharges, string HandlingVol, string HandlingRate, string HandlingCharges, string SealingVol, string SealingRate, string SealingCharges, string TearingVol, string TearingRate, string TearingCharges, string FoldingVol, string FoldingRate, string FoldingCharges,
        string StickingVol, string StickingRate, string StickingCharges, string LabellingVol, string LabellingRate, string LabellingCharges, string SelfMailerVol, string SelfMailerRate, string SelfMailerCharges, string SelfMaterialVol, string SelfMaterialRate, string SelfMaterialCharges,
        string OvertimeVol, string OvertimeRate, string OvertimeCharges, string CourierVol, string CourierRate, string CourierCharges, string DeliveryVol, string DeliveryRate, string DeliveryCharges, string MatchingVol, string MatchingRate, string MatchingCharges,
        string IPDSVol, string IPDSRate, string IPDSCharges, string ProgrammingVol, string ProgrammingRate, string ProgrammingCharges, string ReturnMailVol, string ReturnMailRate, string ReturnMailCharges, string RetainerVol, string RetainerRate,
        string RetainerCharges, string RubberStampingVol, string RubberStampingRate, string RubberStampingCharges, string GlueingVol, string GlueingRate, string GlueingCharges, string CuttingVol, string CuttingRate, string CuttingCharges, string MergingVol, string MergingRate,
        string MergingCharges, string DiscountVol, string DiscountRate, string DiscountCharges, string Postage1Desc, string Postage1Vol, string Postage1Rate, string Postage1Charges, string Imprest1Desc, string Imprest1Vol, string Imprest1Rate, string Imprest1Charges, string Postage2Desc,
        string Postage2Vol, string Postage2Rate, string Postage2Charges, string Imprest2Desc, string Imprest2Vol, string Imprest2Rate, string Imprest2Charges, string Postage3Desc, string Postage3Vol, string Postage3Rate, string Postage3Charges, string Imprest3Desc, string Imprest3Vol,
        string Imprest3Rate, string Imprest3Charges, string Postage4Desc, string Postage4Vol, string Postage4Rate, string Postage4Charges, string Imprest4Desc, string Imprest4Vol, string Imprest4Rate, string Imprest4Charges, string Postage5Desc, string Postage5Vol, string Postage5Rate,
        string Postage5Charges, string Imprest5Desc, string Imprest5Vol, string Imprest5Rate, string Imprest5Charges, string Postage6Desc, string Postage6Vol, string Postage6Rate, string Postage6Charges, string Imprest6Desc, string Imprest6Vol, string Imprest6Rate, string Imprest6Charges,
        string Postage7Desc, string Postage7Vol, string Postage7Rate, string Postage7Charges, string Imprest7Desc, string Imprest7Vol, string Imprest7Rate, string Imprest7Charges, string Postage8Desc, string Postage8Vol, string Postage8Rate, string Postage8Charges, string Imprest8Desc,
        string Imprest8Vol, string Imprest8Rate, string Imprest8Charges, string RebateDesc, string RebateVol, string RebateRate, string RebateCharges, string FrankingDesc, string FrankingVol, string FrankingRate, string FrankingCharges, string Franking10Desc, string Franking10Vol,
        string Franking10Rate, string Franking10Charges, string AirmailDesc, string AirmailVol, string AirmailRate, string AirmailCharges, string SporeDesc, string SporeVol, string SporeRate, string SporeCharges, string TLetterDesc, string TLetterVol, string TLetterRate,
        string TLetterCharges, string NPCDesc, string NPCVol, string NPCRate, string NPCCharges, string Mix10Desc, string Mix10Vol, string Mix10Rate, string Mix10Charges, string RegisteredMailsDesc, string RegisteredMailsVol, string RegisteredMailsRate, string RegisteredMailsCharges,
        string ImprestRMDesc, string ImprestRMVol, string ImprestRMRate, string ImprestRMCharges, string RegisteredMails2Desc, string RegisteredMails2Vol, string RegisteredMails2Rate, string RegisteredMails2Charges,
        string ImprestRM2Desc, string ImprestRM2Vol, string ImprestRM2Rate, string ImprestRM2Charges, string JobSheetNo, string set, string LabellingRMVol, string LabellingRMRate, string LabellingRMCharges, string MMPRatePerPiece, string MMPTotalCharges, string MMPStockBalance, string MMPPosting1Desc, string MMPPosting1Vol, string MMPPosting1Rate, string MMPPosting1Charges, string MMPPosting2Desc, string MMPPosting2Vol, string MMPPosting2Rate, string MMPPosting2Charges,
        string MMPInsertion1Desc, string MMPInsertion1Vol, string MMPInsertion1Rate, string MMPInsertion1Charges, string MMPInsertion2Desc, string MMPInsertion2Vol, string MMPInsertion2Rate, string MMPInsertion2Charges, string MMPInsertion3Desc, string MMPInsertion3Vol, string MMPInsertion3Rate,
        string MMPInsertion3Charges, string MMPInsertion4Desc, string MMPInsertion4Vol, string MMPInsertion4Rate, string MMPInsertion4Charges, string MMPMixDesc, string MMPMixVol, string MMPMixRate, string MMPMixCharges, string MMPStatementDesc, string MMPStatementVol, string MMPStatementRate, string MMPStatementCharges,
        string MMPBrochure1Desc, string MMPBrochure1Vol, string MMPBrochure1Rate, string MMPBrochure1Charges, string MMPBrochure2Desc, string MMPBrochure2Vol, string MMPBrochure2Rate, string MMPBrochure2Charges, string MMPBrochure3Desc, string MMPBrochure3Vol, string MMPBrochure3Rate, string MMPBrochure3Charges,
        string MMPBrochure4Desc, string MMPBrochure4Vol, string MMPBrochure4Rate, string MMPBrochure4Charges, string MMPBrochure5Desc, string MMPBrochure5Vol, string MMPBrochure5Rate, string MMPBrochure5Charges, string MMPMB5KVol, string MMPMB5KRate, string MMPMB5KCharges, string MMPInsertingVol, string MMPInsertingRate,
        string MMPInsertingCharges, string MMPHandlingVol, string MMPHandlingRate, string MMPHandlingCharges, string MMPSealingVol, string MMPSealingRate, string MMPSealingCharges, string MMPTearingVol, string MMPTearingRate, string MMPTearingCharges, string MMPFoldingVol, string MMPFoldingRate, string MMPFoldingCharges,
        string MMPStickingVol, string MMPStickingRate, string MMPStickingCharges, string MMPLabellingVol, string MMPLabellingRate, string MMPLabellingCharges, string MMPSelfMailerVol, string MMPSelfMailerRate, string MMPSelfMailerCharges, string MMPSelfMaterialVol, string MMPSelfMaterialRate, string MMPSelfMaterialCharges,
        string MMPOvertimeVol, string MMPOvertimeRate, string MMPOvertimeCharges, string MMPCourierVol, string MMPCourierRate, string MMPCourierCharges, string MMPDeliveryVol, string MMPDeliveryRate, string MMPDeliveryCharges, string MMPMatchingVol, string MMPMatchingRate, string MMPMatchingCharges,
        string MMPIPDSVol, string MMPIPDSRate, string MMPIPDSCharges, string MMPProgrammingVol, string MMPProgrammingRate, string MMPProgrammingCharges, string MMPReturnMailVol, string MMPReturnMailRate, string MMPReturnMailCharges, string MMPRetainerVol, string MMPRetainerRate,
        string MMPRetainerCharges, string MMPRubberStampingVol, string MMPRubberStampingRate, string MMPRubberStampingCharges, string MMPGlueingVol, string MMPGlueingRate, string MMPGlueingCharges, string MMPCuttingVol, string MMPCuttingRate, string MMPCuttingCharges, string MMPMergingVol, string MMPMergingRate,
        string MMPMergingCharges, string MMPDiscountVol, string MMPDiscountRate, string MMPDiscountCharges, string MMPPostage1Desc, string MMPPostage1Vol, string MMPPostage1Rate, string MMPPostage1Charges, string MMPImprest1Desc, string MMPImprest1Vol, string MMPImprest1Rate, string MMPImprest1Charges, string MMPPostage2Desc,
        string MMPPostage2Vol, string MMPPostage2Rate, string MMPPostage2Charges, string MMPImprest2Desc, string MMPImprest2Vol, string MMPImprest2Rate, string MMPImprest2Charges, string MMPPostage3Desc, string MMPPostage3Vol, string MMPPostage3Rate, string MMPPostage3Charges, string MMPImprest3Desc, string MMPImprest3Vol,
        string MMPImprest3Rate, string MMPImprest3Charges, string MMPPostage4Desc, string MMPPostage4Vol, string MMPPostage4Rate, string MMPPostage4Charges, string MMPImprest4Desc, string MMPImprest4Vol, string MMPImprest4Rate, string MMPImprest4Charges, string MMPPostage5Desc, string MMPPostage5Vol, string MMPPostage5Rate,
        string MMPPostage5Charges, string MMPImprest5Desc, string MMPImprest5Vol, string MMPImprest5Rate, string MMPImprest5Charges, string MMPPostage6Desc, string MMPPostage6Vol, string MMPPostage6Rate, string MMPPostage6Charges, string MMPImprest6Desc, string MMPImprest6Vol, string MMPImprest6Rate, string MMPImprest6Charges,
        string MMPPostage7Desc, string MMPPostage7Vol, string MMPPostage7Rate, string MMPPostage7Charges, string MMPImprest7Desc, string MMPImprest7Vol, string MMPImprest7Rate, string MMPImprest7Charges, string MMPPostage8Desc, string MMPPostage8Vol, string MMPPostage8Rate, string MMPPostage8Charges, string MMPImprest8Desc,
        string MMPImprest8Vol, string MMPImprest8Rate, string MMPImprest8Charges, string MMPRebateDesc, string MMPRebateVol, string MMPRebateRate, string MMPRebateCharges, string MMPFrankingDesc, string MMPFrankingVol, string MMPFrankingRate, string MMPFrankingCharges, string MMPFranking10Desc, string MMPFranking10Vol,
        string MMPFranking10Rate, string MMPFranking10Charges, string MMPAirmailDesc, string MMPAirmailVol, string MMPAirmailRate, string MMPAirmailCharges, string MMPSporeDesc, string MMPSporeVol, string MMPSporeRate, string MMPSporeCharges, string MMPTLetterDesc, string MMPTLetterVol, string MMPTLetterRate,
        string MMPTLetterCharges, string MMPNPCDesc, string MMPNPCVol, string MMPNPCRate, string MMPNPCCharges, string MMPMix10Desc, string MMPMix10Vol, string MMPMix10Rate, string MMPMix10Charges, string MMPRegisteredMailsDesc, string MMPRegisteredMailsVol, string MMPRegisteredMailsRate, string MMPRegisteredMailsCharges,
        string MMPImprestRMDesc, string MMPImprestRMVol, string MMPImprestRMRate, string MMPImprestRMCharges, string MMPRegisteredMails2Desc, string MMPRegisteredMails2Vol, string MMPRegisteredMails2Rate, string MMPRegisteredMails2Charges,
        string MMPImprestRM2Desc, string MMPImprestRM2Vol, string MMPImprestRM2Rate, string MMPImprestRM2Charges, string MMPJobSheetNo, string MMPset, string MMPLabellingRMVol, string MMPLabellingRMRate, string MMPLabellingRMCharges, string setMMP, string AdditionalMaterialMMP, string AdditionalServiceMMP, string CDVol, string CDRate, string CDCharges, string FormSubmit, string VolumeUsage,
        string DataSFTPVol, string DataSFTPCharges, string DataSFTPRate, string DataSFTPVolMMP, string DataSFTPChargesMMP, string DataSFTPRateMMP, string CDArchivingVol, string CDArchivingRate, string CDArchivingCharges, string MMPCDArchivingVol, string MMPCDArchivingRate, string MMPCDArchivingCharges, string ContactPerson, string ContactPersonMMP,string From)
    {
        //IMPORTANT NOTE!!!!!!!
        //
        // THE JOBSHEETNO IN THE BILLINGMPR TABLE USED IN MANY QUERIES IN THIS METHOD HAS THE VALUE OF THE LOGTAGNO OR THE BATCHID
        // THIS IS BECAUSE OF MY MISTAKE WHEN CREATING THE TABLE, WHEN I REALIZED IT, I AM KNEE-DEEP IN THE FUNCTION DEVELOPMENT SO HAD TO IMPROVISE
        // GOODLUCK!
        //
        //
        //
        //
        // HAVE YOU READ THE NOTE?!
        //
        //
        //
        //
        //
        //
        //
        // IF YOU DECIDED NOT TO READ IT AND STILL CONTINUE, DONT BLAME ME FOR THE CONFUSION...
        // FIRDAUS

        Debug.WriteLine("LogTagNo : " + LogTagNo);
        //Debug.WriteLine("Process Data");
        //Debug.WriteLine("Batch Id : " + BatchId);
        List<MaterialDescriptionMail> MatDescMail = new List<MaterialDescriptionMail>();
        List<MaterialDescriptionMailMMP> MatDescMailMMP = new List<MaterialDescriptionMailMMP>();

        ViewBag.From = From;

        if (!string.IsNullOrEmpty(BatchId))
        {
            ViewBag.CombineOrStandard = "Combine";
            ViewBag.BatchID= BatchId;
        }
        else
        {
            ViewBag.CombineOrStandard = "Standard";
        }

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        {
            cn.Open();

            //SqlCommand cmd0 = new SqlCommand("SELECT JobSheetNo FROM JobInstruction WHERE Id=@Id", cn);
            //cmd0.Parameters.AddWithValue("@Id", logtag);
            //SqlDataReader rm0 = cmd0.ExecuteReader();

            //while (rm0.Read())
            //{
            //    JobSheetNo = rm0.GetString(0);
            //}

            //rm0.Close();

            SqlCommand cmd = new SqlCommand("SELECT JobInstruction.JobSheetNo,JobInstruction.Customer_Name, JobInstruction.ProductName,JobInstruction.JobClass, JobAuditTrailDetail.LogTagNo,JobInstruction.ContactPerson FROM JobInstruction INNER JOIN JobAuditTrailDetail ON JobInstruction.JobSheetNo=JobAuditTrailDetail.JobSheetNo WHERE JobInstruction.JobSheetNo=@JobSheetNo", cn);
            cmd.Parameters.AddWithValue("@JobSheetNo", JobSheetNo);
            SqlDataReader rm = cmd.ExecuteReader();

            while (rm.Read())
            {
                ViewBag.JobSheetNo = rm.GetString(0);
                ViewBag.Customer_Name = rm.GetString(1);
                Customer_Name = rm.GetString(1);
                ViewBag.ProductName = rm.GetString(2);
                ViewBag.JobClass = rm.GetString(3);
                if (LogTagNo == null)
                {
                    ViewBag.LogTagNo = rm.GetString(4);
                    LogTagNo = rm.GetString(4);
                }
                else
                {
                    ViewBag.LogTagNo = LogTagNo;
                }
                ViewBag.MMPJobSheetNo = rm.GetString(0);
                ViewBag.MMPCustomer_Name = rm.GetString(1);
                ViewBag.MMPProductName = rm.GetString(2);
                ViewBag.MMPJobClass = rm.GetString(3);
                ViewBag.MMPLogTagNo = rm.GetString(4);
                if(!rm.IsDBNull(5))
                {
                    ViewBag.ContactPerson = rm.GetString(5);
                }

            }

            rm.Close();


            List<string> MaterialTypeList = new List<string>();
            SqlCommand cmdMaterial = new SqlCommand("SELECT DISTINCT MaterialType From MaterialCharges WHERE MaterialType='Paper' OR MaterialType='Envelope'", cn);
            SqlDataReader rmMaterial = cmdMaterial.ExecuteReader();

            while (rmMaterial.Read())
            {
                MaterialTypeList.Add(rmMaterial.GetString(0));
            }

            ViewBag.MaterialType = MaterialTypeList;

            if (string.IsNullOrEmpty(BatchId))
            {
                SqlCommand cmdCheckRow = new SqlCommand("SELECT Id FROM BillingMPR Where JobSheetNo=@JobSheetNoCheck", cn);
                cmdCheckRow.Parameters.AddWithValue("@JobsheetNoCheck", LogTagNo);
                SqlDataReader rmCheck = cmdCheckRow.ExecuteReader();

                if (rmCheck.HasRows)
                {
                    ViewBag.ButtonSwitch = "Update";
                    Debug.WriteLine("set value : UPDATE");

                }
                else
                {
                    ViewBag.ButtonSwitch = "Submit";
                    Debug.WriteLine("set value : SUBMIT");

                }

                rmCheck.Close();

            }
            else
            {
                Debug.WriteLine("Batch Id Check :" + BatchId);
                SqlCommand cmdCheckRow2 = new SqlCommand("SELECT Id FROM BillingMPR Where JobSheetNo=@JobSheetNoCheck2", cn);
                cmdCheckRow2.Parameters.AddWithValue("@JobsheetNoCheck2", BatchId);
                SqlDataReader rmCheck2 = cmdCheckRow2.ExecuteReader();

                if (rmCheck2.HasRows)
                {
                    ViewBag.ButtonSwitch = "Update";
                    Debug.WriteLine("set value Batch : UPDATE");

                }
                else
                {
                    ViewBag.ButtonSwitch = "Submit";
                    Debug.WriteLine("set value Batch : SUBMIT");

                }

                rmCheck2.Close();


                //SqlCommand cmdCheckRowMaterial = new SqlCommand("SELECT Id FROM MaterialDescriptionMasterMail Where LogTagNo=@JobSheetNoCheckMaterial", cn);
                //cmdCheckRowMaterial.Parameters.AddWithValue("@JobsheetNoCheckMaterial", LogTagNo);
                //SqlDataReader rmCheckMaterial = cmdCheckRowMaterial.ExecuteReader();

                //if (rmCheckMaterial.HasRows)
                //{
                //    ViewBag.ButtonSwitchMaterial = "Update";
                //    Debug.WriteLine("set value : UPDATE");

                //}
                //else
                //{
                //    ViewBag.ButtonSwitchMaterial = "Submit";
                //    Debug.WriteLine("set value : SUBMIT");

                //}

                //rmCheckMaterial.Close();

                //ViewBag.ButtonSwitch = "Submit";
            }



            SqlCommand cmdCheckRowMMP = new SqlCommand("SELECT Id FROM BillingMPRMMP Where JobSheetNo=@JobSheetNoCheckMMP", cn);
            cmdCheckRowMMP.Parameters.AddWithValue("@JobsheetNoCheckMMP", LogTagNo);
            SqlDataReader rmCheckMMP = cmdCheckRowMMP.ExecuteReader();

            if (rmCheckMMP.HasRows)
            {
                ViewBag.MMPButtonSwitch = "Update";
                Debug.WriteLine("setMMP value : UPDATE");

                while (rmCheckMMP.Read())
                {
                    ViewBag.AdditionalMMP = rmCheckMMP.GetString(0);
                }

            }
            else
            {
                Debug.WriteLine("setMMP value : SUBMIT");
                ViewBag.MMPButtonSwitch = "Submit";
            }

            rmCheckMMP.Close();


            string BatchStatus = "";

            if (!string.IsNullOrEmpty(BatchId))
            {
                SqlCommand checkBatch = new SqlCommand("SELECT * FROM BillingMPR WHERE JobSheetNo=@BatchIdCheck", cn);
                checkBatch.Parameters.AddWithValue("@BatchIdCheck", BatchId);
                SqlDataReader rmCheckBatch = checkBatch.ExecuteReader();

                if (rmCheckBatch.HasRows)
                {
                    BatchStatus = "Update";
                }
                else
                {
                    BatchStatus = "Submit";
                }

                Debug.WriteLine("Batch Status : " + BatchStatus);
            }


            if (string.IsNullOrEmpty(BatchId))
            {
                int bilmat = 1;
                SqlCommand MaterialView = new SqlCommand("SELECT Id, MaterialType, Material_Description, Volume_Usage, Rate_Per_Piece, Total_Charges,Stock_Balance FROM MaterialDescriptionMail WHERE LogtagNo=@LogTagMatView1 AND MaterialType IS NOT NULL", cn);
                MaterialView.Parameters.AddWithValue("@LogTagMatView1", LogTagNo);
                SqlDataReader rmMatView = MaterialView.ExecuteReader();

                while (rmMatView.Read())
                {
                    MaterialDescriptionMail model = new MaterialDescriptionMail();
                    {
                        model.Bil = bilmat++;

                        if (rmMatView.IsDBNull(0) == false)
                        {
                            model.Id = rmMatView.GetGuid(0);
                        }

                        if (rmMatView.IsDBNull(1) == false)
                        {
                            model.MaterialType = rmMatView.GetString(1);

                        }
                        if (rmMatView.IsDBNull(2) == false)
                        {
                            model.MaterialDescription = rmMatView.GetString(2);

                        }
                        if (rmMatView.IsDBNull(3) == false)
                        {
                            model.VolumeUsage = rmMatView.GetString(3);

                        }
                        if (rmMatView.IsDBNull(4) == false)
                        {
                            model.RatePerPiece = rmMatView.GetString(4);

                        }
                        if (rmMatView.IsDBNull(5) == false)
                        {
                            model.TotalCharges = rmMatView.GetString(5);
                        }
                        if (rmMatView.IsDBNull(6) == false)
                        {
                            model.StockBalance = rmMatView.GetString(6);

                        }

                    }
                    MatDescMail.Add(model);
                }

                ViewBag.MatDescMail = MatDescMail;


                int bilmatMMP = 1;
                SqlCommand MaterialViewMMP = new SqlCommand("SELECT Id, MaterialTypeMMP, Material_DescriptionMMP, Volume_UsageMMP, Rate_Per_PieceMMP, Total_ChargesMMP,Stock_BalanceMMP FROM MaterialDescriptionMail WHERE LogtagNo=@LogTagMatView1 AND MaterialTypeMMP IS NOT NULL", cn);
                MaterialViewMMP.Parameters.AddWithValue("@LogTagMatView1", LogTagNo);
                SqlDataReader rmMatViewMMP = MaterialViewMMP.ExecuteReader();

                while (rmMatViewMMP.Read())
                {
                    MaterialDescriptionMailMMP model = new MaterialDescriptionMailMMP();
                    {
                        model.Bil = bilmatMMP++;

                        if (rmMatViewMMP.IsDBNull(0) == false)
                        {
                            model.Id = rmMatViewMMP.GetGuid(0);
                        }

                        //if (rmMatViewMMP.IsDBNull(1) == false)
                        //{
                        //    model.LogTagNo = rmMatViewMMP.GetString(1);

                        //}
                        if (rmMatViewMMP.IsDBNull(1) == false)
                        {
                            model.MaterialType = rmMatViewMMP.GetString(1);

                        }
                        if (rmMatViewMMP.IsDBNull(2) == false)
                        {
                            model.MaterialDescription = rmMatViewMMP.GetString(2);

                        }
                        if (rmMatViewMMP.IsDBNull(3) == false)
                        {
                            model.VolumeUsage = rmMatViewMMP.GetString(3);

                        }
                        if (rmMatViewMMP.IsDBNull(4) == false)
                        {
                            model.RatePerPiece = rmMatViewMMP.GetString(4);

                        }
                        if (rmMatViewMMP.IsDBNull(5) == false)
                        {
                            model.TotalCharges = rmMatViewMMP.GetString(5);
                        }
                        if (rmMatViewMMP.IsDBNull(6) == false)
                        {
                            model.StockBalance = rmMatViewMMP.GetString(6);

                        }

                    }
                    MatDescMailMMP.Add(model);
                }

                ViewBag.MatDescMailMMP = MatDescMailMMP;
            }
            else
            {
                int bilmat = 1;
                SqlCommand MaterialView = new SqlCommand("SELECT Id, MaterialType, Material_Description, Volume_Usage, Rate_Per_Piece, Total_Charges,Stock_Balance FROM MaterialDescriptionMail WHERE LogtagNo=@LogTagMatView WHERE MaterialType IS NOT NULL", cn);
                MaterialView.Parameters.AddWithValue("@LogTagMatView", BatchId);
                SqlDataReader rmMatView = MaterialView.ExecuteReader();

                Debug.WriteLine("Batch ID : "+BatchId);

                while (rmMatView.Read())
                {
                    MaterialDescriptionMail model = new MaterialDescriptionMail();
                    {
                        model.Bil = bilmat++;

                        if (rmMatView.IsDBNull(0) == false)
                        {
                            model.Id = rmMatView.GetGuid(0);
                        }

                        //if (rmMatView.IsDBNull(1) == false)
                        //{
                        //    model.LogTagNo = rmMatView.GetString(1);

                        //}

                        if (rmMatView.IsDBNull(1) == false)
                        {
                            model.MaterialType = rmMatView.GetString(1);

                        }
                        if (rmMatView.IsDBNull(2) == false)
                        {
                            model.MaterialDescription = rmMatView.GetString(2);

                        }
                        if (rmMatView.IsDBNull(3) == false)
                        {
                            model.VolumeUsage = rmMatView.GetString(3);

                        }
                        if (rmMatView.IsDBNull(4) == false)
                        {
                            model.RatePerPiece = rmMatView.GetString(4);

                        }
                        if (rmMatView.IsDBNull(5) == false)
                        {
                            model.TotalCharges = rmMatView.GetString(5);
                        }
                        if (rmMatView.IsDBNull(6) == false)
                        {
                            model.StockBalance = rmMatView.GetString(6);

                        }

                    }
                    MatDescMail.Add(model);
                }

                ViewBag.MatDescMail = MatDescMail;
                ViewBag.MatDescMailMMP = MatDescMailMMP;
            }


            Debug.WriteLine("Form Submit Value : " + FormSubmit);

            if (FormSubmit == "SubmitMaterial")
            {
                //Debug.WriteLine("Masuk Submit Material");
                Guid IdMat = Guid.NewGuid();
                DateTime CreatedOnMat = DateTime.Now;

                if (!string.IsNullOrEmpty(BatchId))
                {
                    Debug.WriteLine("ada batch id");
                    Debug.WriteLine("Batch Status : " + BatchStatus);

                    if (BatchStatus == "Submit")
                    {
                        Debug.WriteLine("Batch Submit Material");
                        SqlCommand MaterialInsert = new SqlCommand("INSERT INTO MaterialDescriptionMail (Id,CreatedOn,LogtagNo,MaterialType,Material_Description,Volume_Usage,Rate_Per_Piece,Total_Charges,ContactPerson) VALUES(@IdMat, @CreatedOnMat, @LogTagNoMat,@MatType,@MatDesc,@MatVol,@MatRate,@TotalChargesMat,@ContactPerson)", cn);
                        MaterialInsert.Parameters.AddWithValue("@IdMat", IdMat);
                        MaterialInsert.Parameters.AddWithValue("@CreatedOnMat", CreatedOnMat);
                        MaterialInsert.Parameters.AddWithValue("@LogTagNoMat", BatchId);
                        if (!string.IsNullOrEmpty(MaterialType))
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatType", MaterialType);

                        }
                        else
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatType", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(MaterialDescription))
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatDesc", MaterialDescription);

                        }
                        else
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatDesc", DBNull.Value);

                        }


                        if (!string.IsNullOrEmpty(VolumeUsage))
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatVol", VolumeUsage);

                        }
                        else
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatVol", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(RatePerPiece))
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatRate", RatePerPiece);

                        }
                        else
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatRate", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(TotalCharges))
                        {
                            MaterialInsert.Parameters.AddWithValue("@TotalChargesMat", TotalCharges);

                        }
                        else
                        {
                            MaterialInsert.Parameters.AddWithValue("@TotalChargesMat", DBNull.Value);

                        }

                        if(!string.IsNullOrEmpty(ContactPerson))
                        {
                            MaterialInsert.Parameters.AddWithValue("@ContactPerson", ContactPerson);
                        }
                        else
                        {
                            MaterialInsert.Parameters.AddWithValue("@ContactPerson", DBNull.Value);

                        }

                        MaterialInsert.ExecuteNonQuery();
                    }
                    else if (BatchStatus == "Update")
                    {
                        Debug.WriteLine("Batch Update Material");

                        //SqlCommand BatchCheck = new SqlCommand("SELECT Id FROM MaterialDescriptionMail WHERE LogTagNo=@LogTagNoBatchCheck", cn);
                        //BatchCheck.Parameters.AddWithValue("@LogTagNoBatchCheck", BatchId);
                        //SqlDataReader rmBatchCheck = BatchCheck.ExecuteReader();

                        //if (rmBatchCheck.HasRows)
                        //{
                        //    SqlCommand BatchUpdate = new SqlCommand("UPDATE MaterialDescriptionMail SET MaterialType=@MatTypeUpdate, Material_Description=@MatDescUpdate, Volume_Usage=@VolUsageUpdate, Rate_Per_Piece=@MatRateUpdate, Total_Charges=@TotalChargesUpdate WHERE LogTagNo=@BatchIdUpdate", cn);
                        //    BatchUpdate.Parameters.AddWithValue("@BatchIdUpdate", BatchId);
                        //    BatchUpdate.Parameters.AddWithValue("@MatTypeUpdate", MaterialType);
                        //    BatchUpdate.Parameters.AddWithValue("@MatDescUpdate", MaterialDescription);
                        //    BatchUpdate.Parameters.AddWithValue("@VolUsageUpdate", VolumeUsage);
                        //    BatchUpdate.Parameters.AddWithValue("@MatRateUpdate", RatePerPiece);
                        //    BatchUpdate.Parameters.AddWithValue("@TotalChargesUpdate", TotalCharges);

                        //    BatchUpdate.ExecuteNonQuery();
                        //}
                        //else
                        //{
                        //    SqlCommand MaterialInsert = new SqlCommand("INSERT INTO MaterialDescriptionMail (Id,CreatedOn,LogTagNo,MaterialType,Material_Description,Volume_Usage,Rate_Per_Piece,Total_Charges) VALUES(@IdMat, @CreatedOnMat, @LogTagNoMat,@MatType,@MatDesc,@MatVol,@MatRate,@TotalChargesMat)", cn);
                        //    MaterialInsert.Parameters.AddWithValue("@IdMat", IdMat);
                        //    MaterialInsert.Parameters.AddWithValue("@CreatedOnMat", CreatedOnMat);
                        //    MaterialInsert.Parameters.AddWithValue("@LogTagNoMat", BatchId);
                        //    MaterialInsert.Parameters.AddWithValue("@MatType", MaterialType);
                        //    MaterialInsert.Parameters.AddWithValue("@MatDesc", MaterialDescription);
                        //    MaterialInsert.Parameters.AddWithValue("@MatVol", VolumeUsage);
                        //    MaterialInsert.Parameters.AddWithValue("@MatRate", RatePerPiece);
                        //    MaterialInsert.Parameters.AddWithValue("@TotalChargesMat", TotalCharges);

                        //    MaterialInsert.ExecuteNonQuery();
                        //}

                        SqlCommand MaterialInsert = new SqlCommand("INSERT INTO MaterialDescriptionMail (Id,CreatedOn,LogtagNo,MaterialType,Material_Description,Volume_Usage,Rate_Per_Piece,Total_Charges,ContactPerson) VALUES(@IdMat, @CreatedOnMat, @LogTagNoMat,@MatType,@MatDesc,@MatVol,@MatRate,@TotalChargesMat,@ContactPerson)", cn);
                        MaterialInsert.Parameters.AddWithValue("@IdMat", IdMat);
                        MaterialInsert.Parameters.AddWithValue("@CreatedOnMat", CreatedOnMat);
                        MaterialInsert.Parameters.AddWithValue("@LogTagNoMat", BatchId);
                        if (!string.IsNullOrEmpty(MaterialType))
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatType", MaterialType);

                        }
                        else
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatType", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(MaterialDescription))
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatDesc", MaterialDescription);

                        }
                        else
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatDesc", DBNull.Value);

                        }


                        if (!string.IsNullOrEmpty(VolumeUsage))
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatVol", VolumeUsage);

                        }
                        else
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatVol", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(RatePerPiece))
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatRate", RatePerPiece);

                        }
                        else
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatRate", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(TotalCharges))
                        {
                            MaterialInsert.Parameters.AddWithValue("@TotalChargesMat", TotalCharges);

                        }
                        else
                        {
                            MaterialInsert.Parameters.AddWithValue("@TotalChargesMat", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(ContactPerson))
                        {
                            MaterialInsert.Parameters.AddWithValue("@ContactPerson", ContactPerson);
                        }
                        else
                        {
                            MaterialInsert.Parameters.AddWithValue("@ContactPerson", DBNull.Value);

                        }

                        MaterialInsert.ExecuteNonQuery();


                    }
                }
                else
                {
                    Debug.WriteLine("xde batch id");

                    if (AdditionalMaterialMMP != null)
                    {
                        //SqlCommand UpdateMMPMaterial = new SqlCommand("UPDATE MaterialDescriptionMail SET MaterialTypeMMP=@MatTypeMMP,Material_DescriptionMMP=@MatDescMMP,Volume_UsageMMP=@MatVolMMP,Rate_Per_PieceMMP=@MatRateMMP,Total_ChargesMMP=@TotalChargesMatMMP WHERE LogTagNo=@IdUpdateMMP", cn);
                        //UpdateMMPMaterial.Parameters.AddWithValue("@IdUpdateMMP", LogTagNo);
                        //UpdateMMPMaterial.Parameters.AddWithValue("@MatTypeMMP", MaterialTypeMMP);
                        //UpdateMMPMaterial.Parameters.AddWithValue("@MatDescMMP", MaterialDescriptionMMP);
                        //UpdateMMPMaterial.Parameters.AddWithValue("@MatVolMMP", VolumeUsageMMP);
                        //UpdateMMPMaterial.Parameters.AddWithValue("@MatRateMMP", RatePerPieceMMP);
                        //UpdateMMPMaterial.Parameters.AddWithValue("@TotalChargesMatMMP", TotalChargesMMP);

                        //UpdateMMPMaterial.ExecuteNonQuery();

                        SqlCommand UpdateMMPMaterial = new SqlCommand("INSERT INTO MaterialDescriptionMail (Id,CreatedOn,LogtagNo,MaterialTypeMMP,Material_DescriptionMMP,Volume_UsageMMP,Rate_Per_PieceMMP,Total_ChargesMMP,ContactPerson) VALUES(@IdMat2, @CreatedOnMat2, @LogTagNoMat2,@MatTypeMMP,@MatDescMMP,@MatVolMMP,@MatRateMMP,@TotalChargesMatMMP,@ContactPersonMMP)", cn);
                        //SqlCommand UpdateMMPMaterial = new SqlCommand("UPDATE MaterialDescriptionMail SET MaterialTypeMMP=@MatTypeMMP,Material_DescriptionMMP=@MatDescMMP,Volume_UsageMMP=@MatVolMMP,Rate_Per_PieceMMP=@MatRateMMP,Total_ChargesMMP=@TotalChargesMatMMP WHERE Id=@IdUpdateMMP", cn);
                        UpdateMMPMaterial.Parameters.AddWithValue("@IdMat2", IdMat);
                        UpdateMMPMaterial.Parameters.AddWithValue("@CreatedOnMat2", CreatedOnMat);
                        UpdateMMPMaterial.Parameters.AddWithValue("@LogTagNoMat2", LogTagNo);
                        if (!string.IsNullOrEmpty(MaterialTypeMMP))
                        {
                            UpdateMMPMaterial.Parameters.AddWithValue("@MatTypeMMP", MaterialTypeMMP);

                        }
                        else
                        {
                            UpdateMMPMaterial.Parameters.AddWithValue("@MatTypeMMP", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(MaterialDescriptionMMP))
                        {
                            UpdateMMPMaterial.Parameters.AddWithValue("@MatDescMMP", MaterialDescriptionMMP);

                        }
                        else
                        {
                            UpdateMMPMaterial.Parameters.AddWithValue("@MatDescMMP", DBNull.Value);

                        }


                        if (!string.IsNullOrEmpty(VolumeUsageMMP))
                        {
                            UpdateMMPMaterial.Parameters.AddWithValue("@MatVolMMP", VolumeUsageMMP);

                        }
                        else
                        {
                            UpdateMMPMaterial.Parameters.AddWithValue("@MatVolMMP", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(RatePerPieceMMP))
                        {
                            UpdateMMPMaterial.Parameters.AddWithValue("@MatRateMMP", RatePerPieceMMP);

                        }
                        else
                        {
                            UpdateMMPMaterial.Parameters.AddWithValue("@MatRateMMP", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(TotalChargesMMP))
                        {
                            UpdateMMPMaterial.Parameters.AddWithValue("@TotalChargesMatMMP", TotalChargesMMP);

                        }
                        else
                        {
                            UpdateMMPMaterial.Parameters.AddWithValue("@TotalChargesMatMMP", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(ContactPersonMMP))
                        {
                            UpdateMMPMaterial.Parameters.AddWithValue("@ContactPersonMMP", ContactPersonMMP);
                        }
                        else
                        {
                            UpdateMMPMaterial.Parameters.AddWithValue("@ContactPersonMMP", DBNull.Value);

                        }

                        UpdateMMPMaterial.ExecuteNonQuery();
                    }
                    else
                    {

                        Debug.WriteLine("Masuk else");

                        SqlCommand MaterialInsert = new SqlCommand("INSERT INTO MaterialDescriptionMail (Id,CreatedOn,LogtagNo,MaterialType,Material_Description,Volume_Usage,Rate_Per_Piece,Total_Charges,ContactPerson) VALUES(@IdMat, @CreatedOnMat, @LogTagNoMat,@MatType,@MatDesc,@MatVol,@MatRate,@TotalChargesMat,@ContactPerson)", cn);
                        MaterialInsert.Parameters.AddWithValue("@IdMat", IdMat);
                        MaterialInsert.Parameters.AddWithValue("@CreatedOnMat", CreatedOnMat);
                        MaterialInsert.Parameters.AddWithValue("@LogTagNoMat", LogTagNo);
                        if (!string.IsNullOrEmpty(MaterialType))
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatType", MaterialType);

                        }
                        else
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatType", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(MaterialDescription))
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatDesc", MaterialDescription);

                        }
                        else
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatDesc", DBNull.Value);

                        }


                        if (!string.IsNullOrEmpty(VolumeUsage))
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatVol", VolumeUsage);

                        }
                        else
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatVol", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(RatePerPiece))
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatRate", RatePerPiece);

                        }
                        else
                        {
                            MaterialInsert.Parameters.AddWithValue("@MatRate", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(TotalCharges))
                        {
                            MaterialInsert.Parameters.AddWithValue("@TotalChargesMat", TotalCharges);

                        }
                        else
                        {
                            MaterialInsert.Parameters.AddWithValue("@TotalChargesMat", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(ContactPerson))
                        {
                            MaterialInsert.Parameters.AddWithValue("@ContactPerson", ContactPerson);
                        }
                        else
                        {
                            MaterialInsert.Parameters.AddWithValue("@ContactPerson", DBNull.Value);

                        }


                        MaterialInsert.ExecuteNonQuery();
                        if (AdditionalMaterialMMP != null)
                        {
                            Guid IdMat2 = Guid.NewGuid();

                            SqlCommand UpdateMMPMaterial = new SqlCommand("INSERT INTO MaterialDescriptionMail (Id,CreatedOn,LogtagNo,MaterialTypeMMP,Material_DescriptionMMP,Volume_UsageMMP,Rate_Per_PieceMMP,Total_ChargesMMP,ContactPerson) VALUES(@IdMat2, @CreatedOnMat2, @LogTagNoMat2,@MatTypeMMP,@MatDescMMP,@MatVolMMP,@MatRateMMP,@TotalChargesMatMMP,@ContactPersonMMP)", cn);
                            //SqlCommand UpdateMMPMaterial = new SqlCommand("UPDATE MaterialDescriptionMail SET MaterialTypeMMP=@MatTypeMMP,Material_DescriptionMMP=@MatDescMMP,Volume_UsageMMP=@MatVolMMP,Rate_Per_PieceMMP=@MatRateMMP,Total_ChargesMMP=@TotalChargesMatMMP WHERE Id=@IdUpdateMMP", cn);
                            UpdateMMPMaterial.Parameters.AddWithValue("@IdMat2", IdMat2);
                            UpdateMMPMaterial.Parameters.AddWithValue("@CreatedOnMat2", CreatedOnMat);
                            UpdateMMPMaterial.Parameters.AddWithValue("@LogTagNoMat2", LogTagNo);
                            UpdateMMPMaterial.Parameters.AddWithValue("@MatTypeMMP", MaterialTypeMMP);
                            UpdateMMPMaterial.Parameters.AddWithValue("@MatDescMMP", MaterialDescriptionMMP);
                            UpdateMMPMaterial.Parameters.AddWithValue("@MatVolMMP", VolumeUsageMMP);
                            UpdateMMPMaterial.Parameters.AddWithValue("@MatRateMMP", RatePerPieceMMP);
                            UpdateMMPMaterial.Parameters.AddWithValue("@TotalChargesMatMMP", TotalChargesMMP);
                            if (!string.IsNullOrEmpty(ContactPersonMMP))
                            {
                                UpdateMMPMaterial.Parameters.AddWithValue("@ContactPersonMMP", ContactPersonMMP);
                            }
                            else
                            {
                                UpdateMMPMaterial.Parameters.AddWithValue("@ContactPersonMMP", DBNull.Value);

                            }


                            UpdateMMPMaterial.ExecuteNonQuery();
                        }
                    }


                }



                //return View(MatDescMail);
                return View();


            }
            else if (FormSubmit == "SubmitAll")
            {
                Debug.WriteLine("Masuk Submit All");


                if (set == "Submit")
                {
                    DateTime CreatedOn = DateTime.Now;
                    Debug.WriteLine("In Submit");
                    SqlCommand cmdInsert = new SqlCommand("INSERT INTO BillingMPR (Id,JobSheetNo,MaterialType,MaterialDescription,RatePerPiece,TotalCharges,Posting1Desc,Posting1Vol,Posting1Rate,Posting1Charges,Posting2Desc,Posting2Vol,Posting2Rate,Posting2Charges,Insertion1Desc,Insertion1Vol," +
                        "Insertion1Rate,Insertion1Charges, Insertion2Desc,Insertion2Vol,Insertion2Rate,Insertion2Charges, Insertion3Desc,Insertion3Vol,Insertion3Rate,Insertion3Charges, Insertion4Desc,Insertion4Vol,Insertion4Rate," +
                        "Insertion4Charges,MixDesc,MixVol,MixRate,MixCharges,StatementDesc,StatementVol,StatementRate,StatementCharges,Brochure1Desc,Brochure1Vol,Brochure1Rate,Brochure1Charges,Brochure2Desc,Brochure2Vol,Brochure2Rate,Brochure2Charges," +
                        "Brochure3Desc,Brochure3Vol,Brochure3Rate,Brochure3Charges,Brochure4Desc,Brochure4Vol,Brochure4Rate,Brochure4Charges,Brochure5Desc,Brochure5Vol,Brochure5Rate,Brochure5Charges,MB5KVol,MB5KRate,MB5KCharges,InsertingVol,InsertingRate," +
                        "InsertingCharges,HandlingVol,HandlingRate,HandlingCharges,SealingVol,SealingRate,SealingCharges,TearingVol,TearingRate,TearingCharges,FoldingVol,FoldingRate,FoldingCharges,StockingVol,StockingRate,StockingCharges,LabellingVol,LabellingRate," +
                        "LabellingCharges,SelfMailerVol,SelfMailerRate,SelfMailerCharges,SelfMaterialVol,SelfMaterialRate,SelfMaterialCharges,OvertimeVol,OvertimeRate,OvertimeCharges,CourierVol,CourierRate,CourierCharges,DeliveryVol,DeliveryRate,DeliveryCharges,MatchingVol," +
                        "MatchingRate,MatchingCharges,LabellingRMVol,LabellingRMRate,LabellingRMCharges,IPDSVol,IPDSRate,IPDSCharges,ProgrammingVol,ProgrammingRate,ProgrammingCharges,ReturnMailVol,ReturnMailRate,ReturnMailCharges,RetainerVol,RetainerRate,RetainerCharges,RubberStampingVol," +
                        "RubberStampingRate,RubberStampingCharges,GlueingVol,GlueingRate,GlueingCharges,CuttingVol,CuttingRate,CuttingCharges,MergingVol,MergingRate,MergingCharges,DiscountVol,DiscountRate,DiscountCharges,Postage1Desc,Postage1Vol,Postage1Rate,Postage1Charges,Postage2Desc, " +
                        "Postage2Vol, Postage2Rate, Postage2Charges, Postage3Desc, Postage3Vol, Postage3Rate, Postage3Charges, Postage4Desc, Postage4Vol, Postage4Rate, Postage4Charges, Postage5Desc, Postage5Vol, Postage5Rate, Postage5Charges, Postage6Desc, Postage6Vol, Postage6Rate, " +
                        "Postage6Charges, Postage7Desc, Postage7Vol, Postage7Rate, Postage7Charges, Postage8Desc, Postage8Vol, Postage8Rate, Postage8Charges,Imprest1Desc, Imprest1Vol, Imprest1Rate, Imprest1Charges, Imprest2Desc, Imprest2Vol, Imprest2Rate, Imprest2Charges, Imprest3Desc, " +
                        "Imprest3Vol, Imprest3Rate, Imprest3Charges, Imprest4Desc, Imprest4Vol, Imprest4Rate, Imprest4Charges, Imprest5Desc, Imprest5Vol, Imprest5Rate, Imprest5Charges, Imprest6Desc, Imprest6Vol, Imprest6Rate, Imprest6Charges, Imprest7Desc, Imprest7Vol, Imprest7Rate, " +
                        "Imprest7Charges, Imprest8Desc, Imprest8Vol, Imprest8Rate, Imprest8Charges,RebateDesc, RebateVol, RebateRate, RebateCharges, FrankingDesc, FrankingVol, FrankingRate, FrankingCharges, Franking10Desc, Franking10Vol, Franking10Rate, Franking10Charges, AirmailDesc, AirmailVol, " +
                        "AirmailRate, AirmailCharges, SporeDesc, SporeVol, SporeRate, SporeCharges, TLetterDesc, TLetterVol, TLetterRate, TLetterCharges, NPCDesc, NPCVol, NPCRate, NPCCharges, Mix10Desc, Mix10Vol, Mix10Rate, Mix10Charges,RegisteredMailsDesc, RegisteredMailsVol, RegisteredMailsRate, RegisteredMailsCharges," +
                        "RegisteredMails2Desc, RegisteredMails2Vol, RegisteredMails2Rate, RegisteredMails2Charges, ImprestRMDesc, ImprestRMVol, ImprestRMRate, ImprestRMCharges, ImprestRM2Desc, ImprestRM2Vol, ImprestRM2Rate, ImprestRM2Charges, CDVol, CDRate, CDCharges, CreatedOn, DataSFTPVol, DataSFTPRate,DataSFTPCharges,CDArchivingVol, CDArchivingRate, CDArchivingCharges ) VALUES(@Idx,@JobSheetNo,@MaterialType,@MaterialDescription,@RatePerPiece,@TotalCharges,@Posting1Desc,@Posting1Vol,@Posting1Rate," +
                        "@Posting1Charges,@Posting2Desc,@Posting2Vol,@Posting2Rate,@Posting2Charges,@Insertion1Desc,@Insertion1Vol,@Insertion1Rate,@Insertion1Charges,@Insertion2Desc,@Insertion2Vol,@Insertion2Rate,@Insertion2Charges,@Insertion3Desc,@Insertion3Vol,@Insertion3Rate," +
                        "@Insertion3Charges,@Insertion4Desc,@Insertion4Vol,@Insertion4Rate,@Insertion4Charges,@MixDesc,@MixVol,@MixRate,@MixCharges,@StatementDesc,@StatementVol,@StatementRate,@StatementCharges,@Brochure1Desc,@Brochure1Vol,@Brochure1Rate,@Brochure1Charges," +
                        "@Brochure2Desc,@Brochure2Vol,@Brochure2Rate,@Brochure2Charges,@Brochure3Desc,@Brochure3Vol,@Brochure3Rate,@Brochure3Charges,@Brochure4Desc,@Brochure4Vol,@Brochure4Rate,@Brochure4Charges,@Brochure5Desc,@Brochure5Vol,@Brochure5Rate,@Brochure5Charges,@MB5KVol," +
                        "@MB5KRate,@MB5KCharges,@InsertingVol,@InsertingRate,@InsertingCharges,@HandlingVol,@HandlingRate,@HandlingCharges,@SealingVol,@SealingRate,@SealingCharges,@TearingVol,@TearingRate,@TearingCharges,@FoldingVol,@FoldingRate,@FoldingCharges,@StockingVol,@StockingRate," +
                        "@StockingCharges,@LabellingVol,@LabellingRate,@LabellingCharges,@SelfMailerVol,@SelfMailerRate,@SelfMailerCharges,@SelfMaterialVol,@SelfMaterialRate,@SelfMaterialCharges,@OvertimeVol,@OvertimeRate,@OvertimeCharges,@CourierVol,@CourierRate,@CourierCharges,@DeliveryVol," +
                        "@DeliveryRate,@DeliveryCharges,@MatchingVol,@MatchingRate,@MatchingCharges,@LabellingRMVol,@LabellingRMRate,@LabellingRMCharges,@IPDSVol,@IPDSRate,@IPDSCharges,@ProgrammingVol,@ProgrammingRate,@ProgrammingCharges,@ReturnMailVol,@ReturnMailRate,@ReturnMailCharges,@RetainerVol," +
                        "@RetainerRate,@RetainerCharges,@RubberStampingVol,@RubberStampingRate,@RubberStampingCharges,@GlueingVol,@GlueingRate,@GlueingCharges,@CuttingVol,@CuttingRate,@CuttingCharges,@MergingVol,@MergingRate,@MergingCharges,@DiscountVol,@DiscountRate,@DiscountCharges,@Postage1Desc," +
                        "@Postage1Vol,@Postage1Rate,@Postage1Charges,@Postage2Desc, @Postage2Vol, @Postage2Rate, @Postage2Charges, @Postage3Desc, @Postage3Vol, @Postage3Rate, @Postage3Charges, @Postage4Desc, @Postage4Vol, @Postage4Rate, @Postage4Charges, @Postage5Desc, @Postage5Vol, @Postage5Rate, " +
                        "@Postage5Charges, @Postage6Desc, @Postage6Vol, @Postage6Rate, @Postage6Charges, @Postage7Desc, @Postage7Vol, @Postage7Rate, @Postage7Charges, @Postage8Desc, @Postage8Vol, @Postage8Rate, @Postage8Charges,@Imprest1Desc, @Imprest1Vol, @Imprest1Rate, @Imprest1Charges, @Imprest2Desc, " +
                        "@Imprest2Vol, @Imprest2Rate, @Imprest2Charges, @Imprest3Desc, @Imprest3Vol, @Imprest3Rate, @Imprest3Charges, @Imprest4Desc, @Imprest4Vol, @Imprest4Rate, @Imprest4Charges, @Imprest5Desc, @Imprest5Vol, @Imprest5Rate, @Imprest5Charges, @Imprest6Desc, @Imprest6Vol, @Imprest6Rate, @Imprest6Charges, " +
                        "@Imprest7Desc, @Imprest7Vol, @Imprest7Rate, @Imprest7Charges, @Imprest8Desc, @Imprest8Vol, @Imprest8Rate, @Imprest8Charges,@RebateDesc, @RebateVol, @RebateRate, @RebateCharges, @FrankingDesc, @FrankingVol, @FrankingRate, @FrankingCharges, @Franking10Desc, @Franking10Vol, @Franking10Rate, " +
                        "@Franking10Charges, @AirmailDesc, @AirmailVol, @AirmailRate, @AirmailCharges, @SporeDesc, @SporeVol, @SporeRate, @SporeCharges, @TLetterDesc, @TLetterVol, @TLetterRate, @TLetterCharges, @NPCDesc, @NPCVol, @NPCRate, @NPCCharges, @Mix10Desc, @Mix10Vol, @Mix10Rate, @Mix10Charges,@RegisteredMailsDesc, " +
                        "@RegisteredMailsVol, @RegisteredMailsRate, @RegisteredMailsCharges, @RegisteredMails2Desc, @RegisteredMails2Vol, @RegisteredMails2Rate, @RegisteredMails2Charges, @ImprestRMDesc, @ImprestRMVol, @ImprestRMRate, @ImprestRMCharges, @ImprestRM2Desc, @ImprestRM2Vol, @ImprestRM2Rate, @ImprestRM2Charges, @CDVol, @CDRate, @CDCharges,@CreatedOn1,@DataSFTPVol, @DataSFTPRate, @DataSFTPCharges, @CDArchivingVol, @CDArchivingRate, @CDArchivingCharges)", cn);


                    {
                        Guid idx = Guid.NewGuid();

                        cmdInsert.Parameters.AddWithValue("@Idx", idx);
                        cmdInsert.Parameters.AddWithValue("@CreatedOn1", CreatedOn);

                        if (!string.IsNullOrEmpty(BatchId))
                        {
                            if (!string.IsNullOrEmpty(JobSheetNo))
                            {
                                cmdInsert.Parameters.AddWithValue("@JobSheetNo", BatchId);
                            }
                            else
                            {
                                cmdInsert.Parameters.AddWithValue("@JobSheetNo", DBNull.Value);
                            }
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(JobSheetNo))
                            {
                                cmdInsert.Parameters.AddWithValue("@JobSheetNo", LogTagNo);
                            }
                            else
                            {
                                cmdInsert.Parameters.AddWithValue("@JobSheetNo", DBNull.Value);
                            }
                        }

                        if (!string.IsNullOrEmpty(CDArchivingVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@CDArchivingVol", CDArchivingVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@CDArchivingVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(CDArchivingRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@CDArchivingRate", CDArchivingRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@CDArchivingRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(CDArchivingCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@CDArchivingCharges", CDArchivingCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@CDArchivingCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MaterialType))
                        {
                            cmdInsert.Parameters.AddWithValue("@MaterialType", MaterialType);

                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@MaterialType", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(MaterialDescription))
                        {
                            cmdInsert.Parameters.AddWithValue("@MaterialDescription", MaterialDescription);

                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@MaterialDescription", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(RatePerPiece))
                        {
                            cmdInsert.Parameters.AddWithValue("@RatePerPiece", RatePerPiece);

                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@RatePerPiece", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(TotalCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@TotalCharges", TotalCharges);

                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@TotalCharges", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(Posting1Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Posting1Desc", Posting1Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Posting1Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Posting1Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Posting1Vol", Posting1Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Posting1Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Posting1Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Posting1Rate", Posting1Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Posting1Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Posting1Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Posting1Charges", Posting1Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Posting1Charges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Posting2Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Posting2Desc", Posting2Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Posting2Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Posting2Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Posting2Vol", Posting2Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Posting2Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Posting2Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Posting2Rate", Posting2Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Posting2Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Posting2Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Posting2Charges", Posting2Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Posting2Charges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion1Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion1Desc", Insertion1Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion1Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion1Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion1Vol", Insertion1Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion1Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion1Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion1Rate", Insertion1Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion1Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion1Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion1Charges", Insertion1Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion1Charges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion2Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion2Desc", Insertion2Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion2Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion2Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion2Vol", Insertion2Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion2Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion2Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion2Rate", Insertion2Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion2Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion2Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion2Charges", Insertion2Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion2Charges", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Insertion3Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion3Desc", Insertion3Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion3Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion3Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion3Vol", Insertion3Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion3Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion3Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion3Rate", Insertion3Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion3Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion3Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion3Charges", Insertion3Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion3Charges", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Insertion4Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion4Desc", Insertion4Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion4Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion4Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion4Vol", Insertion4Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion4Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion4Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion4Rate", Insertion4Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion4Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion4Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion4Charges", Insertion4Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Insertion4Charges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MixDesc))
                        {
                            cmdInsert.Parameters.AddWithValue("@MixDesc", MixDesc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@MixDesc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MixVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@MixVol", MixVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@MixVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MixRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@MixRate", MixRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@MixRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MixCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@MixCharges", MixCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@MixCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(StatementDesc))
                        {
                            cmdInsert.Parameters.AddWithValue("@StatementDesc", StatementDesc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@StatementDesc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(StatementVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@StatementVol", StatementVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@StatementVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(StatementRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@StatementRate", StatementRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@StatementRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(StatementCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@StatementCharges", StatementCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@StatementCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure1Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure1Desc", Brochure1Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure1Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure1Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure1Vol", Brochure1Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure1Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure1Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure1Rate", Brochure1Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure1Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure1Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure1Charges", Brochure1Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure1Charges", DBNull.Value);
                        }

                        // Brochure2
                        if (!string.IsNullOrEmpty(Brochure2Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure2Desc", Brochure2Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure2Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure2Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure2Vol", Brochure2Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure2Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure2Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure2Rate", Brochure2Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure2Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure2Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure2Charges", Brochure2Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure2Charges", DBNull.Value);
                        }

                        // Brochure3
                        if (!string.IsNullOrEmpty(Brochure3Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure3Desc", Brochure3Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure3Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure3Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure3Vol", Brochure3Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure3Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure3Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure3Rate", Brochure3Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure3Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure3Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure3Charges", Brochure3Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure3Charges", DBNull.Value);
                        }

                        // Brochure4
                        if (!string.IsNullOrEmpty(Brochure4Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure4Desc", Brochure4Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure4Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure4Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure4Vol", Brochure4Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure4Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure4Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure4Rate", Brochure4Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure4Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure4Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure4Charges", Brochure4Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure4Charges", DBNull.Value);
                        }

                        // Brochure5
                        if (!string.IsNullOrEmpty(Brochure5Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure5Desc", Brochure5Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure5Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure5Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure5Vol", Brochure5Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure5Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure5Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure5Rate", Brochure5Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure5Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure5Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure5Charges", Brochure5Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Brochure5Charges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MB5KVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@MB5KVol", MB5KVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@MB5KVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MB5KRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@MB5KRate", MB5KRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@MB5KRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MB5KCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@MB5KCharges", MB5KCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@MB5KCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(InsertingVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@InsertingVol", InsertingVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@InsertingVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(InsertingRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@InsertingRate", InsertingRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@InsertingRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(InsertingCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@InsertingCharges", InsertingCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@InsertingCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(HandlingVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@HandlingVol", HandlingVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@HandlingVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(HandlingRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@HandlingRate", HandlingRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@HandlingRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(HandlingCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@HandlingCharges", HandlingCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@HandlingCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SealingVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@SealingVol", SealingVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@SealingVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SealingRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@SealingRate", SealingRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@SealingRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SealingCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@SealingCharges", SealingCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@SealingCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(TearingVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@TearingVol", TearingVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@TearingVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(TearingRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@TearingRate", TearingRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@TearingRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(TearingCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@TearingCharges", TearingCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@TearingCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(FoldingVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@FoldingVol", FoldingVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@FoldingVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(FoldingRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@FoldingRate", FoldingRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@FoldingRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(FoldingCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@FoldingCharges", FoldingCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@FoldingCharges", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(StickingVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@StockingVol", StickingVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@StockingVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(StickingRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@StockingRate", StickingRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@StockingRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(StickingCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@StockingCharges", StickingCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@StockingCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(LabellingVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@LabellingVol", LabellingVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@LabellingVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(LabellingRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@LabellingRate", LabellingRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@LabellingRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(LabellingCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@LabellingCharges", LabellingCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@LabellingCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(LabellingRMVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@LabellingRMVol", LabellingRMVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@LabellingRMVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(LabellingRMRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@LabellingRMRate", LabellingRMRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@LabellingRMRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(LabellingRMCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@LabellingRMCharges", LabellingRMCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@LabellingRMCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SelfMailerVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@SelfMailerVol", SelfMailerVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@SelfMailerVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SelfMailerRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@SelfMailerRate", SelfMailerRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@SelfMailerRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SelfMailerCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@SelfMailerCharges", SelfMailerCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@SelfMailerCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SelfMaterialVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@SelfMaterialVol", SelfMaterialVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@SelfMaterialVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SelfMaterialRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@SelfMaterialRate", SelfMaterialRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@SelfMaterialRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SelfMaterialCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@SelfMaterialCharges", SelfMaterialCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@SelfMaterialCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(OvertimeVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@OvertimeVol", OvertimeVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@OvertimeVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(OvertimeRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@OvertimeRate", OvertimeRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@OvertimeRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(OvertimeCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@OvertimeCharges", OvertimeCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@OvertimeCharges", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(CourierVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@CourierVol", CourierVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@CourierVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(CourierRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@CourierRate", CourierRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@CourierRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(CourierCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@CourierCharges", CourierCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@CourierCharges", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(DeliveryVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@DeliveryVol", DeliveryVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@DeliveryVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(DeliveryRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@DeliveryRate", DeliveryRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@DeliveryRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(DeliveryCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@DeliveryCharges", DeliveryCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@DeliveryCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MatchingVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@MatchingVol", MatchingVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@MatchingVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MatchingRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@MatchingRate", MatchingRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@MatchingRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MatchingCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@MatchingCharges", MatchingCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@MatchingCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(IPDSVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@IPDSVol", IPDSVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@IPDSVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(IPDSRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@IPDSRate", IPDSRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@IPDSRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(IPDSCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@IPDSCharges", IPDSCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@IPDSCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ProgrammingVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@ProgrammingVol", ProgrammingVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@ProgrammingVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ProgrammingRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@ProgrammingRate", ProgrammingRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@ProgrammingRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ProgrammingCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@ProgrammingCharges", ProgrammingCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@ProgrammingCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ReturnMailVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@ReturnMailVol", ReturnMailVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@ReturnMailVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ReturnMailRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@ReturnMailRate", ReturnMailRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@ReturnMailRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ReturnMailCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@ReturnMailCharges", ReturnMailCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@ReturnMailCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RetainerVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@RetainerVol", RetainerVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@RetainerVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RetainerRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@RetainerRate", RetainerRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@RetainerRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RetainerCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@RetainerCharges", RetainerCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@RetainerCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RubberStampingVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@RubberStampingVol", RubberStampingVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@RubberStampingVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RubberStampingRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@RubberStampingRate", RubberStampingRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@RubberStampingRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RubberStampingCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@RubberStampingCharges", RubberStampingCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@RubberStampingCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(GlueingVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@GlueingVol", GlueingVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@GlueingVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(GlueingRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@GlueingRate", GlueingRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@GlueingRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(GlueingCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@GlueingCharges", GlueingCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@GlueingCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(CuttingVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@CuttingVol", CuttingVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@CuttingVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(CuttingRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@CuttingRate", CuttingRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@CuttingRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(CuttingCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@CuttingCharges", CuttingCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@CuttingCharges", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(MergingVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@MergingVol", MergingVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@MergingVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MergingRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@MergingRate", MergingRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@MergingRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MergingCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@MergingCharges", MergingCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@MergingCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(DiscountVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@DiscountVol", DiscountVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@DiscountVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(DiscountRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@DiscountRate", DiscountRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@DiscountRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(DiscountCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@DiscountCharges", DiscountCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@DiscountCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage1Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage1Desc", Postage1Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage1Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage1Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage1Vol", Postage1Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage1Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage1Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage1Rate", Postage1Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage1Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage1Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage1Charges", Postage1Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage1Charges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage2Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage2Desc", Postage2Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage2Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage2Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage2Vol", Postage2Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage2Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage2Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage2Rate", Postage2Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage2Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage2Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage2Charges", Postage2Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage2Charges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage3Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage3Desc", Postage3Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage3Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage3Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage3Vol", Postage3Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage3Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage3Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage3Rate", Postage3Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage3Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage3Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage3Charges", Postage3Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage3Charges", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Postage4Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage4Desc", Postage4Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage4Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage4Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage4Vol", Postage4Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage4Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage4Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage4Rate", Postage4Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage4Rate", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Postage4Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage4Charges", Postage4Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage4Charges", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Postage5Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage5Desc", Postage5Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage5Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage5Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage5Vol", Postage5Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage5Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage5Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage5Rate", Postage5Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage5Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage5Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage5Charges", Postage5Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage5Charges", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Postage6Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage6Desc", Postage6Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage6Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage6Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage6Vol", Postage6Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage6Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage6Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage6Rate", Postage6Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage6Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage6Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage6Charges", Postage6Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage6Charges", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Postage7Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage7Desc", Postage7Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage7Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage7Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage7Vol", Postage7Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage7Vol", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(Postage7Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage7Rate", Postage7Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage7Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage7Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage7Charges", Postage7Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage7Charges", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Postage8Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage8Desc", Postage8Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage8Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage8Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage8Vol", Postage8Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage8Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage8Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage8Rate", Postage8Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage8Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage8Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage8Charges", Postage8Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Postage8Charges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest1Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest1Desc", Imprest1Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest1Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest1Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest1Vol", Imprest1Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest1Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest1Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest1Rate", Imprest1Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest1Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest1Charges))
                        {
                            if (Imprest1Charges.Contains("-"))
                            {
                                cmdInsert.Parameters.AddWithValue("@Imprest1Charges", Imprest1Charges);

                            }
                            else
                            {
                                string ConvertNegative = "-" + Imprest1Charges;
                                cmdInsert.Parameters.AddWithValue("@Imprest1Charges", ConvertNegative);
                            }

                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest1Charges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest2Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest2Desc", Imprest2Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest2Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest2Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest2Vol", Imprest2Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest2Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest2Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest2Rate", Imprest2Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest2Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest2Charges))
                        {
                            if (Imprest2Charges.Contains("-"))
                            {
                                cmdInsert.Parameters.AddWithValue("@Imprest2Charges", Imprest2Charges);

                            }
                            else
                            {
                                string ConvertNegative = "-" + Imprest2Charges;
                                cmdInsert.Parameters.AddWithValue("@Imprest2Charges", ConvertNegative);
                            }


                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest2Charges", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Imprest3Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest3Desc", Imprest3Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest3Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest3Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest3Vol", Imprest3Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest3Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest3Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest3Rate", Imprest3Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest3Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest3Charges))
                        {
                            if (Imprest3Charges.Contains("-"))
                            {
                                cmdInsert.Parameters.AddWithValue("@Imprest3Charges", Imprest3Charges);

                            }
                            else
                            {
                                string ConvertNegative = "-" + Imprest3Charges;
                                cmdInsert.Parameters.AddWithValue("@Imprest3Charges", ConvertNegative);
                            }
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest3Charges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest4Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest4Desc", Imprest4Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest4Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest4Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest4Vol", Imprest4Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest4Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest4Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest4Rate", Imprest4Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest4Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest4Charges))
                        {
                            if (Imprest4Charges.Contains("-"))
                            {
                                cmdInsert.Parameters.AddWithValue("@Imprest4Charges", Imprest4Charges);

                            }
                            else
                            {
                                string ConvertNegative = "-" + Imprest4Charges;
                                cmdInsert.Parameters.AddWithValue("@Imprest4Charges", ConvertNegative);
                            }
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest4Charges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest5Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest5Desc", Imprest5Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest5Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest5Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest5Vol", Imprest5Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest5Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest5Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest5Rate", Imprest5Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest5Rate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(Imprest5Charges))
                        {
                            if (Imprest5Charges.Contains("-"))
                            {
                                cmdInsert.Parameters.AddWithValue("@Imprest5Charges", Imprest5Charges);

                            }
                            else
                            {
                                string ConvertNegative = "-" + Imprest5Charges;
                                cmdInsert.Parameters.AddWithValue("@Imprest5Charges", ConvertNegative);
                            }
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest5Charges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest6Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest6Desc", Imprest6Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest6Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest6Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest6Vol", Imprest6Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest6Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest6Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest6Rate", Imprest6Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest6Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest6Charges))
                        {
                            if (Imprest6Charges.Contains("-"))
                            {
                                cmdInsert.Parameters.AddWithValue("@Imprest6Charges", Imprest6Charges);

                            }
                            else
                            {
                                string ConvertNegative = "-" + Imprest6Charges;
                                cmdInsert.Parameters.AddWithValue("@Imprest6Charges", ConvertNegative);
                            }
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest6Charges", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(Imprest7Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest7Desc", Imprest7Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest7Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest7Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest7Vol", Imprest7Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest7Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest7Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest7Rate", Imprest7Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest7Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest7Charges))
                        {
                            if (Imprest7Charges.Contains("-"))
                            {
                                cmdInsert.Parameters.AddWithValue("@Imprest7Charges", Imprest7Charges);

                            }
                            else
                            {
                                string ConvertNegative = "-" + Imprest7Charges;
                                cmdInsert.Parameters.AddWithValue("@Imprest7Charges", ConvertNegative);
                            }
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest7Charges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest8Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest8Desc", Imprest8Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest8Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest8Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest8Vol", Imprest8Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest8Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest8Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest8Rate", Imprest8Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest8Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest8Charges))
                        {
                            if (Imprest8Charges.Contains("-"))
                            {
                                cmdInsert.Parameters.AddWithValue("@Imprest8Charges", Imprest8Charges);

                            }
                            else
                            {
                                string ConvertNegative = "-" + Imprest8Charges;
                                cmdInsert.Parameters.AddWithValue("@Imprest8Charges", ConvertNegative);
                            }
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Imprest8Charges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RebateDesc))
                        {
                            cmdInsert.Parameters.AddWithValue("@RebateDesc", RebateDesc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@RebateDesc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RebateVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@RebateVol", RebateVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@RebateVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RebateRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@RebateRate", RebateRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@RebateRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RebateCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@RebateCharges", RebateCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@RebateCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(FrankingDesc))
                        {
                            cmdInsert.Parameters.AddWithValue("@FrankingDesc", FrankingDesc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@FrankingDesc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(FrankingVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@FrankingVol", FrankingVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@FrankingVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(FrankingRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@FrankingRate", FrankingRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@FrankingRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(FrankingCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@FrankingCharges", FrankingCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@FrankingCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Franking10Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Franking10Desc", Franking10Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Franking10Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Franking10Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Franking10Vol", Franking10Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Franking10Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Franking10Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Franking10Rate", Franking10Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Franking10Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Franking10Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Franking10Charges", Franking10Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Franking10Charges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(AirmailDesc))
                        {
                            cmdInsert.Parameters.AddWithValue("@AirmailDesc", AirmailDesc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@AirmailDesc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(AirmailVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@AirmailVol", AirmailVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@AirmailVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(AirmailRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@AirmailRate", AirmailRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@AirmailRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(AirmailCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@AirmailCharges", AirmailCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@AirmailCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SporeDesc))
                        {
                            cmdInsert.Parameters.AddWithValue("@SporeDesc", SporeDesc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@SporeDesc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SporeVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@SporeVol", SporeVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@SporeVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SporeRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@SporeRate", SporeRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@SporeRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SporeCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@SporeCharges", SporeCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@SporeCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(TLetterDesc))
                        {
                            cmdInsert.Parameters.AddWithValue("@TLetterDesc", TLetterDesc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@TLetterDesc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(TLetterVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@TLetterVol", TLetterVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@TLetterVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(TLetterRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@TLetterRate", TLetterRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@TLetterRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(TLetterCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@TLetterCharges", TLetterCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@TLetterCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(NPCDesc))
                        {
                            cmdInsert.Parameters.AddWithValue("@NPCDesc", NPCDesc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@NPCDesc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(NPCVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@NPCVol", NPCVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@NPCVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(NPCRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@NPCRate", NPCRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@NPCRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(NPCCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@NPCCharges", NPCCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@NPCCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Mix10Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@Mix10Desc", Mix10Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Mix10Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Mix10Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@Mix10Vol", Mix10Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Mix10Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Mix10Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@Mix10Rate", Mix10Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Mix10Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Mix10Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@Mix10Charges", Mix10Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@Mix10Charges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RegisteredMailsDesc))
                        {
                            cmdInsert.Parameters.AddWithValue("@RegisteredMailsDesc", RegisteredMailsDesc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@RegisteredMailsDesc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RegisteredMailsVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@RegisteredMailsVol", RegisteredMailsVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@RegisteredMailsVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RegisteredMailsRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@RegisteredMailsRate", RegisteredMailsRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@RegisteredMailsRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RegisteredMailsCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@RegisteredMailsCharges", RegisteredMailsCharges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@RegisteredMailsCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ImprestRMDesc))
                        {
                            cmdInsert.Parameters.AddWithValue("@ImprestRMDesc", ImprestRMDesc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@ImprestRMDesc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ImprestRMVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@ImprestRMVol", ImprestRMVol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@ImprestRMVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ImprestRMRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@ImprestRMRate", ImprestRMRate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@ImprestRMRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ImprestRMCharges))
                        {
                            if (ImprestRMCharges.Contains("-"))
                            {
                                cmdInsert.Parameters.AddWithValue("@ImprestRMCharges", ImprestRMCharges);

                            }
                            else
                            {
                                string ConvertNegative = "-" + ImprestRMCharges;
                                cmdInsert.Parameters.AddWithValue("@ImprestRMCharges", ConvertNegative);
                            }
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@ImprestRMCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RegisteredMails2Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@RegisteredMails2Desc", RegisteredMails2Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@RegisteredMails2Desc", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RegisteredMails2Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@RegisteredMails2Vol", RegisteredMails2Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@RegisteredMails2Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RegisteredMails2Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@RegisteredMails2Rate", RegisteredMails2Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@RegisteredMails2Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RegisteredMails2Charges))
                        {
                            cmdInsert.Parameters.AddWithValue("@RegisteredMails2Charges", RegisteredMails2Charges);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@RegisteredMails2Charges", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(ImprestRM2Desc))
                        {
                            cmdInsert.Parameters.AddWithValue("@ImprestRM2Desc", ImprestRM2Desc);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@ImprestRM2Desc", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(ImprestRM2Vol))
                        {
                            cmdInsert.Parameters.AddWithValue("@ImprestRM2Vol", ImprestRM2Vol);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@ImprestRM2Vol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ImprestRM2Rate))
                        {
                            cmdInsert.Parameters.AddWithValue("@ImprestRM2Rate", ImprestRM2Rate);
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@ImprestRM2Rate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ImprestRM2Charges))
                        {
                            if (ImprestRM2Charges.Contains("-"))
                            {
                                cmdInsert.Parameters.AddWithValue("@ImprestRM2Charges", ImprestRM2Charges);

                            }
                            else
                            {
                                string ConvertNegative = "-" + ImprestRM2Charges;
                                cmdInsert.Parameters.AddWithValue("@ImprestRM2Charges", ConvertNegative);
                            }
                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@ImprestRM2Charges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(CDVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@CDVol", CDVol);

                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@CDVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(CDRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@CDRate", CDRate);

                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@CDRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(CDCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@CDCharges", CDCharges);

                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@CDCharges", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(DataSFTPVol))
                        {
                            cmdInsert.Parameters.AddWithValue("@DataSFTPVol", DataSFTPVol);

                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@DataSFTPVol", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(DataSFTPRate))
                        {
                            cmdInsert.Parameters.AddWithValue("@DataSFTPRate", DataSFTPRate);

                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@DataSFTPRate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(DataSFTPCharges))
                        {
                            cmdInsert.Parameters.AddWithValue("@DataSFTPCharges", DataSFTPCharges);

                        }
                        else
                        {
                            cmdInsert.Parameters.AddWithValue("@DataSFTPCharges", DBNull.Value);
                        }




                    }

                    cmdInsert.ExecuteNonQuery();

                    Debug.WriteLine("Before redirect");
                    if (BatchId != null)
                    {
                        return RedirectToAction("ManageBatch", "Finance");

                        //return RedirectToAction("ViewMPRBatch", new { BatchId = BatchId, Customer_Name = Customer_Name });
                    }
                    Debug.WriteLine("After Redirect");


                }

                if (set == "Update")
                {
                    Debug.WriteLine("In Update");

                    Debug.WriteLine("Batch Id : " + BatchId);


                    SqlCommand cmdUpdate = new SqlCommand("UPDATE BillingMPR SET Posting1Desc=@Posting1DescUpdate,Posting1Vol=@Posting1VolUpdate,Posting1Rate=@Posting1RateUpdate,Posting1Charges=@Posting1ChargesUpdate,Posting2Desc=@Posting2DescUpdate,Posting2Vol=@Posting2VolUpdate," +
                        "Posting2Rate=@Posting2RateUpdate,Posting2Charges=@Posting2ChargesUpdate,Insertion1Desc=@Insertion1DescUpdate,Insertion1Vol=@Insertion1VolUpdate,Insertion1Rate=@Insertion1RateUpdate,Insertion1Charges=@Insertion1ChargesUpdate,Insertion2Desc=@Insertion2DescUpdate," +
                        "Insertion2Vol=@Insertion2VolUpdate,Insertion2Rate=@Insertion2RateUpdate,Insertion2Charges=@Insertion2ChargesUpdate,Insertion3Desc=@Insertion3DescUpdate,Insertion3Vol=@Insertion3VolUpdate,Insertion3Rate=@Insertion3RateUpdate,Insertion3Charges=@Insertion3ChargesUpdate," +
                        "Insertion4Desc=@Insertion4DescUpdate,Insertion4Vol=@Insertion4VolUpdate,Insertion4Rate=@Insertion4RateUpdate,Insertion4Charges=@Insertion4ChargesUpdate,MixDesc=@MixDescUpdate,MixVol=@MixVolUpdate,MixRate=@MixRateUpdate,MixCharges=@MixChargesUpdate," +
                        "StatementDesc=@StatementDescUpdate,StatementVol=@StatementVolUpdate,StatementRate=@StatementRateUpdate,StatementCharges=@StatementChargesUpdate,Brochure1Desc=@Brochure1DescUpdate,Brochure1Vol=@Brochure1VolUpdate,Brochure1Rate=@Brochure1RateUpdate," +
                        "Brochure1Charges=@Brochure1ChargesUpdate,Brochure2Desc=@Brochure2DescUpdate,Brochure2Vol=@Brochure2VolUpdate,Brochure2Rate=@Brochure2RateUpdate,Brochure2Charges=@Brochure2ChargesUpdate,Brochure3Desc=@Brochure3DescUpdate,Brochure3Vol=@Brochure3VolUpdate," +
                        "Brochure3Rate=@Brochure3RateUpdate,Brochure3Charges=@Brochure3ChargesUpdate,Brochure4Desc=@Brochure4DescUpdate,Brochure4Vol=@Brochure4VolUpdate,Brochure4Rate=@Brochure4RateUpdate,Brochure4Charges=@Brochure4ChargesUpdate,Brochure5Desc=@Brochure5DescUpdate," +
                        "Brochure5Vol=@Brochure5VolUpdate,Brochure5Rate=@Brochure5RateUpdate,Brochure5Charges=@Brochure5ChargesUpdate,MB5KVol=@MB5KVolUpdate,MB5KRate=@MB5KRateUpdate,MB5KCharges=@MB5KChargesUpdate,InsertingVol=@InsertingVolUpdate,InsertingRate=@InsertingRateUpdate," +
                        "InsertingCharges=@InsertingChargesUpdate,HandlingVol=@HandlingVolUpdate,HandlingRate=@HandlingRateUpdate,HandlingCharges=@HandlingChargesUpdate,SealingVol=@SealingVolUpdate,SealingRate=@SealingRateUpdate,SealingCharges=@SealingChargesUpdate,TearingVol=@TearingVolUpdate," +
                        "TearingRate=@TearingRateUpdate,TearingCharges=@TearingChargesUpdate,FoldingVol=@FoldingVolUpdate,FoldingRate=@FoldingRateUpdate,FoldingCharges=@FoldingChargesUpdate,StockingVol=@StockingVolUpdate,StockingRate=@StockingRateUpdate,StockingCharges=@StockingChargesUpdate," +
                        "LabellingVol=@LabellingVolUpdate,LabellingRate=@LabellingRateUpdate,LabellingCharges=@LabellingChargesUpdate,SelfMailerVol=@SelfMailerVolUpdate,SelfMailerRate=@SelfMailerRateUpdate,SelfMailerCharges=@SelfMailerChargesUpdate,SelfMaterialVol=@SelfMaterialVolUpdate," +
                        "SelfMaterialRate=@SelfMaterialRateUpdate,SelfMaterialCharges=@SelfMaterialChargesUpdate,OvertimeVol=@OvertimeVolUpdate,OvertimeRate=@OvertimeRateUpdate,OvertimeCharges=@OvertimeChargesUpdate,CourierVol=@CourierVolUpdate,CourierRate=@CourierRateUpdate," +
                        "CourierCharges=@CourierChargesUpdate,DeliveryVol=@DeliveryVolUpdate,DeliveryRate=@DeliveryRateUpdate,DeliveryCharges=@DeliveryChargesUpdate,MatchingVol=@MatchingVolUpdate,MatchingRate=@MatchingRateUpdate,MatchingCharges=@MatchingChargesUpdate," +
                        "LabellingRMVol=@LabellingRMVolUpdate,LabellingRMRate=@LabellingRMRateUpdate,LabellingRMCharges=@LabellingRMChargesUpdate,IPDSVol=@IPDSVolUpdate,IPDSRate=@IPDSRateUpdate,IPDSCharges=@IPDSChargesUpdate,ProgrammingVol=@ProgrammingVolUpdate,ProgrammingRate=@ProgrammingRateUpdate," +
                        "ProgrammingCharges=@ProgrammingChargesUpdate,ReturnMailVol=@ReturnMailVolUpdate,ReturnMailRate=@ReturnMailRateUpdate,ReturnMailCharges=@ReturnMailChargesUpdate,RetainerVol=@RetainerVolUpdate,RetainerRate=@RetainerRateUpdate,RetainerCharges=@RetainerChargesUpdate," +
                        "RubberStampingVol=@RubberStampingVolUpdate,RubberStampingRate=@RubberStampingRateUpdate,RubberStampingCharges=@RubberStampingChargesUpdate,GlueingVol=@GlueingVolUpdate,GlueingRate=@GlueingRateUpdate,GlueingCharges=@GlueingChargesUpdate,CuttingVol=@CuttingVolUpdate," +
                        "CuttingRate=@CuttingRateUpdate,CuttingCharges=@CuttingChargesUpdate,MergingVol=@MergingVolUpdate,MergingRate=@MergingRateUpdate,MergingCharges=@MergingChargesUpdate,DiscountVol=@DiscountVolUpdate,DiscountRate=@DiscountRateUpdate,DiscountCharges=@DiscountChargesUpdate," +
                        "Postage1Desc=@Postage1DescUpdate,Postage1Vol=@Postage1VolUpdate,Postage1Rate=@Postage1RateUpdate,Postage1Charges=@Postage1ChargesUpdate,Postage2Desc=@Postage2DescUpdate,Postage2Vol=@Postage2VolUpdate,Postage2Rate=@Postage2RateUpdate,Postage2Charges=@Postage2ChargesUpdate," +
                        "Postage3Desc=@Postage3DescUpdate,Postage3Vol=@Postage3VolUpdate,Postage3Rate=@Postage3RateUpdate,Postage3Charges=@Postage3ChargesUpdate,Postage4Desc=@Postage4DescUpdate,Postage4Vol=@Postage4VolUpdate,Postage4Rate=@Postage4RateUpdate,Postage4Charges=@Postage4ChargesUpdate," +
                        "Postage5Desc=@Postage5DescUpdate,Postage5Vol=@Postage5VolUpdate,Postage5Rate=@Postage5RateUpdate,Postage5Charges=@Postage5ChargesUpdate,Postage6Desc=@Postage6DescUpdate,Postage6Vol=@Postage6VolUpdate,Postage6Rate=@Postage6RateUpdate,Postage6Charges=@Postage6ChargesUpdate," +
                        "Postage7Desc=@Postage7DescUpdate,Postage7Vol=@Postage7VolUpdate,Postage7Rate=@Postage7RateUpdate,Postage7Charges=@Postage7ChargesUpdate,Postage8Desc=@Postage8DescUpdate,Postage8Vol=@Postage8VolUpdate,Postage8Rate=@Postage8RateUpdate,Postage8Charges=@Postage8ChargesUpdate," +
                        "Imprest1Desc=@Imprest1DescUpdate,Imprest1Vol=@Imprest1VolUpdate,Imprest1Rate=@Imprest1RateUpdate,Imprest1Charges=@Imprest1ChargesUpdate,Imprest2Desc=@Imprest2DescUpdate,Imprest2Vol=@Imprest2VolUpdate,Imprest2Rate=@Imprest2RateUpdate,Imprest2Charges=@Imprest2ChargesUpdate," +
                        "Imprest3Desc=@Imprest3DescUpdate,Imprest3Vol=@Imprest3VolUpdate,Imprest3Rate=@Imprest3RateUpdate,Imprest3Charges=@Imprest3ChargesUpdate,Imprest4Desc=@Imprest4DescUpdate,Imprest4Vol=@Imprest4VolUpdate,Imprest4Rate=@Imprest4RateUpdate,Imprest4Charges=@Imprest4ChargesUpdate," +
                        "Imprest5Desc=@Imprest5DescUpdate,Imprest5Vol=@Imprest5VolUpdate,Imprest5Rate=@Imprest5RateUpdate,Imprest5Charges=@Imprest5ChargesUpdate,Imprest6Desc=@Imprest6DescUpdate,Imprest6Vol=@Imprest6VolUpdate,Imprest6Rate=@Imprest6RateUpdate,Imprest6Charges=@Imprest6ChargesUpdate," +
                        "Imprest7Desc=@Imprest7DescUpdate,Imprest7Vol=@Imprest7VolUpdate,Imprest7Rate=@Imprest7RateUpdate,Imprest7Charges=@Imprest7ChargesUpdate,Imprest8Desc=@Imprest8DescUpdate,Imprest8Vol=@Imprest8VolUpdate,Imprest8Rate=@Imprest8RateUpdate,Imprest8Charges=@Imprest8ChargesUpdate," +
                        "RebateDesc=@RebateDescUpdate,RebateVol=@RebateVolUpdate,RebateRate=@RebateRateUpdate,RebateCharges=@RebateChargesUpdate,FrankingDesc=@FrankingDescUpdate,FrankingVol=@FrankingVolUpdate,FrankingRate=@FrankingRateUpdate,FrankingCharges=@FrankingChargesUpdate," +
                        "Franking10Desc=@Franking10DescUpdate,Franking10Vol=@Franking10VolUpdate,Franking10Rate=@Franking10RateUpdate,Franking10Charges=@Franking10ChargesUpdate,AirmailDesc=@AirmailDescUpdate,AirmailVol=@AirmailVolUpdate,AirmailRate=@AirmailRateUpdate," +
                        "AirmailCharges=@AirmailChargesUpdate,SporeDesc=@SporeDescUpdate,SporeVol=@SporeVolUpdate,SporeRate=@SporeRateUpdate,SporeCharges=@SporeChargesUpdate,TLetterDesc=@TLetterDescUpdate,TLetterVol=@TLetterVolUpdate,TLetterRate=@TLetterRateUpdate,TLetterCharges=@TLetterChargesUpdate," +
                        "NPCDesc=@NPCDescUpdate,NPCVol=@NPCVolUpdate,NPCRate=@NPCRateUpdate,NPCCharges=@NPCChargesUpdate,Mix10Desc=@Mix10DescUpdate,Mix10Vol=@Mix10VolUpdate,Mix10Rate=@Mix10RateUpdate,Mix10Charges=@Mix10ChargesUpdate,RegisteredMailsDesc=@RegisteredMailsDescUpdate," +
                        "RegisteredMailsVol=@RegisteredMailsVolUpdate,RegisteredMailsRate=@RegisteredMailsRateUpdate,RegisteredMailsCharges=@RegisteredMailsChargesUpdate,RegisteredMails2Desc=@RegisteredMails2DescUpdate,RegisteredMails2Vol=@RegisteredMails2VolUpdate," +
                        "RegisteredMails2Rate=@RegisteredMails2RateUpdate,RegisteredMails2Charges=@RegisteredMails2ChargesUpdate,ImprestRMDesc=@ImprestRMDescUpdate,ImprestRMVol=@ImprestRMVolUpdate,ImprestRMRate=@ImprestRMRateUpdate,ImprestRMCharges=@ImprestRMChargesUpdate," +
                        "ImprestRM2Desc=@ImprestRM2DescUpdate,ImprestRM2Vol=@ImprestRM2VolUpdate,ImprestRM2Rate=@ImprestRM2RateUpdate,ImprestRM2Charges=@ImprestRM2ChargesUpdate, DataSFTPVol=@DataSFTPVolUpdate, DataSFTPRate=@DataSFTPRateUpdate, DataSFTPCharges=@DataSFTPChargesUpdate, CDArchivingVol=@CDArchivingVolUpdate, CDArchivingRate=@CDArchivingRateUpdate,CDArchivingCharges=@CDArchivingChargesUpdate WHERE JobSheetNo=@JobSheetNoUpdate", cn);

                    {
                        if (BatchId != null)
                        {
                            Debug.WriteLine("Guna Batch id");
                            if (!string.IsNullOrEmpty(BatchId))
                            {
                                cmdUpdate.Parameters.AddWithValue("@JobSheetNoUpdate", BatchId);
                            }
                            else
                            {
                                cmdUpdate.Parameters.AddWithValue("@JobSheetNoUpdate", DBNull.Value);
                            }
                        }
                        else
                        {
                            Debug.WriteLine("Guna logtag");

                            if (!string.IsNullOrEmpty(LogTagNo))
                            {
                                cmdUpdate.Parameters.AddWithValue("@JobSheetNoUpdate", LogTagNo);
                            }
                            else
                            {
                                cmdUpdate.Parameters.AddWithValue("@JobSheetNoUpdate", DBNull.Value);
                            }
                        }

                        if (!string.IsNullOrEmpty(CDArchivingVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@CDArchivingVolUpdate", CDArchivingVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@CDArchivingVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(CDArchivingRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@CDArchivingRateUpdate", CDArchivingRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@CDArchivingRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(CDArchivingCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@CDArchivingChargesUpdate", CDArchivingCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@CDArchivingChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Posting1Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Posting1DescUpdate", Posting1Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Posting1DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Posting1Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Posting1VolUpdate", Posting1Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Posting1VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Posting1Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Posting1RateUpdate", Posting1Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Posting1RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Posting1Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Posting1ChargesUpdate", Posting1Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Posting1ChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Posting2Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Posting2DescUpdate", Posting2Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Posting2DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Posting2Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Posting2VolUpdate", Posting2Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Posting2VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Posting2Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Posting2RateUpdate", Posting2Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Posting2RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Posting2Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Posting2ChargesUpdate", Posting2Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Posting2ChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion1Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion1DescUpdate", Insertion1Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion1DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion1Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion1VolUpdate", Insertion1Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion1VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion1Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion1RateUpdate", Insertion1Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion1RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion1Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion1ChargesUpdate", Insertion1Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion1ChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion2Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion2DescUpdate", Insertion2Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion2DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion2Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion2VolUpdate", Insertion2Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion2VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion2Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion2RateUpdate", Insertion2Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion2RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion2Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion2ChargesUpdate", Insertion2Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion2ChargesUpdate", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Insertion3Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion3DescUpdate", Insertion3Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion3DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion3Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion3VolUpdate", Insertion3Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion3VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion3Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion3RateUpdate", Insertion3Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion3RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion3Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion3ChargesUpdate", Insertion3Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion3ChargesUpdate", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Insertion4Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion4DescUpdate", Insertion4Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion4DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion4Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion4VolUpdate", Insertion4Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion4VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion4Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion4RateUpdate", Insertion4Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion4RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Insertion4Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion4ChargesUpdate", Insertion4Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Insertion4ChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MixDesc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@MixDescUpdate", MixDesc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@MixDescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MixVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@MixVolUpdate", MixVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@MixVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MixRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@MixRateUpdate", MixRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@MixRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MixCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@MixChargesUpdate", MixCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@MixChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(StatementDesc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@StatementDescUpdate", StatementDesc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@StatementDescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(StatementVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@StatementVolUpdate", StatementVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@StatementVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(StatementRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@StatementRateUpdate", StatementRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@StatementRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(StatementCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@StatementChargesUpdate", StatementCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@StatementChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure1Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure1DescUpdate", Brochure1Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure1DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure1Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure1VolUpdate", Brochure1Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure1VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure1Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure1RateUpdate", Brochure1Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure1RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure1Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure1ChargesUpdate", Brochure1Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure1ChargesUpdate", DBNull.Value);
                        }

                        // Brochure2
                        if (!string.IsNullOrEmpty(Brochure2Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure2DescUpdate", Brochure2Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure2DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure2Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure2VolUpdate", Brochure2Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure2VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure2Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure2RateUpdate", Brochure2Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure2RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure2Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure2ChargesUpdate", Brochure2Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure2ChargesUpdate", DBNull.Value);
                        }

                        // Brochure3
                        if (!string.IsNullOrEmpty(Brochure3Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure3DescUpdate", Brochure3Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure3DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure3Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure3VolUpdate", Brochure3Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure3VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure3Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure3RateUpdate", Brochure3Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure3RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure3Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure3ChargesUpdate", Brochure3Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure3ChargesUpdate", DBNull.Value);
                        }

                        // Brochure4
                        if (!string.IsNullOrEmpty(Brochure4Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure4DescUpdate", Brochure4Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure4DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure4Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure4VolUpdate", Brochure4Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure4VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure4Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure4RateUpdate", Brochure4Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure4RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure4Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure4ChargesUpdate", Brochure4Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure4ChargesUpdate", DBNull.Value);
                        }

                        // Brochure5
                        if (!string.IsNullOrEmpty(Brochure5Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure5DescUpdate", Brochure5Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure5DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure5Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure5VolUpdate", Brochure5Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure5VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure5Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure5RateUpdate", Brochure5Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure5RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Brochure5Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure5ChargesUpdate", Brochure5Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Brochure5ChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MB5KVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@MB5KVolUpdate", MB5KVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@MB5KVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MB5KRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@MB5KRateUpdate", MB5KRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@MB5KRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MB5KCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@MB5KChargesUpdate", MB5KCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@MB5KChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(InsertingVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@InsertingVolUpdate", InsertingVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@InsertingVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(InsertingRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@InsertingRateUpdate", InsertingRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@InsertingRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(InsertingCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@InsertingChargesUpdate", InsertingCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@InsertingChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(HandlingVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@HandlingVolUpdate", HandlingVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@HandlingVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(HandlingRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@HandlingRateUpdate", HandlingRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@HandlingRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(HandlingCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@HandlingChargesUpdate", HandlingCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@HandlingChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SealingVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@SealingVolUpdate", SealingVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@SealingVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SealingRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@SealingRateUpdate", SealingRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@SealingRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SealingCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@SealingChargesUpdate", SealingCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@SealingChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(TearingVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@TearingVolUpdate", TearingVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@TearingVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(TearingRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@TearingRateUpdate", TearingRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@TearingRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(TearingCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@TearingChargesUpdate", TearingCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@TearingChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(FoldingVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@FoldingVolUpdate", FoldingVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@FoldingVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(FoldingRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@FoldingRateUpdate", FoldingRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@FoldingRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(FoldingCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@FoldingChargesUpdate", FoldingCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@FoldingChargesUpdate", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(StickingVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@StockingVolUpdate", StickingVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@StockingVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(StickingRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@StockingRateUpdate", StickingRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@StockingRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(StickingCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@StockingChargesUpdate", StickingCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@StockingChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(LabellingVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@LabellingVolUpdate", LabellingVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@LabellingVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(LabellingRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@LabellingRateUpdate", LabellingRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@LabellingRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(LabellingCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@LabellingChargesUpdate", LabellingCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@LabellingChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(LabellingRMVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@LabellingRMVolUpdate", LabellingRMVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@LabellingRMVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(LabellingRMRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@LabellingRMRateUpdate", LabellingRMRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@LabellingRMRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(LabellingRMCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@LabellingRMChargesUpdate", LabellingRMCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@LabellingRMChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SelfMailerVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@SelfMailerVolUpdate", SelfMailerVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@SelfMailerVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SelfMailerRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@SelfMailerRateUpdate", SelfMailerRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@SelfMailerRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SelfMailerCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@SelfMailerChargesUpdate", SelfMailerCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@SelfMailerChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SelfMaterialVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@SelfMaterialVolUpdate", SelfMaterialVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@SelfMaterialVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SelfMaterialRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@SelfMaterialRateUpdate", SelfMaterialRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@SelfMaterialRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SelfMaterialCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@SelfMaterialChargesUpdate", SelfMaterialCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@SelfMaterialChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(OvertimeVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@OvertimeVolUpdate", OvertimeVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@OvertimeVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(OvertimeRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@OvertimeRateUpdate", OvertimeRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@OvertimeRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(OvertimeCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@OvertimeChargesUpdate", OvertimeCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@OvertimeChargesUpdate", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(CourierVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@CourierVolUpdate", CourierVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@CourierVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(CourierRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@CourierRateUpdate", CourierRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@CourierRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(CourierCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@CourierChargesUpdate", CourierCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@CourierChargesUpdate", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(DeliveryVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@DeliveryVolUpdate", DeliveryVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@DeliveryVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(DeliveryRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@DeliveryRateUpdate", DeliveryRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@DeliveryRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(DeliveryCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@DeliveryChargesUpdate", DeliveryCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@DeliveryChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MatchingVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@MatchingVolUpdate", MatchingVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@MatchingVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MatchingRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@MatchingRateUpdate", MatchingRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@MatchingRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MatchingCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@MatchingChargesUpdate", MatchingCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@MatchingChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(IPDSVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@IPDSVolUpdate", IPDSVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@IPDSVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(IPDSRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@IPDSRateUpdate", IPDSRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@IPDSRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(IPDSCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@IPDSChargesUpdate", IPDSCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@IPDSChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ProgrammingVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@ProgrammingVolUpdate", ProgrammingVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@ProgrammingVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ProgrammingRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@ProgrammingRateUpdate", ProgrammingRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@ProgrammingRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ProgrammingCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@ProgrammingChargesUpdate", ProgrammingCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@ProgrammingChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ReturnMailVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@ReturnMailVolUpdate", ReturnMailVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@ReturnMailVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ReturnMailRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@ReturnMailRateUpdate", ReturnMailRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@ReturnMailRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ReturnMailCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@ReturnMailChargesUpdate", ReturnMailCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@ReturnMailChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RetainerVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@RetainerVolUpdate", RetainerVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@RetainerVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RetainerRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@RetainerRateUpdate", RetainerRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@RetainerRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RetainerCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@RetainerChargesUpdate", RetainerCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@RetainerChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RubberStampingVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@RubberStampingVolUpdate", RubberStampingVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@RubberStampingVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RubberStampingRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@RubberStampingRateUpdate", RubberStampingRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@RubberStampingRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RubberStampingCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@RubberStampingChargesUpdate", RubberStampingCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@RubberStampingChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(GlueingVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@GlueingVolUpdate", GlueingVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@GlueingVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(GlueingRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@GlueingRateUpdate", GlueingRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@GlueingRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(GlueingCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@GlueingChargesUpdate", GlueingCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@GlueingChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(CuttingVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@CuttingVolUpdate", CuttingVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@CuttingVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(CuttingRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@CuttingRateUpdate", CuttingRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@CuttingRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(CuttingCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@CuttingChargesUpdate", CuttingCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@CuttingChargesUpdate", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(MergingVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@MergingVolUpdate", MergingVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@MergingVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MergingRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@MergingRateUpdate", MergingRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@MergingRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(MergingCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@MergingChargesUpdate", MergingCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@MergingChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(DiscountVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@DiscountVolUpdate", DiscountVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@DiscountVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(DiscountRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@DiscountRateUpdate", DiscountRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@DiscountRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(DiscountCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@DiscountChargesUpdate", DiscountCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@DiscountChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage1Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage1DescUpdate", Postage1Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage1DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage1Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage1VolUpdate", Postage1Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage1VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage1Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage1RateUpdate", Postage1Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage1RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage1Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage1ChargesUpdate", Postage1Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage1ChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage2Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage2DescUpdate", Postage2Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage2DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage2Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage2VolUpdate", Postage2Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage2VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage2Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage2RateUpdate", Postage2Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage2RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage2Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage2ChargesUpdate", Postage2Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage2ChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage3Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage3DescUpdate", Postage3Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage3DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage3Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage3VolUpdate", Postage3Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage3VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage3Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage3RateUpdate", Postage3Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage3RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage3Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage3ChargesUpdate", Postage3Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage3ChargesUpdate", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Postage4Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage4DescUpdate", Postage4Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage4DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage4Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage4VolUpdate", Postage4Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage4VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage4Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage4RateUpdate", Postage4Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage4RateUpdate", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Postage4Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage4ChargesUpdate", Postage4Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage4ChargesUpdate", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Postage5Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage5DescUpdate", Postage5Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage5DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage5Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage5VolUpdate", Postage5Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage5VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage5Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage5RateUpdate", Postage5Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage5RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage5Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage5ChargesUpdate", Postage5Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage5ChargesUpdate", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Postage6Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage6DescUpdate", Postage6Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage6DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage6Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage6VolUpdate", Postage6Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage6VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage6Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage6RateUpdate", Postage6Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage6RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage6Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage6ChargesUpdate", Postage6Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage6ChargesUpdate", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Postage7Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage7DescUpdate", Postage7Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage7DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage7Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage7VolUpdate", Postage7Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage7VolUpdate", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(Postage7Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage7RateUpdate", Postage7Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage7RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage7Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage7ChargesUpdate", Postage7Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage7ChargesUpdate", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Postage8Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage8DescUpdate", Postage8Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage8DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage8Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage8VolUpdate", Postage8Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage8VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage8Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage8RateUpdate", Postage8Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage8RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Postage8Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage8ChargesUpdate", Postage8Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Postage8ChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest1Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest1DescUpdate", Imprest1Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest1DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest1Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest1VolUpdate", Imprest1Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest1VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest1Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest1RateUpdate", Imprest1Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest1RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest1Charges))
                        {
                            if (Imprest1Charges.Contains("-"))
                            {
                                cmdUpdate.Parameters.AddWithValue("@Imprest1ChargesUpdate", Imprest1Charges);

                            }
                            else
                            {
                                string ConvertNegative = "-" + Imprest1Charges;
                                cmdUpdate.Parameters.AddWithValue("@Imprest1ChargesUpdate", ConvertNegative);
                            }
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest1ChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest2Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest2DescUpdate", Imprest2Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest2DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest2Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest2VolUpdate", Imprest2Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest2VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest2Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest2RateUpdate", Imprest2Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest2RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest2Charges))
                        {
                            if (Imprest2Charges.Contains("-"))
                            {
                                cmdUpdate.Parameters.AddWithValue("@Imprest2ChargesUpdate", Imprest2Charges);

                            }
                            else
                            {
                                string ConvertNegative = "-" + Imprest2Charges;
                                cmdUpdate.Parameters.AddWithValue("@Imprest2ChargesUpdate", ConvertNegative);
                            }
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest2ChargesUpdate", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(Imprest3Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest3DescUpdate", Imprest3Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest3DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest3Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest3VolUpdate", Imprest3Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest3VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest3Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest3RateUpdate", Imprest3Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest3RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest3Charges))
                        {
                            if (Imprest3Charges.Contains("-"))
                            {
                                cmdUpdate.Parameters.AddWithValue("@Imprest3ChargesUpdate", Imprest3Charges);

                            }
                            else
                            {
                                string ConvertNegative = "-" + Imprest3Charges;
                                cmdUpdate.Parameters.AddWithValue("@Imprest3ChargesUpdate", ConvertNegative);
                            }
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest3ChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest4Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest4DescUpdate", Imprest4Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest4DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest4Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest4VolUpdate", Imprest4Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest4VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest4Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest4RateUpdate", Imprest4Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest4RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest4Charges))
                        {
                            if (Imprest4Charges.Contains("-"))
                            {
                                cmdUpdate.Parameters.AddWithValue("@Imprest4ChargesUpdate", Imprest4Charges);

                            }
                            else
                            {
                                string ConvertNegative = "-" + Imprest4Charges;
                                cmdUpdate.Parameters.AddWithValue("@Imprest4ChargesUpdate", ConvertNegative);
                            }
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest4ChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest5Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest5DescUpdate", Imprest5Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest5DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest5Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest5VolUpdate", Imprest5Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest5VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest5Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest5RateUpdate", Imprest5Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest5RateUpdate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(Imprest5Charges))
                        {
                            if (Imprest5Charges.Contains("-"))
                            {
                                cmdUpdate.Parameters.AddWithValue("@Imprest5ChargesUpdate", Imprest5Charges);

                            }
                            else
                            {
                                string ConvertNegative = "-" + Imprest5Charges;
                                cmdUpdate.Parameters.AddWithValue("@Imprest5ChargesUpdate", ConvertNegative);
                            }
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest5ChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest6Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest6DescUpdate", Imprest6Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest6DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest6Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest6VolUpdate", Imprest6Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest6VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest6Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest6RateUpdate", Imprest6Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest6RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest6Charges))
                        {
                            if (Imprest6Charges.Contains("-"))
                            {
                                cmdUpdate.Parameters.AddWithValue("@Imprest6ChargesUpdate", Imprest6Charges);

                            }
                            else
                            {
                                string ConvertNegative = "-" + Imprest6Charges;
                                cmdUpdate.Parameters.AddWithValue("@Imprest6ChargesUpdate", ConvertNegative);
                            }
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest6ChargesUpdate", DBNull.Value);
                        }
                        if (!string.IsNullOrEmpty(Imprest7Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest7DescUpdate", Imprest7Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest7DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest7Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest7VolUpdate", Imprest7Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest7VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest7Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest7RateUpdate", Imprest7Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest7RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest7Charges))
                        {
                            if (Imprest7Charges.Contains("-"))
                            {
                                cmdUpdate.Parameters.AddWithValue("@Imprest7ChargesUpdate", Imprest7Charges);

                            }
                            else
                            {
                                string ConvertNegative = "-" + Imprest7Charges;
                                cmdUpdate.Parameters.AddWithValue("@Imprest7ChargesUpdate", ConvertNegative);
                            }
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest7ChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest8Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest8DescUpdate", Imprest8Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest8DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest8Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest8VolUpdate", Imprest8Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest8VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest8Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest8RateUpdate", Imprest8Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest8RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Imprest8Charges))
                        {
                            if (Imprest8Charges.Contains("-"))
                            {
                                cmdUpdate.Parameters.AddWithValue("@Imprest8ChargesUpdate", Imprest8Charges);

                            }
                            else
                            {
                                string ConvertNegative = "-" + Imprest8Charges;
                                cmdUpdate.Parameters.AddWithValue("@Imprest8ChargesUpdate", ConvertNegative);
                            }
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Imprest8ChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RebateDesc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@RebateDescUpdate", RebateDesc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@RebateDescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RebateVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@RebateVolUpdate", RebateVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@RebateVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RebateRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@RebateRateUpdate", RebateRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@RebateRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RebateCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@RebateChargesUpdate", RebateCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@RebateChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(FrankingDesc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@FrankingDescUpdate", FrankingDesc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@FrankingDescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(FrankingVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@FrankingVolUpdate", FrankingVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@FrankingVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(FrankingRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@FrankingRateUpdate", FrankingRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@FrankingRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(FrankingCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@FrankingChargesUpdate", FrankingCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@FrankingChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Franking10Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Franking10DescUpdate", Franking10Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Franking10DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Franking10Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Franking10VolUpdate", Franking10Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Franking10VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Franking10Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Franking10RateUpdate", Franking10Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Franking10RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Franking10Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Franking10ChargesUpdate", Franking10Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Franking10ChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(AirmailDesc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@AirmailDescUpdate", AirmailDesc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@AirmailDescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(AirmailVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@AirmailVolUpdate", AirmailVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@AirmailVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(AirmailRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@AirmailRateUpdate", AirmailRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@AirmailRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(AirmailCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@AirmailChargesUpdate", AirmailCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@AirmailChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SporeDesc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@SporeDescUpdate", SporeDesc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@SporeDescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SporeVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@SporeVolUpdate", SporeVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@SporeVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SporeRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@SporeRateUpdate", SporeRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@SporeRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(SporeCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@SporeChargesUpdate", SporeCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@SporeChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(TLetterDesc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@TLetterDescUpdate", TLetterDesc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@TLetterDescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(TLetterVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@TLetterVolUpdate", TLetterVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@TLetterVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(TLetterRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@TLetterRateUpdate", TLetterRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@TLetterRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(TLetterCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@TLetterChargesUpdate", TLetterCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@TLetterChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(NPCDesc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@NPCDescUpdate", NPCDesc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@NPCDescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(NPCVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@NPCVolUpdate", NPCVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@NPCVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(NPCRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@NPCRateUpdate", NPCRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@NPCRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(NPCCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@NPCChargesUpdate", NPCCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@NPCChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Mix10Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Mix10DescUpdate", Mix10Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Mix10DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Mix10Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Mix10VolUpdate", Mix10Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Mix10VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Mix10Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Mix10RateUpdate", Mix10Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Mix10RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(Mix10Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@Mix10ChargesUpdate", Mix10Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@Mix10ChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RegisteredMailsDesc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@RegisteredMailsDescUpdate", RegisteredMailsDesc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@RegisteredMailsDescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RegisteredMailsVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@RegisteredMailsVolUpdate", RegisteredMailsVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@RegisteredMailsVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RegisteredMailsRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@RegisteredMailsRateUpdate", RegisteredMailsRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@RegisteredMailsRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RegisteredMailsCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@RegisteredMailsChargesUpdate", RegisteredMailsCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@RegisteredMailsChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ImprestRMDesc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@ImprestRMDescUpdate", ImprestRMDesc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@ImprestRMDescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ImprestRMVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@ImprestRMVolUpdate", ImprestRMVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@ImprestRMVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ImprestRMRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@ImprestRMRateUpdate", ImprestRMRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@ImprestRMRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ImprestRMCharges))
                        {
                            if (ImprestRMCharges.Contains("-"))
                            {
                                cmdUpdate.Parameters.AddWithValue("@ImprestRMChargesUpdate", ImprestRMCharges);

                            }
                            else
                            {
                                string ConvertNegative = "-" + ImprestRMCharges;
                                cmdUpdate.Parameters.AddWithValue("@ImprestRMChargesUpdate", ConvertNegative);
                            }
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@ImprestRMChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RegisteredMails2Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@RegisteredMails2DescUpdate", RegisteredMails2Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@RegisteredMails2DescUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RegisteredMails2Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@RegisteredMails2VolUpdate", RegisteredMails2Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@RegisteredMails2VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RegisteredMails2Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@RegisteredMails2RateUpdate", RegisteredMails2Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@RegisteredMails2RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(RegisteredMails2Charges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@RegisteredMails2ChargesUpdate", RegisteredMails2Charges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@RegisteredMails2ChargesUpdate", DBNull.Value);
                        }


                        if (!string.IsNullOrEmpty(ImprestRM2Desc))
                        {
                            cmdUpdate.Parameters.AddWithValue("@ImprestRM2DescUpdate", ImprestRM2Desc);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@ImprestRM2DescUpdate", DBNull.Value);

                        }

                        if (!string.IsNullOrEmpty(ImprestRM2Vol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@ImprestRM2VolUpdate", ImprestRM2Vol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@ImprestRM2VolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ImprestRM2Rate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@ImprestRM2RateUpdate", ImprestRM2Rate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@ImprestRM2RateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(ImprestRM2Charges))
                        {
                            if (ImprestRM2Charges.Contains("-"))
                            {
                                cmdUpdate.Parameters.AddWithValue("@ImprestRM2ChargesUpdate", ImprestRM2Charges);

                            }
                            else
                            {
                                string ConvertNegative = "-" + ImprestRM2Charges;
                                cmdUpdate.Parameters.AddWithValue("@ImprestRM2ChargesUpdate", ConvertNegative);
                            }
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@ImprestRM2ChargesUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(DataSFTPVol))
                        {
                            cmdUpdate.Parameters.AddWithValue("@DataSFTPVolUpdate", DataSFTPVol);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@DataSFTPVolUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(DataSFTPRate))
                        {
                            cmdUpdate.Parameters.AddWithValue("@DataSFTPRateUpdate", DataSFTPRate);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@DataSFTPRateUpdate", DBNull.Value);
                        }

                        if (!string.IsNullOrEmpty(DataSFTPCharges))
                        {
                            cmdUpdate.Parameters.AddWithValue("@DataSFTPChargesUpdate", DataSFTPCharges);
                        }
                        else
                        {
                            cmdUpdate.Parameters.AddWithValue("@DataSFTPChargesUpdate", DBNull.Value);
                        }
                    }

                    cmdUpdate.ExecuteNonQuery();
                }

                if (AdditionalServiceMMP == "checked")
                {
                    if (setMMP == "Submit")
                    {
                        Debug.WriteLine("masuk mmp submit");
                        SqlCommand cmdInsertMMP = new SqlCommand("INSERT INTO BillingMPRMMP (Id,JobSheetNo, MMPPosting1Desc, MMPPosting1Vol, MMPPosting1Rate, MMPPosting1Charges, MMPPosting2Desc, MMPPosting2Vol, MMPPosting2Rate, MMPPosting2Charges, MMPInsertion1Desc, MMPInsertion1Vol, " +
                           "MMPInsertion1Rate, MMPInsertion1Charges, MMPInsertion2Desc, MMPInsertion2Vol, MMPInsertion2Rate, MMPInsertion2Charges, MMPInsertion3Desc, MMPInsertion3Vol, MMPInsertion3Rate, MMPInsertion3Charges, MMPInsertion4Desc, MMPInsertion4Vol, MMPInsertion4Rate, " +
                           "MMPInsertion4Charges, MMPMixDesc, MMPMixVol, MMPMixRate, MMPMixCharges, MMPStatementDesc, MMPStatementVol, MMPStatementRate, MMPStatementCharges, MMPBrochure1Desc, MMPBrochure1Vol, MMPBrochure1Rate, MMPBrochure1Charges, MMPBrochure2Desc, MMPBrochure2Vol, MMPBrochure2Rate, MMPBrochure2Charges, " +
                           "MMPBrochure3Desc, MMPBrochure3Vol, MMPBrochure3Rate, MMPBrochure3Charges, MMPBrochure4Desc, MMPBrochure4Vol, MMPBrochure4Rate, MMPBrochure4Charges, MMPBrochure5Desc, MMPBrochure5Vol, MMPBrochure5Rate, MMPBrochure5Charges, MMPMB5KVol, MMPMB5KRate, MMPMB5KCharges, MMPInsertingVol, MMPInsertingRate, " +
                           "MMPInsertingCharges, MMPHandlingVol, MMPHandlingRate, MMPHandlingCharges, MMPSealingVol, MMPSealingRate, MMPSealingCharges, MMPTearingVol, MMPTearingRate, MMPTearingCharges, MMPFoldingVol, MMPFoldingRate, MMPFoldingCharges, MMPStockingVol, MMPStockingRate, MMPStockingCharges, MMPLabellingVol, MMPLabellingRate, " +
                           "MMPLabellingCharges, MMPSelfMailerVol, MMPSelfMailerRate, MMPSelfMailerCharges, MMPSelfMaterialVol, MMPSelfMaterialRate, MMPSelfMaterialCharges, MMPOvertimeVol, MMPOvertimeRate, MMPOvertimeCharges, MMPCourierVol, MMPCourierRate, MMPCourierCharges, MMPDeliveryVol, MMPDeliveryRate, MMPDeliveryCharges, MMPMatchingVol, " +
                           "MMPMatchingRate, MMPMatchingCharges, MMPLabellingRMVol, MMPLabellingRMRate, MMPLabellingRMCharges, MMPIPDSVol, MMPIPDSRate, MMPIPDSCharges, MMPProgrammingVol, MMPProgrammingRate, MMPProgrammingCharges, MMPReturnMailVol, MMPReturnMailRate, MMPReturnMailCharges, MMPRetainerVol, MMPRetainerRate, MMPRetainerCharges, MMPRubberStampingVol, " +
                           "MMPRubberStampingRate, MMPRubberStampingCharges, MMPGlueingVol, MMPGlueingRate, MMPGlueingCharges, MMPCuttingVol, MMPCuttingRate, MMPCuttingCharges, MMPMergingVol, MMPMergingRate, MMPMergingCharges, MMPDiscountVol, MMPDiscountRate, MMPDiscountCharges, MMPPostage1Desc, MMPPostage1Vol, MMPPostage1Rate, MMPPostage1Charges, MMPPostage2Desc," +
                           "MMPPostage2Vol, MMPPostage2Rate, MMPPostage2Charges, MMPPostage3Desc, MMPPostage3Vol, MMPPostage3Rate, MMPPostage3Charges, MMPPostage4Desc, MMPPostage4Vol, MMPPostage4Rate, MMPPostage4Charges, MMPPostage5Desc, MMPPostage5Vol, MMPPostage5Rate, MMPPostage5Charges, MMPPostage6Desc, MMPPostage6Vol, MMPPostage6Rate," +
                           "MMPPostage6Charges, MMPPostage7Desc, MMPPostage7Vol, MMPPostage7Rate, MMPPostage7Charges, MMPPostage8Desc, MMPPostage8Vol, MMPPostage8Rate, MMPPostage8Charges, MMPImprest1Desc, MMPImprest1Vol, MMPImprest1Rate, MMPImprest1Charges, MMPImprest2Desc, MMPImprest2Vol, MMPImprest2Rate, MMPImprest2Charges, MMPImprest3Desc," +
                           "MMPImprest3Vol, MMPImprest3Rate, MMPImprest3Charges, MMPImprest4Desc, MMPImprest4Vol, MMPImprest4Rate, MMPImprest4Charges, MMPImprest5Desc, MMPImprest5Vol, MMPImprest5Rate, MMPImprest5Charges, MMPImprest6Desc, MMPImprest6Vol, MMPImprest6Rate, MMPImprest6Charges, MMPImprest7Desc, MMPImprest7Vol, MMPImprest7Rate," +
                           "MMPImprest7Charges, MMPImprest8Desc, MMPImprest8Vol, MMPImprest8Rate, MMPImprest8Charges, MMPRebateDesc, MMPRebateVol, MMPRebateRate, MMPRebateCharges, MMPFrankingDesc, MMPFrankingVol, MMPFrankingRate, MMPFrankingCharges, MMPFranking10Desc, MMPFranking10Vol, MMPFranking10Rate, MMPFranking10Charges, MMPAirmailDesc, MMPAirmailVol," +
                           "MMPAirmailRate, MMPAirmailCharges, MMPSporeDesc, MMPSporeVol, MMPSporeRate, MMPSporeCharges, MMPTLetterDesc, MMPTLetterVol, MMPTLetterRate, MMPTLetterCharges, MMPNPCDesc, MMPNPCVol, MMPNPCRate, MMPNPCCharges, MMPMix10Desc, MMPMix10Vol, MMPMix10Rate, MMPMix10Charges, MMPRegisteredMailsDesc, MMPRegisteredMailsVol, MMPRegisteredMailsRate, MMPRegisteredMailsCharges, " +
                           "MMPRegisteredMails2Desc, MMPRegisteredMails2Vol, MMPRegisteredMails2Rate, MMPRegisteredMails2Charges, MMPImprestRMDesc, MMPImprestRMVol, MMPImprestRMRate, MMPImprestRMCharges, MMPImprestRM2Desc, MMPImprestRM2Vol, MMPImprestRM2Rate, MMPImprestRM2Charges, AdditionalMMP, MMPDataSFTPVol, MMPDataSFTPRate, MMPDataSFTPCharges, MMPCDArchivingVol, MMPCDArchivingRate, MMPCDArchivingCharges) VALUES(@MMPIdx,@MMPJobSheetNo,@MMPPosting1Desc,@MMPPosting1Vol,@MMPPosting1Rate," +
                           "@MMPPosting1Charges,@MMPPosting2Desc,@MMPPosting2Vol,@MMPPosting2Rate,@MMPPosting2Charges,@MMPInsertion1Desc,@MMPInsertion1Vol,@MMPInsertion1Rate,@MMPInsertion1Charges,@MMPInsertion2Desc,@MMPInsertion2Vol,@MMPInsertion2Rate,@MMPInsertion2Charges,@MMPInsertion3Desc,@MMPInsertion3Vol,@MMPInsertion3Rate," +
                           "@MMPInsertion3Charges,@MMPInsertion4Desc,@MMPInsertion4Vol,@MMPInsertion4Rate,@MMPInsertion4Charges,@MMPMixDesc,@MMPMixVol,@MMPMixRate,@MMPMixCharges,@MMPStatementDesc,@MMPStatementVol,@MMPStatementRate,@MMPStatementCharges,@MMPBrochure1Desc,@MMPBrochure1Vol,@MMPBrochure1Rate,@MMPBrochure1Charges," +
                           "@MMPBrochure2Desc,@MMPBrochure2Vol,@MMPBrochure2Rate,@MMPBrochure2Charges,@MMPBrochure3Desc,@MMPBrochure3Vol,@MMPBrochure3Rate,@MMPBrochure3Charges,@MMPBrochure4Desc,@MMPBrochure4Vol,@MMPBrochure4Rate,@MMPBrochure4Charges,@MMPBrochure5Desc,@MMPBrochure5Vol,@MMPBrochure5Rate,@MMPBrochure5Charges,@MMPMB5KVol," +
                           "@MMPMB5KRate,@MMPMB5KCharges,@MMPInsertingVol,@MMPInsertingRate,@MMPInsertingCharges,@MMPHandlingVol,@MMPHandlingRate,@MMPHandlingCharges,@MMPSealingVol,@MMPSealingRate,@MMPSealingCharges,@MMPTearingVol,@MMPTearingRate,@MMPTearingCharges,@MMPFoldingVol,@MMPFoldingRate,@MMPFoldingCharges,@MMPStockingVol,@MMPStockingRate," +
                           "@MMPStockingCharges,@MMPLabellingVol,@MMPLabellingRate,@MMPLabellingCharges,@MMPSelfMailerVol,@MMPSelfMailerRate,@MMPSelfMailerCharges,@MMPSelfMaterialVol,@MMPSelfMaterialRate,@MMPSelfMaterialCharges,@MMPOvertimeVol,@MMPOvertimeRate,@MMPOvertimeCharges,@MMPCourierVol,@MMPCourierRate,@MMPCourierCharges,@MMPDeliveryVol," +
                           "@MMPDeliveryRate,@MMPDeliveryCharges,@MMPMatchingVol,@MMPMatchingRate,@MMPMatchingCharges,@MMPLabellingRMVol,@MMPLabellingRMRate,@MMPLabellingRMCharges,@MMPIPDSVol,@MMPIPDSRate,@MMPIPDSCharges,@MMPProgrammingVol,@MMPProgrammingRate,@MMPProgrammingCharges,@MMPReturnMailVol,@MMPReturnMailRate,@MMPReturnMailCharges,@MMPRetainerVol," +
                           "@MMPRetainerRate,@MMPRetainerCharges,@MMPRubberStampingVol,@MMPRubberStampingRate,@MMPRubberStampingCharges,@MMPGlueingVol,@MMPGlueingRate,@MMPGlueingCharges,@MMPCuttingVol,@MMPCuttingRate,@MMPCuttingCharges,@MMPMergingVol,@MMPMergingRate,@MMPMergingCharges,@MMPDiscountVol,@MMPDiscountRate,@MMPDiscountCharges,@MMPPostage1Desc," +
                           "@MMPPostage1Vol,@MMPPostage1Rate,@MMPPostage1Charges,@MMPPostage2Desc, @MMPPostage2Vol, @MMPPostage2Rate, @MMPPostage2Charges, @MMPPostage3Desc, @MMPPostage3Vol, @MMPPostage3Rate, @MMPPostage3Charges, @MMPPostage4Desc, @MMPPostage4Vol, @MMPPostage4Rate, @MMPPostage4Charges, @MMPPostage5Desc, @MMPPostage5Vol, @MMPPostage5Rate, " +
                           "@MMPPostage5Charges, @MMPPostage6Desc, @MMPPostage6Vol, @MMPPostage6Rate, @MMPPostage6Charges, @MMPPostage7Desc, @MMPPostage7Vol, @MMPPostage7Rate, @MMPPostage7Charges, @MMPPostage8Desc, @MMPPostage8Vol, @MMPPostage8Rate, @MMPPostage8Charges,@MMPImprest1Desc, @MMPImprest1Vol, @MMPImprest1Rate, @MMPImprest1Charges, @MMPImprest2Desc, " +
                           "@MMPImprest2Vol, @MMPImprest2Rate, @MMPImprest2Charges, @MMPImprest3Desc, @MMPImprest3Vol, @MMPImprest3Rate, @MMPImprest3Charges, @MMPImprest4Desc, @MMPImprest4Vol, @MMPImprest4Rate, @MMPImprest4Charges, @MMPImprest5Desc, @MMPImprest5Vol, @MMPImprest5Rate, @MMPImprest5Charges, @MMPImprest6Desc, @MMPImprest6Vol, @MMPImprest6Rate, @MMPImprest6Charges, " +
                           "@MMPImprest7Desc, @MMPImprest7Vol, @MMPImprest7Rate, @MMPImprest7Charges, @MMPImprest8Desc, @MMPImprest8Vol, @MMPImprest8Rate, @MMPImprest8Charges,@MMPRebateDesc, @MMPRebateVol, @MMPRebateRate, @MMPRebateCharges, @MMPFrankingDesc, @MMPFrankingVol, @MMPFrankingRate, @MMPFrankingCharges, @MMPFranking10Desc, @MMPFranking10Vol, @MMPFranking10Rate, " +
                           "@MMPFranking10Charges, @MMPAirmailDesc, @MMPAirmailVol, @MMPAirmailRate, @MMPAirmailCharges, @MMPSporeDesc, @MMPSporeVol, @MMPSporeRate, @MMPSporeCharges, @MMPTLetterDesc, @MMPTLetterVol, @MMPTLetterRate, @MMPTLetterCharges, @MMPNPCDesc, @MMPNPCVol, @MMPNPCRate, @MMPNPCCharges, @MMPMix10Desc, @MMPMix10Vol, @MMPMix10Rate, @MMPMix10Charges,@MMPRegisteredMailsDesc, " +
                           "@MMPRegisteredMailsVol, @MMPRegisteredMailsRate, @MMPRegisteredMailsCharges, @MMPRegisteredMails2Desc, @MMPRegisteredMails2Vol, @MMPRegisteredMails2Rate, @MMPRegisteredMails2Charges, @MMPImprestRMDesc, @MMPImprestRMVol, @MMPImprestRMRate, @MMPImprestRMCharges, @MMPImprestRM2Desc, @MMPImprestRM2Vol, @MMPImprestRM2Rate, @MMPImprestRM2Charges, @AdditionalServiceMMP, @MMPDataSFTPVol,@MMPDataSFTPRate, @MMPDataSFTPCharges, @MMPCDArchivingVol, @MMPCDArchivingRate, @MMPCDArchivingCharges)", cn);

                        {

                            Guid idx = Guid.NewGuid();

                            cmdInsertMMP.Parameters.AddWithValue("@MMPIdx", idx);

                            if (!string.IsNullOrEmpty(LogTagNo))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPJobSheetNo", LogTagNo);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPJobSheetNo", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPCDArchivingVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPCDArchivingVol", MMPCDArchivingVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPCDArchivingVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPCDArchivingRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPCDArchivingRate", MMPCDArchivingRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPCDArchivingRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPCDArchivingCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPCDArchivingCharges", MMPCDArchivingCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPCDArchivingCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPosting1Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPosting1Desc", MMPPosting1Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPosting1Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPosting1Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPosting1Vol", MMPPosting1Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPosting1Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPosting1Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPosting1Rate", MMPPosting1Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPosting1Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPosting1Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPosting1Charges", MMPPosting1Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPosting1Charges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPosting2Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPosting2Desc", MMPPosting2Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPosting2Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPosting2Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPosting2Vol", MMPPosting2Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPosting2Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPosting2Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPosting2Rate", MMPPosting2Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPosting2Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPosting2Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPosting2Charges", MMPPosting2Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPosting2Charges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion1Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion1Desc", MMPInsertion1Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion1Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion1Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion1Vol", MMPInsertion1Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion1Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion1Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion1Rate", MMPInsertion1Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion1Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion1Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion1Charges", MMPInsertion1Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion1Charges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion2Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion2Desc", MMPInsertion2Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion2Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion2Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion2Vol", MMPInsertion2Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion2Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion2Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion2Rate", MMPInsertion2Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion2Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion2Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion2Charges", MMPInsertion2Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion2Charges", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPInsertion3Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion3Desc", MMPInsertion3Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion3Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion3Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion3Vol", MMPInsertion3Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion3Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion3Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion3Rate", MMPInsertion3Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion3Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion3Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion3Charges", MMPInsertion3Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion3Charges", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPInsertion4Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion4Desc", MMPInsertion4Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion4Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion4Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion4Vol", MMPInsertion4Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion4Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion4Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion4Rate", MMPInsertion4Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion4Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion4Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion4Charges", MMPInsertion4Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertion4Charges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMixDesc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMixDesc", MMPMixDesc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMixDesc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMixVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMixVol", MMPMixVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMixVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMixRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMixRate", MMPMixRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMixRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMixCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMixCharges", MMPMixCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMixCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPStatementDesc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPStatementDesc", MMPStatementDesc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPStatementDesc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPStatementVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPStatementVol", MMPStatementVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPStatementVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPStatementRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPStatementRate", MMPStatementRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPStatementRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPStatementCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPStatementCharges", MMPStatementCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPStatementCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure1Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure1Desc", MMPBrochure1Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure1Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure1Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure1Vol", MMPBrochure1Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure1Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure1Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure1Rate", MMPBrochure1Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure1Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure1Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure1Charges", MMPBrochure1Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure1Charges", DBNull.Value);
                            }

                            // Brochure2
                            if (!string.IsNullOrEmpty(MMPBrochure2Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure2Desc", MMPBrochure2Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure2Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure2Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure2Vol", MMPBrochure2Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure2Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure2Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure2Rate", MMPBrochure2Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure2Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure2Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure2Charges", MMPBrochure2Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure2Charges", DBNull.Value);
                            }

                            // Brochure3
                            if (!string.IsNullOrEmpty(MMPBrochure3Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure3Desc", MMPBrochure3Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure3Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure3Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure3Vol", MMPBrochure3Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure3Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure3Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure3Rate", MMPBrochure3Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure3Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure3Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure3Charges", MMPBrochure3Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure3Charges", DBNull.Value);
                            }

                            // Brochure4
                            if (!string.IsNullOrEmpty(MMPBrochure4Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure4Desc", MMPBrochure4Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure4Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure4Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure4Vol", MMPBrochure4Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure4Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure4Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure4Rate", MMPBrochure4Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure4Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure4Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure4Charges", MMPBrochure4Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure4Charges", DBNull.Value);
                            }

                            // Brochure5
                            if (!string.IsNullOrEmpty(MMPBrochure5Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure5Desc", MMPBrochure5Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure5Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure5Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure5Vol", MMPBrochure5Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure5Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure5Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure5Rate", MMPBrochure5Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure5Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure5Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure5Charges", MMPBrochure5Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPBrochure5Charges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMB5KVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMB5KVol", MMPMB5KVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMB5KVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMB5KRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMB5KRate", MMPMB5KRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMB5KRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMB5KCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMB5KCharges", MMPMB5KCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMB5KCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertingVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertingVol", MMPInsertingVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertingVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertingRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertingRate", MMPInsertingRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertingRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertingCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertingCharges", MMPInsertingCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPInsertingCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPHandlingVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPHandlingVol", MMPHandlingVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPHandlingVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPHandlingRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPHandlingRate", MMPHandlingRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPHandlingRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPHandlingCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPHandlingCharges", MMPHandlingCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPHandlingCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSealingVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSealingVol", MMPSealingVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSealingVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSealingRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSealingRate", MMPSealingRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSealingRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSealingCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSealingCharges", MMPSealingCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSealingCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPTearingVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPTearingVol", MMPTearingVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPTearingVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPTearingRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPTearingRate", MMPTearingRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPTearingRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPTearingCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPTearingCharges", MMPTearingCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPTearingCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFoldingVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFoldingVol", MMPFoldingVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFoldingVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFoldingRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFoldingRate", MMPFoldingRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFoldingRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFoldingCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFoldingCharges", MMPFoldingCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFoldingCharges", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPStickingVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPStockingVol", MMPStickingVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPStockingVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPStickingRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPStockingRate", MMPStickingRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPStockingRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPStickingCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPStockingCharges", MMPStickingCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPStockingCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPLabellingVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPLabellingVol", MMPLabellingVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPLabellingVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPLabellingRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPLabellingRate", MMPLabellingRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPLabellingRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPLabellingCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPLabellingCharges", MMPLabellingCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPLabellingCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPLabellingRMVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPLabellingRMVol", MMPLabellingRMVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPLabellingRMVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPLabellingRMRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPLabellingRMRate", MMPLabellingRMRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPLabellingRMRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPLabellingRMCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPLabellingRMCharges", MMPLabellingRMCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPLabellingRMCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSelfMailerVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSelfMailerVol", MMPSelfMailerVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSelfMailerVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSelfMailerRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSelfMailerRate", MMPSelfMailerRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSelfMailerRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSelfMailerCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSelfMailerCharges", MMPSelfMailerCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSelfMailerCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSelfMaterialVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSelfMaterialVol", MMPSelfMaterialVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSelfMaterialVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSelfMaterialRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSelfMaterialRate", MMPSelfMaterialRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSelfMaterialRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSelfMaterialCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSelfMaterialCharges", MMPSelfMaterialCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSelfMaterialCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPOvertimeVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPOvertimeVol", MMPOvertimeVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPOvertimeVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPOvertimeRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPOvertimeRate", MMPOvertimeRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPOvertimeRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPOvertimeCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPOvertimeCharges", MMPOvertimeCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPOvertimeCharges", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPCourierVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPCourierVol", MMPCourierVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPCourierVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPCourierRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPCourierRate", MMPCourierRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPCourierRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPCourierCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPCourierCharges", MMPCourierCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPCourierCharges", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPDeliveryVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPDeliveryVol", MMPDeliveryVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPDeliveryVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPDeliveryRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPDeliveryRate", MMPDeliveryRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPDeliveryRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPDeliveryCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPDeliveryCharges", MMPDeliveryCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPDeliveryCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMatchingVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMatchingVol", MMPMatchingVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMatchingVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMatchingRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMatchingRate", MMPMatchingRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMatchingRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMatchingCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMatchingCharges", MMPMatchingCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMatchingCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPIPDSVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPIPDSVol", MMPIPDSVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPIPDSVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPIPDSRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPIPDSRate", MMPIPDSRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPIPDSRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPIPDSCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPIPDSCharges", MMPIPDSCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPIPDSCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPProgrammingVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPProgrammingVol", MMPProgrammingVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPProgrammingVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPProgrammingRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPProgrammingRate", MMPProgrammingRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPProgrammingRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPProgrammingCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPProgrammingCharges", MMPProgrammingCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPProgrammingCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPReturnMailVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPReturnMailVol", MMPReturnMailVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPReturnMailVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPReturnMailRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPReturnMailRate", MMPReturnMailRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPReturnMailRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPReturnMailCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPReturnMailCharges", MMPReturnMailCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPReturnMailCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRetainerVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRetainerVol", MMPRetainerVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRetainerVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRetainerRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRetainerRate", MMPRetainerRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRetainerRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRetainerCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRetainerCharges", MMPRetainerCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRetainerCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRubberStampingVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRubberStampingVol", MMPRubberStampingVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRubberStampingVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRubberStampingRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRubberStampingRate", MMPRubberStampingRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRubberStampingRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRubberStampingCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRubberStampingCharges", MMPRubberStampingCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRubberStampingCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPGlueingVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPGlueingVol", MMPGlueingVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPGlueingVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPGlueingRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPGlueingRate", MMPGlueingRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPGlueingRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPGlueingCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPGlueingCharges", MMPGlueingCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPGlueingCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPCuttingVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPCuttingVol", MMPCuttingVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPCuttingVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPCuttingRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPCuttingRate", MMPCuttingRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPCuttingRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPCuttingCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPCuttingCharges", MMPCuttingCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPCuttingCharges", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPMergingVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMergingVol", MMPMergingVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMergingVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMergingRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMergingRate", MMPMergingRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMergingRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMergingCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMergingCharges", MMPMergingCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMergingCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPDiscountVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPDiscountVol", MMPDiscountVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPDiscountVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPDiscountRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPDiscountRate", MMPDiscountRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPDiscountRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPDiscountCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPDiscountCharges", MMPDiscountCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPDiscountCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage1Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage1Desc", MMPPostage1Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage1Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage1Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage1Vol", MMPPostage1Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage1Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage1Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage1Rate", MMPPostage1Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage1Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage1Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage1Charges", MMPPostage1Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage1Charges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage2Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage2Desc", MMPPostage2Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage2Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage2Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage2Vol", MMPPostage2Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage2Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage2Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage2Rate", MMPPostage2Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage2Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage2Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage2Charges", MMPPostage2Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage2Charges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage3Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage3Desc", MMPPostage3Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage3Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage3Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage3Vol", MMPPostage3Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage3Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage3Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage3Rate", MMPPostage3Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage3Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage3Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage3Charges", MMPPostage3Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage3Charges", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPPostage4Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage4Desc", MMPPostage4Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage4Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage4Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage4Vol", MMPPostage4Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage4Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage4Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage4Rate", MMPPostage4Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage4Rate", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPPostage4Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage4Charges", MMPPostage4Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage4Charges", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPPostage5Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage5Desc", MMPPostage5Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage5Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage5Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage5Vol", MMPPostage5Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage5Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage5Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage5Rate", MMPPostage5Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage5Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage5Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage5Charges", MMPPostage5Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage5Charges", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPPostage6Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage6Desc", MMPPostage6Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage6Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage6Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage6Vol", MMPPostage6Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage6Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage6Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage6Rate", MMPPostage6Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage6Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage6Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage6Charges", MMPPostage6Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage6Charges", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPPostage7Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage7Desc", MMPPostage7Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage7Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage7Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage7Vol", MMPPostage7Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage7Vol", DBNull.Value);

                            }

                            if (!string.IsNullOrEmpty(MMPPostage7Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage7Rate", MMPPostage7Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage7Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage7Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage7Charges", MMPPostage7Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage7Charges", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPPostage8Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage8Desc", MMPPostage8Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage8Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage8Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage8Vol", MMPPostage8Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage8Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage8Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage8Rate", MMPPostage8Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage8Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage8Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage8Charges", MMPPostage8Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPPostage8Charges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest1Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest1Desc", MMPImprest1Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest1Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest1Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest1Vol", MMPImprest1Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest1Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest1Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest1Rate", MMPImprest1Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest1Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest1Charges))
                            {
                                if (MMPImprest1Charges.Contains("-"))
                                {
                                    cmdInsertMMP.Parameters.AddWithValue("@MMPImprest1Charges", MMPImprest1Charges);

                                }
                                else
                                {
                                    string ConvertNegative = "-" + MMPImprest1Charges;
                                    cmdInsertMMP.Parameters.AddWithValue("@MMPImprest1Charges", ConvertNegative);
                                }
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest1Charges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest2Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest2Desc", MMPImprest2Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest2Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest2Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest2Vol", MMPImprest2Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest2Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest2Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest2Rate", MMPImprest2Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest2Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest2Charges))
                            {
                                if (MMPImprest2Charges.Contains("-"))
                                {
                                    cmdInsertMMP.Parameters.AddWithValue("@MMPImprest2Charges", MMPImprest2Charges);

                                }
                                else
                                {
                                    string ConvertNegative = "-" + MMPImprest2Charges;
                                    cmdInsertMMP.Parameters.AddWithValue("@MMPImprest2Charges", ConvertNegative);
                                }
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest2Charges", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPImprest3Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest3Desc", MMPImprest3Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest3Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest3Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest3Vol", MMPImprest3Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest3Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest3Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest3Rate", MMPImprest3Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest3Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest3Charges))
                            {
                                if (MMPImprest3Charges.Contains("-"))
                                {
                                    cmdInsertMMP.Parameters.AddWithValue("@MMPImprest3Charges", MMPImprest3Charges);

                                }
                                else
                                {
                                    string ConvertNegative = "-" + MMPImprest3Charges;
                                    cmdInsertMMP.Parameters.AddWithValue("@MMPImprest3Charges", ConvertNegative);
                                }
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest3Charges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest4Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest4Desc", MMPImprest4Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest4Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest4Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest4Vol", MMPImprest4Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest4Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest4Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest4Rate", MMPImprest4Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest4Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest4Charges))
                            {
                                if (MMPImprest4Charges.Contains("-"))
                                {
                                    cmdInsertMMP.Parameters.AddWithValue("@MMPImprest4Charges", MMPImprest4Charges);

                                }
                                else
                                {
                                    string ConvertNegative = "-" + MMPImprest4Charges;
                                    cmdInsertMMP.Parameters.AddWithValue("@MMPImprest4Charges", ConvertNegative);
                                }
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest4Charges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest5Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest5Desc", MMPImprest5Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest5Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest5Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest5Vol", MMPImprest5Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest5Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest5Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest5Rate", MMPImprest5Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest5Rate", DBNull.Value);
                            }
                            if (!string.IsNullOrEmpty(MMPImprest5Charges))
                            {
                                if (MMPImprest5Charges.Contains("-"))
                                {
                                    cmdInsertMMP.Parameters.AddWithValue("@MMPImprest5Charges", MMPImprest5Charges);

                                }
                                else
                                {
                                    string ConvertNegative = "-" + MMPImprest5Charges;
                                    cmdInsertMMP.Parameters.AddWithValue("@MMPImprest5Charges", ConvertNegative);
                                }
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest5Charges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest6Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest6Desc", MMPImprest6Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest6Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest6Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest6Vol", MMPImprest6Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest6Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest6Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest6Rate", MMPImprest6Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest6Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest6Charges))
                            {
                                if (MMPImprest6Charges.Contains("-"))
                                {
                                    cmdInsertMMP.Parameters.AddWithValue("@MMPImprest6Charges", MMPImprest6Charges);

                                }
                                else
                                {
                                    string ConvertNegative = "-" + MMPImprest6Charges;
                                    cmdInsertMMP.Parameters.AddWithValue("@MMPImprest6Charges", ConvertNegative);
                                }
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest6Charges", DBNull.Value);
                            }
                            if (!string.IsNullOrEmpty(MMPImprest7Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest7Desc", MMPImprest7Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest7Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest7Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest7Vol", MMPImprest7Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest7Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest7Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest7Rate", MMPImprest7Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest7Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest7Charges))
                            {
                                if (MMPImprest7Charges.Contains("-"))
                                {
                                    cmdInsertMMP.Parameters.AddWithValue("@MMPImprest7Charges", MMPImprest7Charges);

                                }
                                else
                                {
                                    string ConvertNegative = "-" + MMPImprest7Charges;
                                    cmdInsertMMP.Parameters.AddWithValue("@MMPImprest7Charges", ConvertNegative);
                                }
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest7Charges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest8Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest8Desc", MMPImprest8Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest8Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest8Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest8Vol", MMPImprest8Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest8Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest8Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest8Rate", MMPImprest8Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest8Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest8Charges))
                            {
                                if (MMPImprest8Charges.Contains("-"))
                                {
                                    cmdInsertMMP.Parameters.AddWithValue("@MMPImprest8Charges", MMPImprest8Charges);

                                }
                                else
                                {
                                    string ConvertNegative = "-" + MMPImprest8Charges;
                                    cmdInsertMMP.Parameters.AddWithValue("@MMPImprest8Charges", ConvertNegative);
                                }
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprest8Charges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRebateDesc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRebateDesc", MMPRebateDesc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRebateDesc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRebateVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRebateVol", MMPRebateVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRebateVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRebateRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRebateRate", MMPRebateRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRebateRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRebateCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRebateCharges", MMPRebateCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRebateCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFrankingDesc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFrankingDesc", MMPFrankingDesc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFrankingDesc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFrankingVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFrankingVol", MMPFrankingVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFrankingVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFrankingRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFrankingRate", MMPFrankingRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFrankingRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFrankingCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFrankingCharges", MMPFrankingCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFrankingCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFranking10Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFranking10Desc", MMPFranking10Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFranking10Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFranking10Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFranking10Vol", MMPFranking10Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFranking10Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFranking10Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFranking10Rate", MMPFranking10Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFranking10Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFranking10Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFranking10Charges", MMPFranking10Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPFranking10Charges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPAirmailDesc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPAirmailDesc", MMPAirmailDesc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPAirmailDesc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPAirmailVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPAirmailVol", MMPAirmailVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPAirmailVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPAirmailRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPAirmailRate", MMPAirmailRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPAirmailRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPAirmailCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPAirmailCharges", MMPAirmailCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPAirmailCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSporeDesc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSporeDesc", MMPSporeDesc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSporeDesc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSporeVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSporeVol", MMPSporeVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSporeVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSporeRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSporeRate", MMPSporeRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSporeRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSporeCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSporeCharges", MMPSporeCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPSporeCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPTLetterDesc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPTLetterDesc", MMPTLetterDesc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPTLetterDesc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPTLetterVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPTLetterVol", MMPTLetterVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPTLetterVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPTLetterRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPTLetterRate", MMPTLetterRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPTLetterRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPTLetterCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPTLetterCharges", MMPTLetterCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPTLetterCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPNPCDesc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPNPCDesc", MMPNPCDesc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPNPCDesc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPNPCVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPNPCVol", MMPNPCVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPNPCVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPNPCRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPNPCRate", MMPNPCRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPNPCRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPNPCCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPNPCCharges", MMPNPCCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPNPCCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMix10Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMix10Desc", MMPMix10Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMix10Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMix10Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMix10Vol", MMPMix10Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMix10Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMix10Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMix10Rate", MMPMix10Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMix10Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMix10Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMix10Charges", MMPMix10Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPMix10Charges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRegisteredMailsDesc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRegisteredMailsDesc", MMPRegisteredMailsDesc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRegisteredMailsDesc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRegisteredMailsVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRegisteredMailsVol", MMPRegisteredMailsVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRegisteredMailsVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRegisteredMailsRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRegisteredMailsRate", MMPRegisteredMailsRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRegisteredMailsRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRegisteredMailsCharges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRegisteredMailsCharges", MMPRegisteredMailsCharges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRegisteredMailsCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprestRMDesc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprestRMDesc", MMPImprestRMDesc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprestRMDesc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprestRMVol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprestRMVol", MMPImprestRMVol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprestRMVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprestRMRate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprestRMRate", MMPImprestRMRate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprestRMRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprestRMCharges))
                            {
                                if (MMPImprestRMCharges.Contains("-"))
                                {
                                    cmdInsertMMP.Parameters.AddWithValue("@MMPImprestRMCharges", MMPImprestRMCharges);

                                }
                                else
                                {
                                    string ConvertNegative = "-" + MMPImprestRMCharges;
                                    cmdInsertMMP.Parameters.AddWithValue("@MMPImprestRMCharges", ConvertNegative);
                                }
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprestRMCharges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRegisteredMails2Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRegisteredMails2Desc", MMPRegisteredMails2Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRegisteredMails2Desc", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRegisteredMails2Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRegisteredMails2Vol", MMPRegisteredMails2Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRegisteredMails2Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRegisteredMails2Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRegisteredMails2Rate", MMPRegisteredMails2Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRegisteredMails2Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRegisteredMails2Charges))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRegisteredMails2Charges", MMPRegisteredMails2Charges);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPRegisteredMails2Charges", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPImprestRM2Desc))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprestRM2Desc", MMPImprestRM2Desc);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprestRM2Desc", DBNull.Value);

                            }

                            if (!string.IsNullOrEmpty(MMPImprestRM2Vol))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprestRM2Vol", MMPImprestRM2Vol);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprestRM2Vol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprestRM2Rate))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprestRM2Rate", MMPImprestRM2Rate);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprestRM2Rate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprestRM2Charges))
                            {
                                if (MMPImprestRM2Charges.Contains("-"))
                                {
                                    cmdInsertMMP.Parameters.AddWithValue("@MMPImprestRM2Charges", MMPImprestRM2Charges);

                                }
                                else
                                {
                                    string ConvertNegative = "-" + MMPImprestRM2Charges;
                                    cmdInsertMMP.Parameters.AddWithValue("@MMPImprestRM2Charges", ConvertNegative);
                                }
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPImprestRM2Charges", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(AdditionalServiceMMP))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@AdditionalServiceMMP", AdditionalServiceMMP);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@AdditionalServiceMMP", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(DataSFTPVolMMP))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPDataSFTPVol", DataSFTPVolMMP);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPDataSFTPVol", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(DataSFTPRateMMP))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPDataSFTPRate", DataSFTPRateMMP);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPDataSFTPRate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(DataSFTPChargesMMP))
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPDataSFTPCharges", DataSFTPChargesMMP);
                            }
                            else
                            {
                                cmdInsertMMP.Parameters.AddWithValue("@MMPDataSFTPCharges", DBNull.Value);
                            }
                        }

                        cmdInsertMMP.ExecuteNonQuery();
                    }
                    else if (setMMP == "Update")
                    {
                        Debug.WriteLine("Masuk MMP Update");
                        SqlCommand cmdUpdateMMP = new SqlCommand("UPDATE BillingMPRMMP SET MMPPosting1Desc=@MMPPosting1DescUpdate, MMPPosting1Vol=@MMPPosting1VolUpdate, MMPPosting1Rate=@MMPPosting1RateUpdate, MMPPosting1Charges=@MMPPosting1ChargesUpdate, MMPPosting2Desc=@MMPPosting2DescUpdate, MMPPosting2Vol=@MMPPosting2VolUpdate, " +
                           "MMPPosting2Rate=@MMPPosting2RateUpdate, MMPPosting2Charges=@MMPPosting2ChargesUpdate, MMPInsertion1Desc=@MMPInsertion1DescUpdate, MMPInsertion1Vol=@MMPInsertion1VolUpdate, MMPInsertion1Rate=@MMPInsertion1RateUpdate, MMPInsertion1Charges=@MMPInsertion1ChargesUpdate, MMPInsertion2Desc=@MMPInsertion2DescUpdate, " +
                           "MMPInsertion2Vol=@MMPInsertion2VolUpdate, MMPInsertion2Rate=@MMPInsertion2RateUpdate, MMPInsertion2Charges=@MMPInsertion2ChargesUpdate, MMPInsertion3Desc=@MMPInsertion3DescUpdate, MMPInsertion3Vol=@MMPInsertion3VolUpdate, MMPInsertion3Rate=@MMPInsertion3RateUpdate, MMPInsertion3Charges=@MMPInsertion3ChargesUpdate, " +
                           "MMPInsertion4Desc=@MMPInsertion4DescUpdate, MMPInsertion4Vol=@MMPInsertion4VolUpdate, MMPInsertion4Rate=@MMPInsertion4RateUpdate, MMPInsertion4Charges=@MMPInsertion4ChargesUpdate, MMPMixDesc=@MMPMixDescUpdate, MMPMixVol=@MMPMixVolUpdate, MMPMixRate=@MMPMixRateUpdate, MMPMixCharges=@MMPMixChargesUpdate, " +
                           "MMPStatementDesc=@MMPStatementDescUpdate, MMPStatementVol=@MMPStatementVolUpdate, MMPStatementRate=@MMPStatementRateUpdate, MMPStatementCharges=@MMPStatementChargesUpdate, MMPBrochure1Desc=@MMPBrochure1DescUpdate, MMPBrochure1Vol=@MMPBrochure1VolUpdate, MMPBrochure1Rate=@MMPBrochure1RateUpdate, " +
                           "MMPBrochure1Charges=@MMPBrochure1ChargesUpdate, MMPBrochure2Desc=@MMPBrochure2DescUpdate, MMPBrochure2Vol=@MMPBrochure2VolUpdate, MMPBrochure2Rate=@MMPBrochure2RateUpdate, MMPBrochure2Charges=@MMPBrochure2ChargesUpdate, MMPBrochure3Desc=@MMPBrochure3DescUpdate, MMPBrochure3Vol=@MMPBrochure3VolUpdate, " +
                           "MMPBrochure3Rate=@MMPBrochure3RateUpdate, MMPBrochure3Charges=@MMPBrochure3ChargesUpdate, MMPBrochure4Desc=@MMPBrochure4DescUpdate, MMPBrochure4Vol=@MMPBrochure4VolUpdate, MMPBrochure4Rate=@MMPBrochure4RateUpdate, MMPBrochure4Charges=@MMPBrochure4ChargesUpdate, MMPBrochure5Desc=@MMPBrochure5DescUpdate, " +
                           "MMPBrochure5Vol=@MMPBrochure5VolUpdate, MMPBrochure5Rate=@MMPBrochure5RateUpdate, MMPBrochure5Charges=@MMPBrochure5ChargesUpdate, MMPMB5KVol=@MMPMB5KVolUpdate, MMPMB5KRate=@MMPMB5KRateUpdate, MMPMB5KCharges=@MMPMB5KChargesUpdate, MMPInsertingVol=@MMPInsertingVolUpdate, MMPInsertingRate=@MMPInsertingRateUpdate, " +
                           "MMPInsertingCharges=@MMPInsertingChargesUpdate, MMPHandlingVol=@MMPHandlingVolUpdate, MMPHandlingRate=@MMPHandlingRateUpdate, MMPHandlingCharges=@MMPHandlingChargesUpdate, MMPSealingVol=@MMPSealingVolUpdate, MMPSealingRate=@MMPSealingRateUpdate, MMPSealingCharges=@MMPSealingChargesUpdate, MMPTearingVol=@MMPTearingVolUpdate, " +
                           "MMPTearingRate=@MMPTearingRateUpdate, MMPTearingCharges=@MMPTearingChargesUpdate, MMPFoldingVol=@MMPFoldingVolUpdate, MMPFoldingRate=@MMPFoldingRateUpdate, MMPFoldingCharges=@MMPFoldingChargesUpdate, MMPStockingVol=@MMPStockingVolUpdate, MMPStockingRate=@MMPStockingRateUpdate, MMPStockingCharges=@MMPStockingChargesUpdate, " +
                           "MMPLabellingVol=@MMPLabellingVolUpdate, MMPLabellingRate=@MMPLabellingRateUpdate, MMPLabellingCharges=@MMPLabellingChargesUpdate, MMPSelfMailerVol=@MMPSelfMailerVolUpdate, MMPSelfMailerRate=@MMPSelfMailerRateUpdate, MMPSelfMailerCharges=@MMPSelfMailerChargesUpdate, MMPSelfMaterialVol=@MMPSelfMaterialVolUpdate, " +
                           "MMPSelfMaterialRate=@MMPSelfMaterialRateUpdate, MMPSelfMaterialCharges=@MMPSelfMaterialChargesUpdate, MMPOvertimeVol=@MMPOvertimeVolUpdate, MMPOvertimeRate=@MMPOvertimeRateUpdate, MMPOvertimeCharges=@MMPOvertimeChargesUpdate, MMPCourierVol=@MMPCourierVolUpdate, MMPCourierRate=@MMPCourierRateUpdate, " +
                           "MMPCourierCharges=@MMPCourierChargesUpdate, MMPDeliveryVol=@MMPDeliveryVolUpdate, MMPDeliveryRate=@MMPDeliveryRateUpdate, MMPDeliveryCharges=@MMPDeliveryChargesUpdate, MMPMatchingVol=@MMPMatchingVolUpdate, MMPMatchingRate=@MMPMatchingRateUpdate, MMPMatchingCharges=@MMPMatchingChargesUpdate, " +
                           "MMPLabellingRMVol=@MMPLabellingRMVolUpdate, MMPLabellingRMRate=@MMPLabellingRMRateUpdate, MMPLabellingRMCharges=@MMPLabellingRMChargesUpdate, MMPIPDSVol=@MMPIPDSVolUpdate, MMPIPDSRate=@MMPIPDSRateUpdate, MMPIPDSCharges=@MMPIPDSChargesUpdate, MMPProgrammingVol=@MMPProgrammingVolUpdate, MMPProgrammingRate=@MMPProgrammingRateUpdate, " +
                           "MMPProgrammingCharges=@MMPProgrammingChargesUpdate, MMPReturnMailVol=@MMPReturnMailVolUpdate, MMPReturnMailRate=@MMPReturnMailRateUpdate, MMPReturnMailCharges=@MMPReturnMailChargesUpdate, MMPRetainerVol=@MMPRetainerVolUpdate, MMPRetainerRate=@MMPRetainerRateUpdate, MMPRetainerCharges=@MMPRetainerChargesUpdate, " +
                           "MMPRubberStampingVol=@MMPRubberStampingVolUpdate, MMPRubberStampingRate=@MMPRubberStampingRateUpdate, MMPRubberStampingCharges=@MMPRubberStampingChargesUpdate, MMPGlueingVol=@MMPGlueingVolUpdate, MMPGlueingRate=@MMPGlueingRateUpdate, MMPGlueingCharges=@MMPGlueingChargesUpdate, MMPCuttingVol=@MMPCuttingVolUpdate, " +
                           "MMPCuttingRate=@MMPCuttingRateUpdate, MMPCuttingCharges=@MMPCuttingChargesUpdate, MMPMergingVol=@MMPMergingVolUpdate, MMPMergingRate=@MMPMergingRateUpdate, MMPMergingCharges=@MMPMergingChargesUpdate, MMPDiscountVol=@MMPDiscountVolUpdate, MMPDiscountRate=@MMPDiscountRateUpdate, MMPDiscountCharges=@MMPDiscountChargesUpdate, " +
                           "MMPPostage1Desc=@MMPPostage1DescUpdate, MMPPostage1Vol=@MMPPostage1VolUpdate, MMPPostage1Rate=@MMPPostage1RateUpdate, MMPPostage1Charges=@MMPPostage1ChargesUpdate, MMPPostage2Desc=@MMPPostage2DescUpdate, MMPPostage2Vol=@MMPPostage2VolUpdate, MMPPostage2Rate=@MMPPostage2RateUpdate, MMPPostage2Charges=@MMPPostage2ChargesUpdate, " +
                           "MMPPostage3Desc=@MMPPostage3DescUpdate, MMPPostage3Vol=@MMPPostage3VolUpdate, MMPPostage3Rate=@MMPPostage3RateUpdate, MMPPostage3Charges=@MMPPostage3ChargesUpdate, MMPPostage4Desc=@MMPPostage4DescUpdate, MMPPostage4Vol=@MMPPostage4VolUpdate, MMPPostage4Rate=@MMPPostage4RateUpdate, MMPPostage4Charges=@MMPPostage4ChargesUpdate, " +
                           "MMPPostage5Desc=@MMPPostage5DescUpdate, MMPPostage5Vol=@MMPPostage5VolUpdate, MMPPostage5Rate=@MMPPostage5RateUpdate, MMPPostage5Charges=@MMPPostage5ChargesUpdate, MMPPostage6Desc=@MMPPostage6DescUpdate, MMPPostage6Vol=@MMPPostage6VolUpdate, MMPPostage6Rate=@MMPPostage6RateUpdate, MMPPostage6Charges=@MMPPostage6ChargesUpdate, " +
                           "MMPPostage7Desc=@MMPPostage7DescUpdate, MMPPostage7Vol=@MMPPostage7VolUpdate, MMPPostage7Rate=@MMPPostage7RateUpdate, MMPPostage7Charges=@MMPPostage7ChargesUpdate, MMPPostage8Desc=@MMPPostage8DescUpdate, MMPPostage8Vol=@MMPPostage8VolUpdate, MMPPostage8Rate=@MMPPostage8RateUpdate, MMPPostage8Charges=@MMPPostage8ChargesUpdate, " +
                           "MMPImprest1Desc=@MMPImprest1DescUpdate, MMPImprest1Vol=@MMPImprest1VolUpdate, MMPImprest1Rate=@MMPImprest1RateUpdate, MMPImprest1Charges=@MMPImprest1ChargesUpdate, MMPImprest2Desc=@MMPImprest2DescUpdate, MMPImprest2Vol=@MMPImprest2VolUpdate, MMPImprest2Rate=@MMPImprest2RateUpdate, MMPImprest2Charges=@MMPImprest2ChargesUpdate, " +
                           "MMPImprest3Desc=@MMPImprest3DescUpdate, MMPImprest3Vol=@MMPImprest3VolUpdate, MMPImprest3Rate=@MMPImprest3RateUpdate, MMPImprest3Charges=@MMPImprest3ChargesUpdate, MMPImprest4Desc=@MMPImprest4DescUpdate, MMPImprest4Vol=@MMPImprest4VolUpdate, MMPImprest4Rate=@MMPImprest4RateUpdate, MMPImprest4Charges=@MMPImprest4ChargesUpdate, " +
                           "MMPImprest5Desc=@MMPImprest5DescUpdate, MMPImprest5Vol=@MMPImprest5VolUpdate, MMPImprest5Rate=@MMPImprest5RateUpdate, MMPImprest5Charges=@MMPImprest5ChargesUpdate, MMPImprest6Desc=@MMPImprest6DescUpdate, MMPImprest6Vol=@MMPImprest6VolUpdate, MMPImprest6Rate=@MMPImprest6RateUpdate, MMPImprest6Charges=@MMPImprest6ChargesUpdate, " +
                           "MMPImprest7Desc=@MMPImprest7DescUpdate, MMPImprest7Vol=@MMPImprest7VolUpdate, MMPImprest7Rate=@MMPImprest7RateUpdate, MMPImprest7Charges=@MMPImprest7ChargesUpdate, MMPImprest8Desc=@MMPImprest8DescUpdate, MMPImprest8Vol=@MMPImprest8VolUpdate, MMPImprest8Rate=@MMPImprest8RateUpdate, MMPImprest8Charges=@MMPImprest8ChargesUpdate, " +
                           "MMPRebateDesc=@MMPRebateDescUpdate, MMPRebateVol=@MMPRebateVolUpdate, MMPRebateRate=@MMPRebateRateUpdate, MMPRebateCharges=@MMPRebateChargesUpdate, MMPFrankingDesc=@MMPFrankingDescUpdate, MMPFrankingVol=@MMPFrankingVolUpdate, MMPFrankingRate=@MMPFrankingRateUpdate, MMPFrankingCharges=@MMPFrankingChargesUpdate, " +
                           "MMPFranking10Desc=@MMPFranking10DescUpdate, MMPFranking10Vol=@MMPFranking10VolUpdate, MMPFranking10Rate=@MMPFranking10RateUpdate, MMPFranking10Charges=@MMPFranking10ChargesUpdate, MMPAirmailDesc=@MMPAirmailDescUpdate, MMPAirmailVol=@MMPAirmailVolUpdate, MMPAirmailRate=@MMPAirmailRateUpdate, " +
                           "MMPAirmailCharges=@MMPAirmailChargesUpdate, MMPSporeDesc=@MMPSporeDescUpdate, MMPSporeVol=@MMPSporeVolUpdate, MMPSporeRate=@MMPSporeRateUpdate, MMPSporeCharges=@MMPSporeChargesUpdate, MMPTLetterDesc=@MMPTLetterDescUpdate, MMPTLetterVol=@MMPTLetterVolUpdate, MMPTLetterRate=@MMPTLetterRateUpdate, MMPTLetterCharges=@MMPTLetterChargesUpdate, " +
                           "MMPNPCDesc=@MMPNPCDescUpdate, MMPNPCVol=@MMPNPCVolUpdate, MMPNPCRate=@MMPNPCRateUpdate, MMPNPCCharges=@MMPNPCChargesUpdate, MMPMix10Desc=@MMPMix10DescUpdate, MMPMix10Vol=@MMPMix10VolUpdate, MMPMix10Rate=@MMPMix10RateUpdate, MMPMix10Charges=@MMPMix10ChargesUpdate, MMPRegisteredMailsDesc=@MMPRegisteredMailsDescUpdate, " +
                           "MMPRegisteredMailsVol=@MMPRegisteredMailsVolUpdate, MMPRegisteredMailsRate=@MMPRegisteredMailsRateUpdate, MMPRegisteredMailsCharges=@MMPRegisteredMailsChargesUpdate, MMPRegisteredMails2Desc=@MMPRegisteredMails2DescUpdate, MMPRegisteredMails2Vol=@MMPRegisteredMails2VolUpdate, " +
                           "MMPRegisteredMails2Rate=@MMPRegisteredMails2RateUpdate, MMPRegisteredMails2Charges=@MMPRegisteredMails2ChargesUpdate, MMPImprestRMDesc=@MMPImprestRMDescUpdate, MMPImprestRMVol=@MMPImprestRMVolUpdate, MMPImprestRMRate=@MMPImprestRMRateUpdate, MMPImprestRMCharges=@MMPImprestRMChargesUpdate, " +
                           "MMPImprestRM2Desc=@MMPImprestRM2DescUpdate, MMPImprestRM2Vol=@MMPImprestRM2VolUpdate, MMPImprestRM2Rate=@MMPImprestRM2RateUpdate, MMPImprestRM2Charges=@MMPImprestRM2ChargesUpdate, AdditionalMMP=@AdditionalServiceMMPUpdate, MMPDataSFTPVol=@MMPDataSFTPVolUpdate, MMPDataSFTPRate=@MMPDataSFTPRateUpdate, MMPDataSFTPCharges=@MMPDataSFTPChargesUpdate, MMPCDArchivingVol=@MMPCDArchivingVolUpdate, MMPCDArchivingRate=@MMPCDArchivingRateUpdate, MMPCDArchivingCharges=@MMPCDArchivingChargesUpdate WHERE JobSheetNo=@MMPJobSheetNoUpdate", cn);

                        {


                            if (!string.IsNullOrEmpty(LogTagNo))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPJobSheetNoUpdate", LogTagNo);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPJobSheetNoUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPCDArchivingVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPCDArchivingVolUpdate", MMPCDArchivingVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPCDArchivingVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPCDArchivingRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPCDArchivingRateUpdate", MMPCDArchivingRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPCDArchivingRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPCDArchivingCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPCDArchivingChargesUpdate", MMPCDArchivingCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPCDArchivingChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPosting1Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPosting1DescUpdate", MMPPosting1Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPosting1DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPosting1Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPosting1VolUpdate", MMPPosting1Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPosting1VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPosting1Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPosting1RateUpdate", MMPPosting1Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPosting1RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPosting1Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPosting1ChargesUpdate", MMPPosting1Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPosting1ChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPosting2Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPosting2DescUpdate", MMPPosting2Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPosting2DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPosting2Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPosting2VolUpdate", MMPPosting2Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPosting2VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPosting2Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPosting2RateUpdate", MMPPosting2Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPosting2RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPosting2Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPosting2ChargesUpdate", MMPPosting2Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPosting2ChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion1Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion1DescUpdate", MMPInsertion1Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion1DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion1Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion1VolUpdate", MMPInsertion1Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion1VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion1Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion1RateUpdate", MMPInsertion1Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion1RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion1Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion1ChargesUpdate", MMPInsertion1Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion1ChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion2Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion2DescUpdate", MMPInsertion2Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion2DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion2Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion2VolUpdate", MMPInsertion2Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion2VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion2Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion2RateUpdate", MMPInsertion2Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion2RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion2Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion2ChargesUpdate", MMPInsertion2Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion2ChargesUpdate", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPInsertion3Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion3DescUpdate", MMPInsertion3Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion3DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion3Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion3VolUpdate", MMPInsertion3Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion3VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion3Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion3RateUpdate", MMPInsertion3Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion3RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion3Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion3ChargesUpdate", MMPInsertion3Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion3ChargesUpdate", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPInsertion4Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion4DescUpdate", MMPInsertion4Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion4DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion4Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion4VolUpdate", MMPInsertion4Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion4VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion4Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion4RateUpdate", MMPInsertion4Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion4RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertion4Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion4ChargesUpdate", MMPInsertion4Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertion4ChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMixDesc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMixDescUpdate", MMPMixDesc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMixDescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMixVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMixVolUpdate", MMPMixVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMixVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMixRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMixRateUpdate", MMPMixRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMixRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMixCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMixChargesUpdate", MMPMixCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMixChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPStatementDesc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPStatementDescUpdate", MMPStatementDesc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPStatementDescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPStatementVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPStatementVolUpdate", MMPStatementVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPStatementVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPStatementRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPStatementRateUpdate", MMPStatementRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPStatementRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPStatementCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPStatementChargesUpdate", MMPStatementCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPStatementChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure1Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure1DescUpdate", MMPBrochure1Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure1DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure1Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure1VolUpdate", MMPBrochure1Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure1VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure1Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure1RateUpdate", MMPBrochure1Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure1RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure1Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure1ChargesUpdate", MMPBrochure1Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure1ChargesUpdate", DBNull.Value);
                            }

                            // Brochure2
                            if (!string.IsNullOrEmpty(MMPBrochure2Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure2DescUpdate", MMPBrochure2Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure2DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure2Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure2VolUpdate", MMPBrochure2Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure2VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure2Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure2RateUpdate", MMPBrochure2Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure2RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure2Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure2ChargesUpdate", MMPBrochure2Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure2ChargesUpdate", DBNull.Value);
                            }

                            // Brochure3
                            if (!string.IsNullOrEmpty(MMPBrochure3Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure3DescUpdate", MMPBrochure3Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure3DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure3Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure3VolUpdate", MMPBrochure3Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure3VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure3Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure3RateUpdate", MMPBrochure3Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure3RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure3Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure3ChargesUpdate", MMPBrochure3Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure3ChargesUpdate", DBNull.Value);
                            }

                            // Brochure4
                            if (!string.IsNullOrEmpty(MMPBrochure4Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure4DescUpdate", MMPBrochure4Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure4DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure4Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure4VolUpdate", MMPBrochure4Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure4VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure4Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure4RateUpdate", MMPBrochure4Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure4RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure4Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure4ChargesUpdate", MMPBrochure4Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure4ChargesUpdate", DBNull.Value);
                            }

                            // Brochure5
                            if (!string.IsNullOrEmpty(MMPBrochure5Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure5DescUpdate", MMPBrochure5Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure5DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure5Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure5VolUpdate", MMPBrochure5Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure5VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure5Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure5RateUpdate", MMPBrochure5Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure5RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPBrochure5Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure5ChargesUpdate", MMPBrochure5Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPBrochure5ChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMB5KVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMB5KVolUpdate", MMPMB5KVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMB5KVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMB5KRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMB5KRateUpdate", MMPMB5KRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMB5KRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMB5KCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMB5KChargesUpdate", MMPMB5KCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMB5KChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertingVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertingVolUpdate", MMPInsertingVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertingVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertingRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertingRateUpdate", MMPInsertingRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertingRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPInsertingCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertingChargesUpdate", MMPInsertingCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPInsertingChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPHandlingVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPHandlingVolUpdate", MMPHandlingVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPHandlingVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPHandlingRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPHandlingRateUpdate", MMPHandlingRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPHandlingRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPHandlingCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPHandlingChargesUpdate", MMPHandlingCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPHandlingChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSealingVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSealingVolUpdate", MMPSealingVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSealingVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSealingRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSealingRateUpdate", MMPSealingRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSealingRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSealingCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSealingChargesUpdate", MMPSealingCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSealingChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPTearingVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPTearingVolUpdate", MMPTearingVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPTearingVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPTearingRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPTearingRateUpdate", MMPTearingRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPTearingRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPTearingCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPTearingChargesUpdate", MMPTearingCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPTearingChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFoldingVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFoldingVolUpdate", MMPFoldingVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFoldingVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFoldingRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFoldingRateUpdate", MMPFoldingRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFoldingRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFoldingCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFoldingChargesUpdate", MMPFoldingCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFoldingChargesUpdate", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPStickingVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPStockingVolUpdate", MMPStickingVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPStockingVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPStickingRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPStockingRateUpdate", MMPStickingRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPStockingRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPStickingCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPStockingChargesUpdate", MMPStickingCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPStockingChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPLabellingVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPLabellingVolUpdate", MMPLabellingVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPLabellingVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPLabellingRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPLabellingRateUpdate", MMPLabellingRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPLabellingRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPLabellingCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPLabellingChargesUpdate", MMPLabellingCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPLabellingChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPLabellingRMVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPLabellingRMVolUpdate", MMPLabellingRMVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPLabellingRMVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPLabellingRMRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPLabellingRMRateUpdate", MMPLabellingRMRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPLabellingRMRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPLabellingRMCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPLabellingRMChargesUpdate", MMPLabellingRMCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPLabellingRMChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSelfMailerVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSelfMailerVolUpdate", MMPSelfMailerVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSelfMailerVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSelfMailerRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSelfMailerRateUpdate", MMPSelfMailerRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSelfMailerRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSelfMailerCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSelfMailerChargesUpdate", MMPSelfMailerCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSelfMailerChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSelfMaterialVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSelfMaterialVolUpdate", MMPSelfMaterialVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSelfMaterialVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSelfMaterialRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSelfMaterialRateUpdate", MMPSelfMaterialRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSelfMaterialRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSelfMaterialCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSelfMaterialChargesUpdate", MMPSelfMaterialCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSelfMaterialChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPOvertimeVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPOvertimeVolUpdate", MMPOvertimeVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPOvertimeVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPOvertimeRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPOvertimeRateUpdate", MMPOvertimeRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPOvertimeRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPOvertimeCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPOvertimeChargesUpdate", MMPOvertimeCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPOvertimeChargesUpdate", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPCourierVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPCourierVolUpdate", MMPCourierVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPCourierVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPCourierRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPCourierRateUpdate", MMPCourierRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPCourierRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPCourierCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPCourierChargesUpdate", MMPCourierCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPCourierChargesUpdate", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPDeliveryVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPDeliveryVolUpdate", MMPDeliveryVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPDeliveryVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPDeliveryRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPDeliveryRateUpdate", MMPDeliveryRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPDeliveryRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPDeliveryCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPDeliveryChargesUpdate", MMPDeliveryCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPDeliveryChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMatchingVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMatchingVolUpdate", MMPMatchingVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMatchingVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMatchingRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMatchingRateUpdate", MMPMatchingRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMatchingRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMatchingCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMatchingChargesUpdate", MMPMatchingCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMatchingChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPIPDSVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPIPDSVolUpdate", MMPIPDSVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPIPDSVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPIPDSRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPIPDSRateUpdate", MMPIPDSRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPIPDSRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPIPDSCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPIPDSChargesUpdate", MMPIPDSCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPIPDSChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPProgrammingVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPProgrammingVolUpdate", MMPProgrammingVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPProgrammingVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPProgrammingRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPProgrammingRateUpdate", MMPProgrammingRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPProgrammingRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPProgrammingCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPProgrammingChargesUpdate", MMPProgrammingCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPProgrammingChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPReturnMailVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPReturnMailVolUpdate", MMPReturnMailVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPReturnMailVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPReturnMailRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPReturnMailRateUpdate", MMPReturnMailRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPReturnMailRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPReturnMailCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPReturnMailChargesUpdate", MMPReturnMailCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPReturnMailChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRetainerVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRetainerVolUpdate", MMPRetainerVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRetainerVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRetainerRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRetainerRateUpdate", MMPRetainerRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRetainerRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRetainerCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRetainerChargesUpdate", MMPRetainerCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRetainerChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRubberStampingVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRubberStampingVolUpdate", MMPRubberStampingVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRubberStampingVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRubberStampingRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRubberStampingRateUpdate", MMPRubberStampingRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRubberStampingRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRubberStampingCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRubberStampingChargesUpdate", MMPRubberStampingCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRubberStampingChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPGlueingVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPGlueingVolUpdate", MMPGlueingVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPGlueingVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPGlueingRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPGlueingRateUpdate", MMPGlueingRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPGlueingRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPGlueingCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPGlueingChargesUpdate", MMPGlueingCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPGlueingChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPCuttingVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPCuttingVolUpdate", MMPCuttingVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPCuttingVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPCuttingRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPCuttingRateUpdate", MMPCuttingRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPCuttingRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPCuttingCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPCuttingChargesUpdate", MMPCuttingCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPCuttingChargesUpdate", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPMergingVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMergingVolUpdate", MMPMergingVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMergingVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMergingRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMergingRateUpdate", MMPMergingRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMergingRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMergingCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMergingChargesUpdate", MMPMergingCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMergingChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPDiscountVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPDiscountVolUpdate", MMPDiscountVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPDiscountVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPDiscountRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPDiscountRateUpdate", MMPDiscountRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPDiscountRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPDiscountCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPDiscountChargesUpdate", MMPDiscountCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPDiscountChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage1Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage1DescUpdate", MMPPostage1Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage1DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage1Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage1VolUpdate", MMPPostage1Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage1VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage1Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage1RateUpdate", MMPPostage1Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage1RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage1Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage1ChargesUpdate", MMPPostage1Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage1ChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage2Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage2DescUpdate", MMPPostage2Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage2DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage2Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage2VolUpdate", MMPPostage2Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage2VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage2Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage2RateUpdate", MMPPostage2Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage2RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage2Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage2ChargesUpdate", MMPPostage2Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage2ChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage3Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage3DescUpdate", MMPPostage3Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage3DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage3Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage3VolUpdate", MMPPostage3Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage3VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage3Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage3RateUpdate", MMPPostage3Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage3RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage3Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage3ChargesUpdate", MMPPostage3Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage3ChargesUpdate", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPPostage4Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage4DescUpdate", MMPPostage4Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage4DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage4Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage4VolUpdate", MMPPostage4Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage4VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage4Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage4RateUpdate", MMPPostage4Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage4RateUpdate", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPPostage4Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage4ChargesUpdate", MMPPostage4Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage4ChargesUpdate", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPPostage5Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage5DescUpdate", MMPPostage5Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage5DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage5Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage5VolUpdate", MMPPostage5Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage5VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage5Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage5RateUpdate", MMPPostage5Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage5RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage5Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage5ChargesUpdate", MMPPostage5Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage5ChargesUpdate", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPPostage6Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage6DescUpdate", MMPPostage6Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage6DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage6Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage6VolUpdate", MMPPostage6Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage6VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage6Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage6RateUpdate", MMPPostage6Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage6RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage6Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage6ChargesUpdate", MMPPostage6Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage6ChargesUpdate", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPPostage7Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage7DescUpdate", MMPPostage7Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage7DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage7Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage7VolUpdate", MMPPostage7Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage7VolUpdate", DBNull.Value);

                            }

                            if (!string.IsNullOrEmpty(MMPPostage7Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage7RateUpdate", MMPPostage7Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage7RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage7Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage7ChargesUpdate", MMPPostage7Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage7ChargesUpdate", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPPostage8Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage8DescUpdate", MMPPostage8Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage8DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage8Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage8VolUpdate", MMPPostage8Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage8VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage8Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage8RateUpdate", MMPPostage8Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage8RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPPostage8Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage8ChargesUpdate", MMPPostage8Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPPostage8ChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest1Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest1DescUpdate", MMPImprest1Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest1DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest1Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest1VolUpdate", MMPImprest1Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest1VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest1Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest1RateUpdate", MMPImprest1Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest1RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest1Charges))
                            {
                                if (MMPImprest1Charges.Contains("-"))
                                {
                                    cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest1ChargesUpdate", MMPImprest1Charges);

                                }
                                else
                                {
                                    string ConvertNegative = "-" + MMPImprest1Charges;
                                    cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest1ChargesUpdate", ConvertNegative);
                                }
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest1ChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest2Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest2DescUpdate", MMPImprest2Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest2DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest2Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest2VolUpdate", MMPImprest2Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest2VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest2Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest2RateUpdate", MMPImprest2Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest2RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest2Charges))
                            {
                                if (MMPImprest2Charges.Contains("-"))
                                {
                                    cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest2ChargesUpdate", MMPImprest2Charges);

                                }
                                else
                                {
                                    string ConvertNegative = "-" + MMPImprest2Charges;
                                    cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest2ChargesUpdate", ConvertNegative);
                                }
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest2ChargesUpdate", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPImprest3Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest3DescUpdate", MMPImprest3Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest3DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest3Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest3VolUpdate", MMPImprest3Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest3VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest3Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest3RateUpdate", MMPImprest3Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest3RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest3Charges))
                            {
                                if (MMPImprest3Charges.Contains("-"))
                                {
                                    cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest3ChargesUpdate", MMPImprest3Charges);

                                }
                                else
                                {
                                    string ConvertNegative = "-" + MMPImprest3Charges;
                                    cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest3ChargesUpdate", ConvertNegative);
                                }
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest3ChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest4Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest4DescUpdate", MMPImprest4Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest4DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest4Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest4VolUpdate", MMPImprest4Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest4VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest4Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest4RateUpdate", MMPImprest4Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest4RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest4Charges))
                            {
                                if (MMPImprest4Charges.Contains("-"))
                                {
                                    cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest4ChargesUpdate", MMPImprest4Charges);

                                }
                                else
                                {
                                    string ConvertNegative = "-" + MMPImprest4Charges;
                                    cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest4ChargesUpdate", ConvertNegative);
                                }
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest4ChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest5Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest5DescUpdate", MMPImprest5Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest5DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest5Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest5VolUpdate", MMPImprest5Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest5VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest5Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest5RateUpdate", MMPImprest5Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest5RateUpdate", DBNull.Value);
                            }
                            if (!string.IsNullOrEmpty(MMPImprest5Charges))
                            {
                                if (MMPImprest5Charges.Contains("-"))
                                {
                                    cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest5ChargesUpdate", MMPImprest5Charges);

                                }
                                else
                                {
                                    string ConvertNegative = "-" + MMPImprest5Charges;
                                    cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest5ChargesUpdate", ConvertNegative);
                                }
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest5ChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest6Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest6DescUpdate", MMPImprest6Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest6DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest6Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest6VolUpdate", MMPImprest6Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest6VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest6Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest6RateUpdate", MMPImprest6Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest6RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest6Charges))
                            {
                                if (MMPImprest6Charges.Contains("-"))
                                {
                                    cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest6ChargesUpdate", MMPImprest6Charges);

                                }
                                else
                                {
                                    string ConvertNegative = "-" + MMPImprest6Charges;
                                    cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest6ChargesUpdate", ConvertNegative);
                                }
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest6ChargesUpdate", DBNull.Value);
                            }
                            if (!string.IsNullOrEmpty(MMPImprest7Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest7DescUpdate", MMPImprest7Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest7DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest7Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest7VolUpdate", MMPImprest7Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest7VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest7Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest7RateUpdate", MMPImprest7Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest7RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest7Charges))
                            {
                                if (MMPImprest7Charges.Contains("-"))
                                {
                                    cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest7ChargesUpdate", MMPImprest7Charges);

                                }
                                else
                                {
                                    string ConvertNegative = "-" + MMPImprest7Charges;
                                    cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest7ChargesUpdate", ConvertNegative);
                                }
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest7ChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest8Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest8DescUpdate", MMPImprest8Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest8DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest8Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest8VolUpdate", MMPImprest8Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest8VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest8Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest8RateUpdate", MMPImprest8Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest8RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprest8Charges))
                            {
                                if (MMPImprest8Charges.Contains("-"))
                                {
                                    cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest8ChargesUpdate", MMPImprest8Charges);

                                }
                                else
                                {
                                    string ConvertNegative = "-" + MMPImprest8Charges;
                                    cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest8ChargesUpdate", ConvertNegative);
                                }
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprest8ChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRebateDesc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRebateDescUpdate", MMPRebateDesc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRebateDescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRebateVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRebateVolUpdate", MMPRebateVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRebateVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRebateRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRebateRateUpdate", MMPRebateRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRebateRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRebateCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRebateChargesUpdate", MMPRebateCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRebateChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFrankingDesc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFrankingDescUpdate", MMPFrankingDesc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFrankingDescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFrankingVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFrankingVolUpdate", MMPFrankingVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFrankingVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFrankingRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFrankingRateUpdate", MMPFrankingRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFrankingRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFrankingCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFrankingChargesUpdate", MMPFrankingCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFrankingChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFranking10Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFranking10DescUpdate", MMPFranking10Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFranking10DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFranking10Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFranking10VolUpdate", MMPFranking10Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFranking10VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFranking10Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFranking10RateUpdate", MMPFranking10Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFranking10RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPFranking10Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFranking10ChargesUpdate", MMPFranking10Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPFranking10ChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPAirmailDesc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPAirmailDescUpdate", MMPAirmailDesc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPAirmailDescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPAirmailVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPAirmailVolUpdate", MMPAirmailVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPAirmailVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPAirmailRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPAirmailRateUpdate", MMPAirmailRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPAirmailRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPAirmailCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPAirmailChargesUpdate", MMPAirmailCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPAirmailChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSporeDesc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSporeDescUpdate", MMPSporeDesc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSporeDescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSporeVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSporeVolUpdate", MMPSporeVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSporeVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSporeRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSporeRateUpdate", MMPSporeRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSporeRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPSporeCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSporeChargesUpdate", MMPSporeCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPSporeChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPTLetterDesc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPTLetterDescUpdate", MMPTLetterDesc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPTLetterDescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPTLetterVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPTLetterVolUpdate", MMPTLetterVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPTLetterVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPTLetterRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPTLetterRateUpdate", MMPTLetterRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPTLetterRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPTLetterCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPTLetterChargesUpdate", MMPTLetterCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPTLetterChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPNPCDesc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPNPCDescUpdate", MMPNPCDesc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPNPCDescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPNPCVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPNPCVolUpdate", MMPNPCVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPNPCVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPNPCRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPNPCRateUpdate", MMPNPCRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPNPCRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPNPCCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPNPCChargesUpdate", MMPNPCCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPNPCChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMix10Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMix10DescUpdate", MMPMix10Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMix10DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMix10Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMix10VolUpdate", MMPMix10Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMix10VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMix10Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMix10RateUpdate", MMPMix10Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMix10RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPMix10Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMix10ChargesUpdate", MMPMix10Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPMix10ChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRegisteredMailsDesc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRegisteredMailsDescUpdate", MMPRegisteredMailsDesc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRegisteredMailsDescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRegisteredMailsVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRegisteredMailsVolUpdate", MMPRegisteredMailsVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRegisteredMailsVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRegisteredMailsRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRegisteredMailsRateUpdate", MMPRegisteredMailsRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRegisteredMailsRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRegisteredMailsCharges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRegisteredMailsChargesUpdate", MMPRegisteredMailsCharges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRegisteredMailsChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprestRMDesc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprestRMDescUpdate", MMPImprestRMDesc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprestRMDescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprestRMVol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprestRMVolUpdate", MMPImprestRMVol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprestRMVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprestRMRate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprestRMRateUpdate", MMPImprestRMRate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprestRMRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprestRMCharges))
                            {
                                if (MMPImprestRMCharges.Contains("-"))
                                {
                                    cmdUpdateMMP.Parameters.AddWithValue("@MMPImprestRMChargesUpdate", MMPImprestRMCharges);

                                }
                                else
                                {
                                    string ConvertNegative = "-" + MMPImprestRMCharges;
                                    cmdUpdateMMP.Parameters.AddWithValue("@MMPImprestRMChargesUpdate", ConvertNegative);
                                }
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprestRMChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRegisteredMails2Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRegisteredMails2DescUpdate", MMPRegisteredMails2Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRegisteredMails2DescUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRegisteredMails2Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRegisteredMails2VolUpdate", MMPRegisteredMails2Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRegisteredMails2VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRegisteredMails2Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRegisteredMails2RateUpdate", MMPRegisteredMails2Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRegisteredMails2RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPRegisteredMails2Charges))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRegisteredMails2ChargesUpdate", MMPRegisteredMails2Charges);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPRegisteredMails2ChargesUpdate", DBNull.Value);
                            }


                            if (!string.IsNullOrEmpty(MMPImprestRM2Desc))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprestRM2DescUpdate", MMPImprestRM2Desc);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprestRM2DescUpdate", DBNull.Value);

                            }

                            if (!string.IsNullOrEmpty(MMPImprestRM2Vol))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprestRM2VolUpdate", MMPImprestRM2Vol);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprestRM2VolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprestRM2Rate))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprestRM2RateUpdate", MMPImprestRM2Rate);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprestRM2RateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(MMPImprestRM2Charges))
                            {
                                if (MMPImprestRM2Charges.Contains("-"))
                                {
                                    cmdUpdateMMP.Parameters.AddWithValue("@MMPImprestRM2ChargesUpdate", MMPImprestRM2Charges);

                                }
                                else
                                {
                                    string ConvertNegative = "-" + MMPImprestRM2Charges;
                                    cmdUpdateMMP.Parameters.AddWithValue("@MMPImprestRM2ChargesUpdate", ConvertNegative);
                                }
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPImprestRM2ChargesUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(AdditionalServiceMMP))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@AdditionalServiceMMPUpdate", AdditionalServiceMMP);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@AdditionalServiceMMPUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(DataSFTPVolMMP))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPDataSFTPVolUpdate", DataSFTPVolMMP);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPDataSFTPVolUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(DataSFTPRateMMP))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPDataSFTPRateUpdate", DataSFTPRateMMP);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPDataSFTPRateUpdate", DBNull.Value);
                            }

                            if (!string.IsNullOrEmpty(DataSFTPChargesMMP))
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPDataSFTPChargesUpdate", DataSFTPChargesMMP);
                            }
                            else
                            {
                                cmdUpdateMMP.Parameters.AddWithValue("@MMPDataSFTPChargesUpdate", DBNull.Value);
                            }
                        }


                        cmdUpdateMMP.ExecuteNonQuery();
                    }

                }
                if (BatchId != null)
                {
                    return RedirectToAction("ManageBatch", "Finance");
                    //return RedirectToAction("ViewMPRBatch", new { BatchId = BatchId, Customer_Name = Customer_Name });
                }
                else
                {
                    return RedirectToAction("ManageFin", "Finance");

                    //return RedirectToAction("ViewMPRNew", new { LogTagNo = LogTagNo, JobSheetNo = JobSheetNo });

                }

            }
            //Debug.WriteLine("AdditionalMMP Value : " + AdditionalServiceMMP);




            SqlCommand cmdView = new SqlCommand("SELECT Posting1Desc,Posting1Vol,Posting1Rate,Posting1Charges,Posting2Desc,Posting2Vol,Posting2Rate,Posting2Charges,Insertion1Desc,Insertion1Vol, Insertion1Rate,Insertion1Charges, " +
                "Insertion2Desc,Insertion2Vol,Insertion2Rate,Insertion2Charges, Insertion3Desc,Insertion3Vol,Insertion3Rate,Insertion3Charges, Insertion4Desc,Insertion4Vol,Insertion4Rate,Insertion4Charges,MixDesc,MixVol,MixRate," +
                "MixCharges,StatementDesc,StatementVol,StatementRate,StatementCharges,Brochure1Desc,Brochure1Vol,Brochure1Rate,Brochure1Charges,Brochure2Desc,Brochure2Vol,Brochure2Rate,Brochure2Charges,Brochure3Desc,Brochure3Vol," +
                "Brochure3Rate,Brochure3Charges,Brochure4Desc,Brochure4Vol,Brochure4Rate,Brochure4Charges,Brochure5Desc,Brochure5Vol,Brochure5Rate,Brochure5Charges,MB5KVol,MB5KRate,MB5KCharges,InsertingVol,InsertingRate,InsertingCharges," +
                "HandlingVol,HandlingRate,HandlingCharges,SealingVol,SealingRate,SealingCharges,TearingVol,TearingRate,TearingCharges,FoldingVol,FoldingRate,FoldingCharges,StockingVol,StockingRate,StockingCharges,LabellingVol,LabellingRate, " +
                "LabellingCharges,SelfMailerVol,SelfMailerRate,SelfMailerCharges,SelfMaterialVol,SelfMaterialRate,SelfMaterialCharges,OvertimeVol,OvertimeRate,OvertimeCharges,CourierVol,CourierRate,CourierCharges,DeliveryVol,DeliveryRate," +
                "DeliveryCharges,MatchingVol,MatchingRate,MatchingCharges,LabellingRMVol,LabellingRMRate,LabellingRMCharges,IPDSVol,IPDSRate,IPDSCharges,ProgrammingVol,ProgrammingRate,ProgrammingCharges,ReturnMailVol,ReturnMailRate,ReturnMailCharges," +
                "RetainerVol,RetainerRate,RetainerCharges,RubberStampingVol,RubberStampingRate,RubberStampingCharges,GlueingVol,GlueingRate,GlueingCharges,CuttingVol,CuttingRate,CuttingCharges,MergingVol,MergingRate,MergingCharges,DiscountVol,DiscountRate,DiscountCharges," +
                "Postage1Desc, Postage1Vol, Postage1Rate, Postage1Charges, Postage2Desc, Postage2Vol, Postage2Rate, Postage2Charges, Postage3Desc, Postage3Vol, Postage3Rate, Postage3Charges, Postage4Desc, Postage4Vol, Postage4Rate, Postage4Charges, Postage5Desc, Postage5Vol, " +
                "Postage5Rate, Postage5Charges, Postage6Desc, Postage6Vol, Postage6Rate, Postage6Charges, Postage7Desc, Postage7Vol, Postage7Rate, Postage7Charges, Postage8Desc, Postage8Vol, Postage8Rate, Postage8Charges,Imprest1Desc, Imprest1Vol, Imprest1Rate, Imprest1Charges, " +
                "Imprest2Desc, Imprest2Vol, Imprest2Rate, Imprest2Charges, Imprest3Desc, Imprest3Vol, Imprest3Rate, Imprest3Charges, Imprest4Desc, Imprest4Vol, Imprest4Rate, Imprest4Charges, Imprest5Desc, Imprest5Vol, Imprest5Rate, Imprest5Charges, Imprest6Desc, Imprest6Vol, " +
                "Imprest6Rate, Imprest6Charges, Imprest7Desc, Imprest7Vol, Imprest7Rate, Imprest7Charges, Imprest8Desc, Imprest8Vol, Imprest8Rate, Imprest8Charges,RebateDesc, RebateVol, RebateRate, RebateCharges, FrankingDesc, FrankingVol, FrankingRate, FrankingCharges, Franking10Desc, " +
                "Franking10Vol, Franking10Rate, Franking10Charges, AirmailDesc, AirmailVol, AirmailRate, AirmailCharges, SporeDesc, SporeVol, SporeRate, SporeCharges, TLetterDesc, TLetterVol, TLetterRate, TLetterCharges, NPCDesc, NPCVol, NPCRate, NPCCharges, Mix10Desc, Mix10Vol, Mix10Rate, " +
                "Mix10Charges, RegisteredMailsDesc, RegisteredMailsVol, RegisteredMailsRate, RegisteredMailsCharges, RegisteredMails2Desc, RegisteredMails2Vol, RegisteredMails2Rate, RegisteredMails2Charges,ImprestRMDesc, ImprestRMVol, ImprestRMRate, ImprestRMCharges, " +
                "ImprestRM2Desc, ImprestRM2Vol, ImprestRM2Rate, ImprestRM2Charges, DataSFTPVol, DataSFTPRate, DataSFTPCharges, CDArchivingVol, CDArchivingRate, CDArchivingCharges" +
                " FROM BillingMPR WHERE JobSheetNo=@JobSheetNo2", cn);

            if (BatchId != null)
            {
                cmdView.Parameters.AddWithValue("@JobSheetNo2", BatchId);

            }
            else
            {
                cmdView.Parameters.AddWithValue("@JobSheetNo2", LogTagNo);

            }
            SqlDataReader rmView = cmdView.ExecuteReader();

            while (rmView.Read())
            {
                if (!rmView.IsDBNull(0))
                {
                    ViewBag.Posting1Desc = rmView.GetString(0);

                }
                if (!rmView.IsDBNull(0))
                {
                    ViewBag.Posting1Desc = rmView.GetString(0);
                }
                if (!rmView.IsDBNull(1))
                {
                    ViewBag.Posting1Vol = rmView.GetString(1);
                }
                if (!rmView.IsDBNull(2))
                {
                    ViewBag.Posting1Rate = rmView.GetString(2);
                }
                if (!rmView.IsDBNull(3))
                {
                    ViewBag.Posting1Charges = rmView.GetString(3);
                }
                if (!rmView.IsDBNull(4))
                {
                    ViewBag.Posting2Desc = rmView.GetString(4);
                }
                if (!rmView.IsDBNull(5))
                {
                    ViewBag.Posting2Vol = rmView.GetString(5);
                }
                if (!rmView.IsDBNull(6))
                {
                    ViewBag.Posting2Rate = rmView.GetString(6);
                }
                if (!rmView.IsDBNull(7))
                {
                    ViewBag.Posting2Charges = rmView.GetString(7);
                }
                if (!rmView.IsDBNull(8))
                {
                    ViewBag.Insertion1Desc = rmView.GetString(8);
                }
                if (!rmView.IsDBNull(9))
                {
                    ViewBag.Insertion1Vol = rmView.GetString(9);
                }
                if (!rmView.IsDBNull(10))
                {
                    ViewBag.Insertion1Rate = rmView.GetString(10);
                }
                if (!rmView.IsDBNull(11))
                {
                    ViewBag.Insertion1Charges = rmView.GetString(11);
                }
                if (!rmView.IsDBNull(12))
                {
                    ViewBag.Insertion2Desc = rmView.GetString(12);
                }
                if (!rmView.IsDBNull(13))
                {
                    ViewBag.Insertion2Vol = rmView.GetString(13);
                }
                if (!rmView.IsDBNull(14))
                {
                    ViewBag.Insertion2Rate = rmView.GetString(14);
                }
                if (!rmView.IsDBNull(15))
                {
                    ViewBag.Insertion2Charges = rmView.GetString(15);
                }
                if (!rmView.IsDBNull(16))
                {
                    ViewBag.Insertion3Desc = rmView.GetString(16);
                }
                if (!rmView.IsDBNull(17))
                {
                    ViewBag.Insertion3Vol = rmView.GetString(17);
                }
                if (!rmView.IsDBNull(18))
                {
                    ViewBag.Insertion3Rate = rmView.GetString(18);
                }
                if (!rmView.IsDBNull(19))
                {
                    ViewBag.Insertion3Charges = rmView.GetString(19);
                }
                if (!rmView.IsDBNull(20))
                {
                    ViewBag.Insertion4Desc = rmView.GetString(20);
                }
                if (!rmView.IsDBNull(21))
                {
                    ViewBag.Insertion4Vol = rmView.GetString(21);
                }
                if (!rmView.IsDBNull(22))
                {
                    ViewBag.Insertion4Rate = rmView.GetString(22);
                }
                if (!rmView.IsDBNull(23))
                {
                    ViewBag.Insertion4Charges = rmView.GetString(23);
                }
                if (!rmView.IsDBNull(24))
                {
                    ViewBag.MixDesc = rmView.GetString(24);
                }
                if (!rmView.IsDBNull(25))
                {
                    ViewBag.MixVol = rmView.GetString(25);
                }
                if (!rmView.IsDBNull(26))
                {
                    ViewBag.MixRate = rmView.GetString(26);
                }
                if (!rmView.IsDBNull(27))
                {
                    ViewBag.MixCharges = rmView.GetString(27);
                }
                if (!rmView.IsDBNull(28))
                {
                    ViewBag.StatementDesc = rmView.GetString(28);
                }
                if (!rmView.IsDBNull(29))
                {
                    ViewBag.StatementVol = rmView.GetString(29);
                }
                if (!rmView.IsDBNull(30))
                {
                    ViewBag.StatementRate = rmView.GetString(30);
                }
                if (!rmView.IsDBNull(31))
                {
                    ViewBag.StatementCharges = rmView.GetString(31);
                }
                if (!rmView.IsDBNull(32))
                {
                    ViewBag.Brochure1Desc = rmView.GetString(32);
                }
                if (!rmView.IsDBNull(33))
                {
                    ViewBag.Brochure1Vol = rmView.GetString(33);
                }
                if (!rmView.IsDBNull(34))
                {
                    ViewBag.Brochure1Rate = rmView.GetString(34);
                }
                if (!rmView.IsDBNull(35))
                {
                    ViewBag.Brochure1Charges = rmView.GetString(35);
                }
                if (!rmView.IsDBNull(36))
                {
                    ViewBag.Brochure2Desc = rmView.GetString(36);
                }
                if (!rmView.IsDBNull(37))
                {
                    ViewBag.Brochure2Vol = rmView.GetString(37);
                }
                if (!rmView.IsDBNull(38))
                {
                    ViewBag.Brochure2Rate = rmView.GetString(38);
                }
                if (!rmView.IsDBNull(39))
                {
                    ViewBag.Brochure2Charges = rmView.GetString(39);
                }
                if (!rmView.IsDBNull(40))
                {
                    ViewBag.Brochure3Desc = rmView.GetString(40);
                }
                if (!rmView.IsDBNull(41))
                {
                    ViewBag.Brochure3Vol = rmView.GetString(41);
                }
                if (!rmView.IsDBNull(42))
                {
                    ViewBag.Brochure3Rate = rmView.GetString(42);
                }
                if (!rmView.IsDBNull(43))
                {
                    ViewBag.Brochure3Charges = rmView.GetString(43);
                }
                if (!rmView.IsDBNull(44))
                {
                    ViewBag.Brochure4Desc = rmView.GetString(44);
                }
                if (!rmView.IsDBNull(45))
                {
                    ViewBag.Brochure4Vol = rmView.GetString(45);
                }
                if (!rmView.IsDBNull(46))
                {
                    ViewBag.Brochure4Rate = rmView.GetString(46);
                }
                if (!rmView.IsDBNull(47))
                {
                    ViewBag.Brochure4Charges = rmView.GetString(47);
                }
                if (!rmView.IsDBNull(48))
                {
                    ViewBag.Brochure5Desc = rmView.GetString(48);
                }
                if (!rmView.IsDBNull(49))
                {
                    ViewBag.Brochure5Vol = rmView.GetString(49);
                }
                if (!rmView.IsDBNull(50))
                {
                    ViewBag.Brochure5Rate = rmView.GetString(50);
                }
                if (!rmView.IsDBNull(51))
                {
                    ViewBag.Brochure5Charges = rmView.GetString(51);
                }
                if (!rmView.IsDBNull(52))
                {
                    ViewBag.MB5KVol = rmView.GetString(52);
                }
                if (!rmView.IsDBNull(53))
                {
                    ViewBag.MB5KRate = rmView.GetString(53);
                }
                if (!rmView.IsDBNull(54))
                {
                    ViewBag.MB5KCharges = rmView.GetString(54);
                }
                if (!rmView.IsDBNull(55))
                {
                    ViewBag.InsertingVol = rmView.GetString(55);
                }
                if (!rmView.IsDBNull(56))
                {
                    ViewBag.InsertingRate = rmView.GetString(56);
                }
                if (!rmView.IsDBNull(57))
                {
                    ViewBag.InsertingCharges = rmView.GetString(57);
                }
                if (!rmView.IsDBNull(58))
                {
                    ViewBag.HandlingVol = rmView.GetString(58);
                }
                if (!rmView.IsDBNull(59))
                {
                    ViewBag.HandlingRate = rmView.GetString(59);
                }
                if (!rmView.IsDBNull(60))
                {
                    ViewBag.HandlingCharges = rmView.GetString(60);
                }
                if (!rmView.IsDBNull(61))
                {
                    ViewBag.SealingVol = rmView.GetString(61);
                }
                if (!rmView.IsDBNull(62))
                {
                    ViewBag.SealingRate = rmView.GetString(62);
                }
                if (!rmView.IsDBNull(63))
                {
                    ViewBag.SealingCharges = rmView.GetString(63);
                }
                if (!rmView.IsDBNull(64))
                {
                    ViewBag.TearingVol = rmView.GetString(64);
                }
                if (!rmView.IsDBNull(65))
                {
                    ViewBag.TearingRate = rmView.GetString(65);
                }
                if (!rmView.IsDBNull(66))
                {
                    ViewBag.TearingCharges = rmView.GetString(66);
                }
                if (!rmView.IsDBNull(67))
                {
                    ViewBag.FoldingVol = rmView.GetString(67);
                }
                if (!rmView.IsDBNull(68))
                {
                    ViewBag.FoldingRate = rmView.GetString(68);
                }
                if (!rmView.IsDBNull(69))
                {
                    ViewBag.FoldingCharges = rmView.GetString(69);
                }
                if (!rmView.IsDBNull(70))
                {
                    ViewBag.StockingVol = rmView.GetString(70);
                }
                if (!rmView.IsDBNull(71))
                {
                    ViewBag.StockingRate = rmView.GetString(71);
                }
                if (!rmView.IsDBNull(72))
                {
                    ViewBag.StockingCharges = rmView.GetString(72);
                }
                if (!rmView.IsDBNull(73))
                {
                    ViewBag.LabellingVol = rmView.GetString(73);
                }
                if (!rmView.IsDBNull(74))
                {
                    ViewBag.LabellingRate = rmView.GetString(74);
                }
                if (!rmView.IsDBNull(75))
                {
                    ViewBag.LabellingCharges = rmView.GetString(75);
                }
                if (!rmView.IsDBNull(76))
                {
                    ViewBag.SelfMailerVol = rmView.GetString(76);
                }
                if (!rmView.IsDBNull(77))
                {
                    ViewBag.SelfMailerRate = rmView.GetString(77);
                }
                if (!rmView.IsDBNull(78))
                {
                    ViewBag.SelfMailerCharges = rmView.GetString(78);
                }

                if (!rmView.IsDBNull(79))
                {
                    ViewBag.SelfMaterialVol = rmView.GetString(79);
                }

                if (!rmView.IsDBNull(80))
                {
                    ViewBag.SelfMaterialRate = rmView.GetString(80);
                }

                if (!rmView.IsDBNull(78))
                {
                    ViewBag.SelfMailerCharges = rmView.GetString(78);
                }

                if (!rmView.IsDBNull(79))
                {
                    ViewBag.SelfMaterialVol = rmView.GetString(79);
                }

                if (!rmView.IsDBNull(80))
                {
                    ViewBag.SelfMaterialRate = rmView.GetString(80);
                }

                if (!rmView.IsDBNull(81))
                {
                    ViewBag.SelfMaterialCharges = rmView.GetString(81);
                }

                if (!rmView.IsDBNull(82))
                {
                    ViewBag.OvertimeVol = rmView.GetString(82);
                }

                if (!rmView.IsDBNull(83))
                {
                    ViewBag.OvertimeRate = rmView.GetString(83);
                }

                if (!rmView.IsDBNull(84))
                {
                    ViewBag.OvertimeCharges = rmView.GetString(84);
                }

                if (!rmView.IsDBNull(85))
                {
                    ViewBag.CourierVol = rmView.GetString(85);
                }

                if (!rmView.IsDBNull(86))
                {
                    ViewBag.CourierRate = rmView.GetString(86);
                }

                if (!rmView.IsDBNull(87))
                {
                    ViewBag.CourierCharges = rmView.GetString(87);
                }

                if (!rmView.IsDBNull(88))
                {
                    ViewBag.DeliveryVol = rmView.GetString(88);
                }

                if (!rmView.IsDBNull(89))
                {
                    ViewBag.DeliveryRate = rmView.GetString(89);
                }

                if (!rmView.IsDBNull(90))
                {
                    ViewBag.DeliveryCharges = rmView.GetString(90);
                }

                if (!rmView.IsDBNull(91))
                {
                    ViewBag.MatchingVol = rmView.GetString(91);
                }

                if (!rmView.IsDBNull(92))
                {
                    ViewBag.MatchingRate = rmView.GetString(92);
                }

                if (!rmView.IsDBNull(93))
                {
                    ViewBag.MatchingCharges = rmView.GetString(93);
                }

                if (!rmView.IsDBNull(94))
                {
                    ViewBag.LabellingRMVol = rmView.GetString(94);
                }

                if (!rmView.IsDBNull(95))
                {
                    ViewBag.LabellingRMRate = rmView.GetString(95);
                }

                if (!rmView.IsDBNull(96))
                {
                    ViewBag.LabellingRMCharges = rmView.GetString(96);
                }

                if (!rmView.IsDBNull(97))
                {
                    ViewBag.IPDSVol = rmView.GetString(97);
                }

                if (!rmView.IsDBNull(98))
                {
                    ViewBag.IPDSRate = rmView.GetString(98);
                }

                if (!rmView.IsDBNull(99))
                {
                    ViewBag.IPDSCharges = rmView.GetString(99);
                }

                if (!rmView.IsDBNull(100))
                {
                    ViewBag.ProgrammingVol = rmView.GetString(100);
                }

                if (!rmView.IsDBNull(101))
                {
                    ViewBag.ProgrammingRate = rmView.GetString(101);
                }

                if (!rmView.IsDBNull(102))
                {
                    ViewBag.ProgrammingCharges = rmView.GetString(102);
                }

                if (!rmView.IsDBNull(103))
                {
                    ViewBag.ReturnMailVol = rmView.GetString(103);
                }

                if (!rmView.IsDBNull(104))
                {
                    ViewBag.ReturnMailRate = rmView.GetString(104);
                }

                if (!rmView.IsDBNull(105))
                {
                    ViewBag.ReturnMailCharges = rmView.GetString(105);
                }

                if (!rmView.IsDBNull(106))
                {
                    ViewBag.RetainerVol = rmView.GetString(106);
                }

                if (!rmView.IsDBNull(107))
                {
                    ViewBag.RetainerRate = rmView.GetString(107);
                }

                if (!rmView.IsDBNull(108))
                {
                    ViewBag.RetainerCharges = rmView.GetString(108);
                }

                if (!rmView.IsDBNull(109))
                {
                    ViewBag.RubberStampingVol = rmView.GetString(109);
                }

                if (!rmView.IsDBNull(110))
                {
                    ViewBag.RubberStampingRate = rmView.GetString(110);
                }

                if (!rmView.IsDBNull(111))
                {
                    ViewBag.RubberStampingCharges = rmView.GetString(111);
                }

                if (!rmView.IsDBNull(112))
                {
                    ViewBag.GlueingVol = rmView.GetString(112);
                }

                if (!rmView.IsDBNull(113))
                {
                    ViewBag.GlueingRate = rmView.GetString(113);
                }

                if (!rmView.IsDBNull(114))
                {
                    ViewBag.GlueingCharges = rmView.GetString(114);
                }

                if (!rmView.IsDBNull(115))
                {
                    ViewBag.CuttingVol = rmView.GetString(115);
                }

                if (!rmView.IsDBNull(116))
                {
                    ViewBag.CuttingRate = rmView.GetString(116);
                }

                if (!rmView.IsDBNull(117))
                {
                    ViewBag.CuttingCharges = rmView.GetString(117);
                }

                if (!rmView.IsDBNull(118))
                {
                    ViewBag.MergingVol = rmView.GetString(118);
                }

                if (!rmView.IsDBNull(119))
                {
                    ViewBag.MergingRate = rmView.GetString(119);
                }

                if (!rmView.IsDBNull(120))
                {
                    ViewBag.MergingCharges = rmView.GetString(120);
                }

                if (!rmView.IsDBNull(121))
                {
                    ViewBag.DiscountVol = rmView.GetString(121);
                }

                if (!rmView.IsDBNull(122))
                {
                    ViewBag.DiscountRate = rmView.GetString(122);
                }

                if (!rmView.IsDBNull(123))
                {
                    ViewBag.DiscountCharges = rmView.GetString(123);
                }

                if (!rmView.IsDBNull(124))
                {
                    ViewBag.Postage1Desc = rmView.GetString(124);
                }

                if (!rmView.IsDBNull(125))
                {
                    ViewBag.Postage1Vol = rmView.GetString(125);
                }

                if (!rmView.IsDBNull(126))
                {
                    ViewBag.Postage1Rate = rmView.GetString(126);
                }

                if (!rmView.IsDBNull(127))
                {
                    ViewBag.Postage1Charges = rmView.GetString(127);
                }

                if (!rmView.IsDBNull(128))
                {
                    ViewBag.Postage2Desc = rmView.GetString(128);
                }

                if (!rmView.IsDBNull(129))
                {
                    ViewBag.Postage2Vol = rmView.GetString(129);
                }

                if (!rmView.IsDBNull(130))
                {
                    ViewBag.Postage2Rate = rmView.GetString(130);
                }

                if (!rmView.IsDBNull(131))
                {
                    ViewBag.Postage2Charges = rmView.GetString(131);
                }

                if (!rmView.IsDBNull(132))
                {
                    ViewBag.Postage3Desc = rmView.GetString(132);
                }

                if (!rmView.IsDBNull(133))
                {
                    ViewBag.Postage3Vol = rmView.GetString(133);
                }

                if (!rmView.IsDBNull(134))
                {
                    ViewBag.Postage3Rate = rmView.GetString(134);
                }

                if (!rmView.IsDBNull(135))
                {
                    ViewBag.Postage3Charges = rmView.GetString(135);
                }

                if (!rmView.IsDBNull(136))
                {
                    ViewBag.Postage4Desc = rmView.GetString(136);
                }

                if (!rmView.IsDBNull(137))
                {
                    ViewBag.Postage4Vol = rmView.GetString(137);
                }

                if (!rmView.IsDBNull(138))
                {
                    ViewBag.Postage4Rate = rmView.GetString(138);
                }

                if (!rmView.IsDBNull(139))
                {
                    ViewBag.Postage4Charges = rmView.GetString(139);
                }

                if (!rmView.IsDBNull(140))
                {
                    ViewBag.Postage5Desc = rmView.GetString(140);
                }

                if (!rmView.IsDBNull(141))
                {
                    ViewBag.Postage5Vol = rmView.GetString(141);
                }

                if (!rmView.IsDBNull(142))
                {
                    ViewBag.Postage5Rate = rmView.GetString(142);
                }

                if (!rmView.IsDBNull(143))
                {
                    ViewBag.Postage5Charges = rmView.GetString(143);
                }

                if (!rmView.IsDBNull(144))
                {
                    ViewBag.Postage6Desc = rmView.GetString(144);
                }

                if (!rmView.IsDBNull(145))
                {
                    ViewBag.Postage6Vol = rmView.GetString(145);
                }

                if (!rmView.IsDBNull(146))
                {
                    ViewBag.Postage6Rate = rmView.GetString(146);
                }

                if (!rmView.IsDBNull(147))
                {
                    ViewBag.Postage6Charges = rmView.GetString(147);
                }

                if (!rmView.IsDBNull(148))
                {
                    ViewBag.Postage7Desc = rmView.GetString(148);
                }

                if (!rmView.IsDBNull(149))
                {
                    ViewBag.Postage7Vol = rmView.GetString(149);
                }

                if (!rmView.IsDBNull(150))
                {
                    ViewBag.Postage7Rate = rmView.GetString(150);
                }

                if (!rmView.IsDBNull(151))
                {
                    ViewBag.Postage7Charges = rmView.GetString(151);
                }

                if (!rmView.IsDBNull(152))
                {
                    ViewBag.Postage8Desc = rmView.GetString(152);
                }

                if (!rmView.IsDBNull(153))
                {
                    ViewBag.Postage8Vol = rmView.GetString(153);
                }

                if (!rmView.IsDBNull(154))
                {
                    ViewBag.Postage8Rate = rmView.GetString(154);
                }

                if (!rmView.IsDBNull(155))
                {
                    ViewBag.Postage8Charges = rmView.GetString(155);
                }

                if (!rmView.IsDBNull(156))
                {
                    ViewBag.Imprest1Desc = rmView.GetString(156);
                }

                if (!rmView.IsDBNull(157))
                {
                    ViewBag.Imprest1Vol = rmView.GetString(157);
                }

                if (!rmView.IsDBNull(158))
                {
                    ViewBag.Imprest1Rate = rmView.GetString(158);
                }

                if (!rmView.IsDBNull(159))
                {
                    ViewBag.Imprest1Charges = rmView.GetString(159);
                }

                if (!rmView.IsDBNull(160))
                {
                    ViewBag.Imprest2Desc = rmView.GetString(160);
                }

                if (!rmView.IsDBNull(161))
                {
                    ViewBag.Imprest2Vol = rmView.GetString(161);
                }

                if (!rmView.IsDBNull(162))
                {
                    ViewBag.Imprest2Rate = rmView.GetString(162);
                }

                if (!rmView.IsDBNull(163))
                {
                    ViewBag.Imprest2Charges = rmView.GetString(163);
                }

                if (!rmView.IsDBNull(164))
                {
                    ViewBag.Imprest3Desc = rmView.GetString(164);
                }

                if (!rmView.IsDBNull(165))
                {
                    ViewBag.Imprest3Vol = rmView.GetString(165);
                }

                if (!rmView.IsDBNull(166))
                {
                    ViewBag.Imprest3Rate = rmView.GetString(166);
                }

                if (!rmView.IsDBNull(167))
                {
                    ViewBag.Imprest3Charges = rmView.GetString(167);
                }

                if (!rmView.IsDBNull(168))
                {
                    ViewBag.Imprest4Desc = rmView.GetString(168);
                }

                if (!rmView.IsDBNull(169))
                {
                    ViewBag.Imprest4Vol = rmView.GetString(169);
                }

                if (!rmView.IsDBNull(168))
                {
                    ViewBag.Imprest4Desc = rmView.GetString(168);
                }

                if (!rmView.IsDBNull(169))
                {
                    ViewBag.Imprest4Vol = rmView.GetString(169);
                }

                if (!rmView.IsDBNull(170))
                {
                    ViewBag.Imprest4Rate = rmView.GetString(170);
                }

                if (!rmView.IsDBNull(171))
                {
                    ViewBag.Imprest4Charges = rmView.GetString(171);
                }

                if (!rmView.IsDBNull(172))
                {
                    ViewBag.Imprest5Desc = rmView.GetString(172);
                }

                if (!rmView.IsDBNull(173))
                {
                    ViewBag.Imprest5Vol = rmView.GetString(173);
                }

                if (!rmView.IsDBNull(174))
                {
                    ViewBag.Imprest5Rate = rmView.GetString(174);
                }

                if (!rmView.IsDBNull(175))
                {
                    ViewBag.Imprest5Charges = rmView.GetString(175);
                }

                if (!rmView.IsDBNull(176))
                {
                    ViewBag.Imprest6Desc = rmView.GetString(176);
                }

                if (!rmView.IsDBNull(177))
                {
                    ViewBag.Imprest6Vol = rmView.GetString(177);
                }

                if (!rmView.IsDBNull(178))
                {
                    ViewBag.Imprest6Rate = rmView.GetString(178);
                }

                if (!rmView.IsDBNull(179))
                {
                    ViewBag.Imprest6Charges = rmView.GetString(179);
                }

                if (!rmView.IsDBNull(180))
                {
                    ViewBag.Imprest7Desc = rmView.GetString(180);
                }

                if (!rmView.IsDBNull(181))
                {
                    ViewBag.Imprest7Vol = rmView.GetString(181);
                }

                if (!rmView.IsDBNull(182))
                {
                    ViewBag.Imprest7Rate = rmView.GetString(182);
                }

                if (!rmView.IsDBNull(183))
                {
                    ViewBag.Imprest7Charges = rmView.GetString(183);
                }

                if (!rmView.IsDBNull(184))
                {
                    ViewBag.Imprest8Desc = rmView.GetString(184);
                }

                if (!rmView.IsDBNull(185))
                {
                    ViewBag.Imprest8Vol = rmView.GetString(185);
                }

                if (!rmView.IsDBNull(186))
                {
                    ViewBag.Imprest8Rate = rmView.GetString(186);
                }

                if (!rmView.IsDBNull(187))
                {
                    ViewBag.Imprest8Charges = rmView.GetString(187);
                }

                if (!rmView.IsDBNull(188))
                {
                    ViewBag.RebateDesc = rmView.GetString(188);
                }

                if (!rmView.IsDBNull(189))
                {
                    ViewBag.RebateVol = rmView.GetString(189);
                }

                if (!rmView.IsDBNull(190))
                {
                    ViewBag.RebateRate = rmView.GetString(190);
                }

                if (!rmView.IsDBNull(191))
                {
                    ViewBag.RebateCharges = rmView.GetString(191);
                }

                if (!rmView.IsDBNull(192))
                {
                    ViewBag.FrankingDesc = rmView.GetString(192);
                }

                if (!rmView.IsDBNull(193))
                {
                    ViewBag.FrankingVol = rmView.GetString(193);
                }

                if (!rmView.IsDBNull(194))
                {
                    ViewBag.FrankingRate = rmView.GetString(194);
                }

                if (!rmView.IsDBNull(195))
                {
                    ViewBag.FrankingCharges = rmView.GetString(195);
                }

                if (!rmView.IsDBNull(196))
                {
                    ViewBag.Franking10Desc = rmView.GetString(196);
                }

                if (!rmView.IsDBNull(197))
                {
                    ViewBag.Franking10Vol = rmView.GetString(197);
                }

                if (!rmView.IsDBNull(198))
                {
                    ViewBag.Franking10Rate = rmView.GetString(198);
                }

                if (!rmView.IsDBNull(199))
                {
                    ViewBag.Franking10Charges = rmView.GetString(199);
                }

                if (!rmView.IsDBNull(200))
                {
                    ViewBag.AirmailDesc = rmView.GetString(200);
                }

                if (!rmView.IsDBNull(201))
                {
                    ViewBag.AirmailVol = rmView.GetString(201);
                }

                if (!rmView.IsDBNull(202))
                {
                    ViewBag.AirmailRate = rmView.GetString(202);
                }

                if (!rmView.IsDBNull(203))
                {
                    ViewBag.AirmailCharges = rmView.GetString(203);
                }

                if (!rmView.IsDBNull(204))
                {
                    ViewBag.SporeDesc = rmView.GetString(204);
                }

                if (!rmView.IsDBNull(205))
                {
                    ViewBag.SporeVol = rmView.GetString(205);
                }

                if (!rmView.IsDBNull(206))
                {
                    ViewBag.SporeRate = rmView.GetString(206);
                }

                if (!rmView.IsDBNull(207))
                {
                    ViewBag.SporeCharges = rmView.GetString(207);
                }

                if (!rmView.IsDBNull(208))
                {
                    ViewBag.TLetterDesc = rmView.GetString(208);
                }

                if (!rmView.IsDBNull(209))
                {
                    ViewBag.TLetterVol = rmView.GetString(209);
                }

                if (!rmView.IsDBNull(210))
                {
                    ViewBag.TLetterRate = rmView.GetString(210);
                }

                if (!rmView.IsDBNull(211))
                {
                    ViewBag.TLetterCharges = rmView.GetString(211);
                }

                if (!rmView.IsDBNull(212))
                {
                    ViewBag.NPCDesc = rmView.GetString(212);
                }

                if (!rmView.IsDBNull(213))
                {
                    ViewBag.NPCVol = rmView.GetString(213);
                }

                if (!rmView.IsDBNull(214))
                {
                    ViewBag.NPCRate = rmView.GetString(214);
                }

                if (!rmView.IsDBNull(215))
                {
                    ViewBag.NPCCharges = rmView.GetString(215);
                }

                if (!rmView.IsDBNull(216))
                {
                    ViewBag.Mix10Desc = rmView.GetString(216);
                }

                if (!rmView.IsDBNull(217))
                {
                    ViewBag.Mix10Vol = rmView.GetString(217);
                }

                if (!rmView.IsDBNull(218))
                {
                    ViewBag.Mix10Rate = rmView.GetString(218);
                }

                if (!rmView.IsDBNull(219))
                {
                    ViewBag.Mix10Charges = rmView.GetString(219);
                }

                if (!rmView.IsDBNull(220))
                {
                    ViewBag.RegisteredMailsDesc = rmView.GetString(220);
                }

                if (!rmView.IsDBNull(221))
                {
                    ViewBag.RegisteredMailsVol = rmView.GetString(221);
                }

                if (!rmView.IsDBNull(222))
                {
                    ViewBag.RegisteredMailsRate = rmView.GetString(222);
                }

                if (!rmView.IsDBNull(223))
                {
                    ViewBag.RegisteredMailsCharges = rmView.GetString(223);
                }

                if (!rmView.IsDBNull(224))
                {
                    ViewBag.RegisteredMails2Desc = rmView.GetString(224);
                }

                if (!rmView.IsDBNull(225))
                {
                    ViewBag.RegisteredMails2Vol = rmView.GetString(225);
                }

                if (!rmView.IsDBNull(226))
                {
                    ViewBag.RegisteredMails2Rate = rmView.GetString(226);
                }

                if (!rmView.IsDBNull(227))
                {
                    ViewBag.RegisteredMails2Charges = rmView.GetString(227);
                }

                if (!rmView.IsDBNull(228))
                {
                    ViewBag.ImprestRMDesc = rmView.GetString(228);
                }

                if (!rmView.IsDBNull(229))
                {
                    ViewBag.ImprestRMVol = rmView.GetString(229);
                }

                if (!rmView.IsDBNull(230))
                {
                    ViewBag.ImprestRMRate = rmView.GetString(230);
                }

                if (!rmView.IsDBNull(231))
                {
                    ViewBag.ImprestRMCharges = rmView.GetString(231);
                }

                if (!rmView.IsDBNull(232))
                {
                    ViewBag.ImprestRM2Desc = rmView.GetString(232);
                }

                if (!rmView.IsDBNull(233))
                {
                    ViewBag.ImprestRM2Vol = rmView.GetString(233);
                }

                if (!rmView.IsDBNull(234))
                {
                    ViewBag.ImprestRM2Rate = rmView.GetString(234);
                }

                if (!rmView.IsDBNull(235))
                {
                    ViewBag.ImprestRM2Charges = rmView.GetString(235);
                }

                if (!rmView.IsDBNull(236))
                {
                    ViewBag.DataSFTPVol = rmView.GetString(236);
                }

                if (!rmView.IsDBNull(237))
                {
                    ViewBag.DataSFTPRate = rmView.GetString(237);
                }

                if (!rmView.IsDBNull(238))
                {
                    ViewBag.DataSFTPCharges = rmView.GetString(238);
                }

                if (!rmView.IsDBNull(239))
                {
                    ViewBag.CDArchivingVol = rmView.GetString(239);
                }

                if (!rmView.IsDBNull(240))
                {
                    ViewBag.CDArchivingRate = rmView.GetString(240);
                }

                if (!rmView.IsDBNull(241))
                {
                    ViewBag.CDArchivingCharges = rmView.GetString(241);
                }
            }

            SqlCommand cmdViewMMP = new SqlCommand("SELECT MMPPosting1Desc, MMPPosting1Vol, MMPPosting1Rate, MMPPosting1Charges, MMPPosting2Desc, MMPPosting2Vol, MMPPosting2Rate, MMPPosting2Charges, MMPInsertion1Desc, MMPInsertion1Vol, MMPInsertion1Rate, MMPInsertion1Charges, " +
                "MMPInsertion2Desc, MMPInsertion2Vol, MMPInsertion2Rate, MMPInsertion2Charges, MMPInsertion3Desc, MMPInsertion3Vol, MMPInsertion3Rate, MMPInsertion3Charges, MMPInsertion4Desc, MMPInsertion4Vol, MMPInsertion4Rate, MMPInsertion4Charges, MMPMixDesc, MMPMixVol, MMPMixRate, " +
                "MMPMixCharges, MMPStatementDesc, MMPStatementVol, MMPStatementRate, MMPStatementCharges, MMPBrochure1Desc, MMPBrochure1Vol, MMPBrochure1Rate, MMPBrochure1Charges, MMPBrochure2Desc, MMPBrochure2Vol, MMPBrochure2Rate, MMPBrochure2Charges, MMPBrochure3Desc, MMPBrochure3Vol, " +
                "MMPBrochure3Rate, MMPBrochure3Charges, MMPBrochure4Desc, MMPBrochure4Vol, MMPBrochure4Rate, MMPBrochure4Charges, MMPBrochure5Desc, MMPBrochure5Vol, MMPBrochure5Rate, MMPBrochure5Charges, MMPMB5KVol, MMPMB5KRate, MMPMB5KCharges, MMPInsertingVol, MMPInsertingRate, MMPInsertingCharges, " +
                "MMPHandlingVol, MMPHandlingRate, MMPHandlingCharges, MMPSealingVol, MMPSealingRate, MMPSealingCharges, MMPTearingVol, MMPTearingRate, MMPTearingCharges, MMPFoldingVol, MMPFoldingRate, MMPFoldingCharges, MMPStockingVol, MMPStockingRate, MMPStockingCharges, MMPLabellingVol, MMPLabellingRate, " +
                "MMPLabellingCharges, MMPSelfMailerVol, MMPSelfMailerRate, MMPSelfMailerCharges, MMPSelfMaterialVol, MMPSelfMaterialRate, MMPSelfMaterialCharges, MMPOvertimeVol, MMPOvertimeRate, MMPOvertimeCharges, MMPCourierVol, MMPCourierRate, MMPCourierCharges, MMPDeliveryVol, MMPDeliveryRate, " +
                "MMPDeliveryCharges, MMPMatchingVol, MMPMatchingRate, MMPMatchingCharges, MMPLabellingRMVol, MMPLabellingRMRate, MMPLabellingRMCharges, MMPIPDSVol, MMPIPDSRate, MMPIPDSCharges, MMPProgrammingVol, MMPProgrammingRate, MMPProgrammingCharges, MMPReturnMailVol, MMPReturnMailRate, MMPReturnMailCharges, " +
                "MMPRetainerVol, MMPRetainerRate, MMPRetainerCharges, MMPRubberStampingVol, MMPRubberStampingRate, MMPRubberStampingCharges, MMPGlueingVol, MMPGlueingRate, MMPGlueingCharges, MMPCuttingVol, MMPCuttingRate, MMPCuttingCharges, MMPMergingVol, MMPMergingRate, MMPMergingCharges, MMPDiscountVol, MMPDiscountRate, MMPDiscountCharges, " +
                "MMPPostage1Desc, MMPPostage1Vol, MMPPostage1Rate, MMPPostage1Charges, MMPPostage2Desc, MMPPostage2Vol, MMPPostage2Rate, MMPPostage2Charges, MMPPostage3Desc, MMPPostage3Vol, MMPPostage3Rate, MMPPostage3Charges, MMPPostage4Desc, MMPPostage4Vol, MMPPostage4Rate, MMPPostage4Charges, MMPPostage5Desc, MMPPostage5Vol, " +
                "MMPPostage5Rate, MMPPostage5Charges, MMPPostage6Desc, MMPPostage6Vol, MMPPostage6Rate, MMPPostage6Charges, MMPPostage7Desc, MMPPostage7Vol, MMPPostage7Rate, MMPPostage7Charges, MMPPostage8Desc, MMPPostage8Vol, MMPPostage8Rate, MMPPostage8Charges, MMPImprest1Desc, MMPImprest1Vol, MMPImprest1Rate, MMPImprest1Charges, " +
                "MMPImprest2Desc, MMPImprest2Vol, MMPImprest2Rate, MMPImprest2Charges, MMPImprest3Desc, MMPImprest3Vol, MMPImprest3Rate, MMPImprest3Charges, MMPImprest4Desc, MMPImprest4Vol, MMPImprest4Rate, MMPImprest4Charges, MMPImprest5Desc, MMPImprest5Vol, MMPImprest5Rate, MMPImprest5Charges, MMPImprest6Desc, MMPImprest6Vol, " +
                "MMPImprest6Rate, MMPImprest6Charges, MMPImprest7Desc, MMPImprest7Vol, MMPImprest7Rate, MMPImprest7Charges, MMPImprest8Desc, MMPImprest8Vol, MMPImprest8Rate, MMPImprest8Charges, MMPRebateDesc, MMPRebateVol, MMPRebateRate, MMPRebateCharges, MMPFrankingDesc, MMPFrankingVol, MMPFrankingRate, MMPFrankingCharges, MMPFranking10Desc, " +
                "MMPFranking10Vol, MMPFranking10Rate, MMPFranking10Charges, MMPAirmailDesc, MMPAirmailVol, MMPAirmailRate, MMPAirmailCharges, MMPSporeDesc, MMPSporeVol, MMPSporeRate, MMPSporeCharges, MMPTLetterDesc, MMPTLetterVol, MMPTLetterRate, MMPTLetterCharges, MMPNPCDesc, MMPNPCVol, MMPNPCRate, MMPNPCCharges, MMPMix10Desc, MMPMix10Vol, MMPMix10Rate, " +
                "MMPMix10Charges, MMPRegisteredMailsDesc, MMPRegisteredMailsVol, MMPRegisteredMailsRate, MMPRegisteredMailsCharges, MMPRegisteredMails2Desc, MMPRegisteredMails2Vol, MMPRegisteredMails2Rate, MMPRegisteredMails2Charges, MMPImprestRMDesc, MMPImprestRMVol, MMPImprestRMRate, MMPImprestRMCharges, " +
                "MMPImprestRM2Desc, MMPImprestRM2Vol, MMPImprestRM2Rate, MMPImprestRM2Charges, MMPDataSFTPVol, MMPDataSFTPRate, MMPDataSFTPCharges, MMPCDArchivingVol, MMPCDArchivingRate, MMPCDArchivingCharges" +
                " FROM BillingMPRMMP WHERE JobSheetNo=@JobSheetNo2MMP", cn);

            cmdViewMMP.Parameters.AddWithValue("@JobSheetNo2MMP", LogTagNo);
            SqlDataReader rmViewMMP = cmdViewMMP.ExecuteReader();

            if (rmViewMMP.HasRows)
            {
                while (rmViewMMP.Read())
                {

                    if (!rmViewMMP.IsDBNull(0))
                    {
                        ViewBag.MMPPosting1Desc = rmViewMMP.GetString(0);
                    }
                    if (!rmViewMMP.IsDBNull(1))
                    {
                        ViewBag.MMPPosting1Vol = rmViewMMP.GetString(1);
                    }
                    if (!rmViewMMP.IsDBNull(2))
                    {
                        ViewBag.MMPPosting1Rate = rmViewMMP.GetString(2);
                    }
                    if (!rmViewMMP.IsDBNull(3))
                    {
                        ViewBag.MMPPosting1Charges = rmViewMMP.GetString(3);
                    }
                    if (!rmViewMMP.IsDBNull(4))
                    {
                        ViewBag.MMPPosting2Desc = rmViewMMP.GetString(4);
                    }
                    if (!rmViewMMP.IsDBNull(5))
                    {
                        ViewBag.MMPPosting2Vol = rmViewMMP.GetString(5);
                    }
                    if (!rmViewMMP.IsDBNull(6))
                    {
                        ViewBag.MMPPosting2Rate = rmViewMMP.GetString(6);
                    }
                    if (!rmViewMMP.IsDBNull(7))
                    {
                        ViewBag.MMPPosting2Charges = rmViewMMP.GetString(7);
                    }
                    if (!rmViewMMP.IsDBNull(8))
                    {
                        ViewBag.MMPInsertion1Desc = rmViewMMP.GetString(8);
                    }
                    if (!rmViewMMP.IsDBNull(9))
                    {
                        ViewBag.MMPInsertion1Vol = rmViewMMP.GetString(9);
                    }
                    if (!rmViewMMP.IsDBNull(10))
                    {
                        ViewBag.MMPInsertion1Rate = rmViewMMP.GetString(10);
                    }
                    if (!rmViewMMP.IsDBNull(11))
                    {
                        ViewBag.MMPInsertion1Charges = rmViewMMP.GetString(11);
                    }
                    if (!rmViewMMP.IsDBNull(12))
                    {
                        ViewBag.MMPInsertion2Desc = rmViewMMP.GetString(12);
                    }
                    if (!rmViewMMP.IsDBNull(13))
                    {
                        ViewBag.MMPInsertion2Vol = rmViewMMP.GetString(13);
                    }
                    if (!rmViewMMP.IsDBNull(14))
                    {
                        ViewBag.MMPInsertion2Rate = rmViewMMP.GetString(14);
                    }
                    if (!rmViewMMP.IsDBNull(15))
                    {
                        ViewBag.MMPInsertion2Charges = rmViewMMP.GetString(15);
                    }
                    if (!rmViewMMP.IsDBNull(16))
                    {
                        ViewBag.MMPInsertion3Desc = rmViewMMP.GetString(16);
                    }
                    if (!rmViewMMP.IsDBNull(17))
                    {
                        ViewBag.MMPInsertion3Vol = rmViewMMP.GetString(17);
                    }
                    if (!rmViewMMP.IsDBNull(18))
                    {
                        ViewBag.MMPInsertion3Rate = rmViewMMP.GetString(18);
                    }
                    if (!rmViewMMP.IsDBNull(19))
                    {
                        ViewBag.MMPInsertion3Charges = rmViewMMP.GetString(19);
                    }
                    if (!rmViewMMP.IsDBNull(20))
                    {
                        ViewBag.MMPInsertion4Desc = rmViewMMP.GetString(20);
                    }
                    if (!rmViewMMP.IsDBNull(21))
                    {
                        ViewBag.MMPInsertion4Vol = rmViewMMP.GetString(21);
                    }
                    if (!rmViewMMP.IsDBNull(22))
                    {
                        ViewBag.MMPInsertion4Rate = rmViewMMP.GetString(22);
                    }
                    if (!rmViewMMP.IsDBNull(23))
                    {
                        ViewBag.MMPInsertion4Charges = rmViewMMP.GetString(23);
                    }
                    if (!rmViewMMP.IsDBNull(24))
                    {
                        ViewBag.MMPMixDesc = rmViewMMP.GetString(24);
                    }
                    if (!rmViewMMP.IsDBNull(25))
                    {
                        ViewBag.MMPMixVol = rmViewMMP.GetString(25);
                    }
                    if (!rmViewMMP.IsDBNull(26))
                    {
                        ViewBag.MMPMixRate = rmViewMMP.GetString(26);
                    }
                    if (!rmViewMMP.IsDBNull(27))
                    {
                        ViewBag.MMPMixCharges = rmViewMMP.GetString(27);
                    }
                    if (!rmViewMMP.IsDBNull(28))
                    {
                        ViewBag.MMPStatementDesc = rmViewMMP.GetString(28);
                    }
                    if (!rmViewMMP.IsDBNull(29))
                    {
                        ViewBag.MMPStatementVol = rmViewMMP.GetString(29);
                    }
                    if (!rmViewMMP.IsDBNull(30))
                    {
                        ViewBag.MMPStatementRate = rmViewMMP.GetString(30);
                    }
                    if (!rmViewMMP.IsDBNull(31))
                    {
                        ViewBag.MMPStatementCharges = rmViewMMP.GetString(31);
                    }
                    if (!rmViewMMP.IsDBNull(32))
                    {
                        ViewBag.MMPBrochure1Desc = rmViewMMP.GetString(32);
                    }
                    if (!rmViewMMP.IsDBNull(33))
                    {
                        ViewBag.MMPBrochure1Vol = rmViewMMP.GetString(33);
                    }
                    if (!rmViewMMP.IsDBNull(34))
                    {
                        ViewBag.MMPBrochure1Rate = rmViewMMP.GetString(34);
                    }
                    if (!rmViewMMP.IsDBNull(35))
                    {
                        ViewBag.MMPBrochure1Charges = rmViewMMP.GetString(35);
                    }
                    if (!rmViewMMP.IsDBNull(36))
                    {
                        ViewBag.MMPBrochure2Desc = rmViewMMP.GetString(36);
                    }
                    if (!rmViewMMP.IsDBNull(37))
                    {
                        ViewBag.MMPBrochure2Vol = rmViewMMP.GetString(37);
                    }
                    if (!rmViewMMP.IsDBNull(38))
                    {
                        ViewBag.MMPBrochure2Rate = rmViewMMP.GetString(38);
                    }
                    if (!rmViewMMP.IsDBNull(39))
                    {
                        ViewBag.MMPBrochure2Charges = rmViewMMP.GetString(39);
                    }
                    if (!rmViewMMP.IsDBNull(40))
                    {
                        ViewBag.MMPBrochure3Desc = rmViewMMP.GetString(40);
                    }
                    if (!rmViewMMP.IsDBNull(41))
                    {
                        ViewBag.MMPBrochure3Vol = rmViewMMP.GetString(41);
                    }
                    if (!rmViewMMP.IsDBNull(42))
                    {
                        ViewBag.MMPBrochure3Rate = rmViewMMP.GetString(42);
                    }
                    if (!rmViewMMP.IsDBNull(43))
                    {
                        ViewBag.MMPBrochure3Charges = rmViewMMP.GetString(43);
                    }
                    if (!rmViewMMP.IsDBNull(44))
                    {
                        ViewBag.MMPBrochure4Desc = rmViewMMP.GetString(44);
                    }
                    if (!rmViewMMP.IsDBNull(45))
                    {
                        ViewBag.MMPBrochure4Vol = rmViewMMP.GetString(45);
                    }
                    if (!rmViewMMP.IsDBNull(46))
                    {
                        ViewBag.MMPBrochure4Rate = rmViewMMP.GetString(46);
                    }
                    if (!rmViewMMP.IsDBNull(47))
                    {
                        ViewBag.MMPBrochure4Charges = rmViewMMP.GetString(47);
                    }
                    if (!rmViewMMP.IsDBNull(48))
                    {
                        ViewBag.MMPBrochure5Desc = rmViewMMP.GetString(48);
                    }
                    if (!rmViewMMP.IsDBNull(49))
                    {
                        ViewBag.MMPBrochure5Vol = rmViewMMP.GetString(49);
                    }
                    if (!rmViewMMP.IsDBNull(50))
                    {
                        ViewBag.MMPBrochure5Rate = rmViewMMP.GetString(50);
                    }
                    if (!rmViewMMP.IsDBNull(51))
                    {
                        ViewBag.MMPBrochure5Charges = rmViewMMP.GetString(51);
                    }
                    if (!rmViewMMP.IsDBNull(52))
                    {
                        ViewBag.MMPMB5KVol = rmViewMMP.GetString(52);
                    }
                    if (!rmViewMMP.IsDBNull(53))
                    {
                        ViewBag.MMPMB5KRate = rmViewMMP.GetString(53);
                    }
                    if (!rmViewMMP.IsDBNull(54))
                    {
                        ViewBag.MMPMB5KCharges = rmViewMMP.GetString(54);
                    }
                    if (!rmViewMMP.IsDBNull(55))
                    {
                        ViewBag.MMPInsertingVol = rmViewMMP.GetString(55);
                    }
                    if (!rmViewMMP.IsDBNull(56))
                    {
                        ViewBag.MMPInsertingRate = rmViewMMP.GetString(56);
                    }
                    if (!rmViewMMP.IsDBNull(57))
                    {
                        ViewBag.MMPInsertingCharges = rmViewMMP.GetString(57);
                    }
                    if (!rmViewMMP.IsDBNull(58))
                    {
                        ViewBag.MMPHandlingVol = rmViewMMP.GetString(58);
                    }
                    if (!rmViewMMP.IsDBNull(59))
                    {
                        ViewBag.MMPHandlingRate = rmViewMMP.GetString(59);
                    }
                    if (!rmViewMMP.IsDBNull(60))
                    {
                        ViewBag.MMPHandlingCharges = rmViewMMP.GetString(60);
                    }
                    if (!rmViewMMP.IsDBNull(61))
                    {
                        ViewBag.MMPSealingVol = rmViewMMP.GetString(61);
                    }
                    if (!rmViewMMP.IsDBNull(62))
                    {
                        ViewBag.MMPSealingRate = rmViewMMP.GetString(62);
                    }
                    if (!rmViewMMP.IsDBNull(63))
                    {
                        ViewBag.MMPSealingCharges = rmViewMMP.GetString(63);
                    }
                    if (!rmViewMMP.IsDBNull(64))
                    {
                        ViewBag.MMPTearingVol = rmViewMMP.GetString(64);
                    }
                    if (!rmViewMMP.IsDBNull(65))
                    {
                        ViewBag.MMPTearingRate = rmViewMMP.GetString(65);
                    }
                    if (!rmViewMMP.IsDBNull(66))
                    {
                        ViewBag.MMPTearingCharges = rmViewMMP.GetString(66);
                    }
                    if (!rmViewMMP.IsDBNull(67))
                    {
                        ViewBag.MMPFoldingVol = rmViewMMP.GetString(67);
                    }
                    if (!rmViewMMP.IsDBNull(68))
                    {
                        ViewBag.MMPFoldingRate = rmViewMMP.GetString(68);
                    }
                    if (!rmViewMMP.IsDBNull(69))
                    {
                        ViewBag.MMPFoldingCharges = rmViewMMP.GetString(69);
                    }
                    if (!rmViewMMP.IsDBNull(70))
                    {
                        ViewBag.MMPStockingVol = rmViewMMP.GetString(70);
                    }
                    if (!rmViewMMP.IsDBNull(71))
                    {
                        ViewBag.MMPStockingRate = rmViewMMP.GetString(71);
                    }
                    if (!rmViewMMP.IsDBNull(72))
                    {
                        ViewBag.MMPStockingCharges = rmViewMMP.GetString(72);
                    }
                    if (!rmViewMMP.IsDBNull(73))
                    {
                        ViewBag.MMPLabellingVol = rmViewMMP.GetString(73);
                    }
                    if (!rmViewMMP.IsDBNull(74))
                    {
                        ViewBag.MMPLabellingRate = rmViewMMP.GetString(74);
                    }
                    if (!rmViewMMP.IsDBNull(75))
                    {
                        ViewBag.MMPLabellingCharges = rmViewMMP.GetString(75);
                    }
                    if (!rmViewMMP.IsDBNull(76))
                    {
                        ViewBag.MMPSelfMailerVol = rmViewMMP.GetString(76);
                    }
                    if (!rmViewMMP.IsDBNull(77))
                    {
                        ViewBag.MMPSelfMailerRate = rmViewMMP.GetString(77);
                    }
                    if (!rmViewMMP.IsDBNull(78))
                    {
                        ViewBag.MMPSelfMailerCharges = rmViewMMP.GetString(78);
                    }

                    if (!rmViewMMP.IsDBNull(79))
                    {
                        ViewBag.MMPSelfMaterialVol = rmViewMMP.GetString(79);
                    }

                    if (!rmViewMMP.IsDBNull(80))
                    {
                        ViewBag.MMPSelfMaterialRate = rmViewMMP.GetString(80);
                    }

                    if (!rmViewMMP.IsDBNull(78))
                    {
                        ViewBag.MMPSelfMailerCharges = rmViewMMP.GetString(78);
                    }

                    if (!rmViewMMP.IsDBNull(79))
                    {
                        ViewBag.MMPSelfMaterialVol = rmViewMMP.GetString(79);
                    }

                    if (!rmViewMMP.IsDBNull(80))
                    {
                        ViewBag.MMPSelfMaterialRate = rmViewMMP.GetString(80);
                    }

                    if (!rmViewMMP.IsDBNull(81))
                    {
                        ViewBag.MMPSelfMaterialCharges = rmViewMMP.GetString(81);
                    }

                    if (!rmViewMMP.IsDBNull(82))
                    {
                        ViewBag.MMPOvertimeVol = rmViewMMP.GetString(82);
                    }

                    if (!rmViewMMP.IsDBNull(83))
                    {
                        ViewBag.MMPOvertimeRate = rmViewMMP.GetString(83);
                    }

                    if (!rmViewMMP.IsDBNull(84))
                    {
                        ViewBag.MMPOvertimeCharges = rmViewMMP.GetString(84);
                    }

                    if (!rmViewMMP.IsDBNull(85))
                    {
                        ViewBag.MMPCourierVol = rmViewMMP.GetString(85);
                    }

                    if (!rmViewMMP.IsDBNull(86))
                    {
                        ViewBag.MMPCourierRate = rmViewMMP.GetString(86);
                    }

                    if (!rmViewMMP.IsDBNull(87))
                    {
                        ViewBag.MMPCourierCharges = rmViewMMP.GetString(87);
                    }

                    if (!rmViewMMP.IsDBNull(88))
                    {
                        ViewBag.MMPDeliveryVol = rmViewMMP.GetString(88);
                    }

                    if (!rmViewMMP.IsDBNull(89))
                    {
                        ViewBag.MMPDeliveryRate = rmViewMMP.GetString(89);
                    }

                    if (!rmViewMMP.IsDBNull(90))
                    {
                        ViewBag.MMPDeliveryCharges = rmViewMMP.GetString(90);
                    }

                    if (!rmViewMMP.IsDBNull(91))
                    {
                        ViewBag.MMPMatchingVol = rmViewMMP.GetString(91);
                    }

                    if (!rmViewMMP.IsDBNull(92))
                    {
                        ViewBag.MMPMatchingRate = rmViewMMP.GetString(92);
                    }

                    if (!rmViewMMP.IsDBNull(93))
                    {
                        ViewBag.MMPMatchingCharges = rmViewMMP.GetString(93);
                    }

                    if (!rmViewMMP.IsDBNull(94))
                    {
                        ViewBag.MMPLabellingRMVol = rmViewMMP.GetString(94);
                    }

                    if (!rmViewMMP.IsDBNull(95))
                    {
                        ViewBag.MMPLabellingRMRate = rmViewMMP.GetString(95);
                    }

                    if (!rmViewMMP.IsDBNull(96))
                    {
                        ViewBag.MMPLabellingRMCharges = rmViewMMP.GetString(96);
                    }

                    if (!rmViewMMP.IsDBNull(97))
                    {
                        ViewBag.MMPIPDSVol = rmViewMMP.GetString(97);
                    }

                    if (!rmViewMMP.IsDBNull(98))
                    {
                        ViewBag.MMPIPDSRate = rmViewMMP.GetString(98);
                    }

                    if (!rmViewMMP.IsDBNull(99))
                    {
                        ViewBag.MMPIPDSCharges = rmViewMMP.GetString(99);
                    }

                    if (!rmViewMMP.IsDBNull(100))
                    {
                        ViewBag.MMPProgrammingVol = rmViewMMP.GetString(100);
                    }

                    if (!rmViewMMP.IsDBNull(101))
                    {
                        ViewBag.MMPProgrammingRate = rmViewMMP.GetString(101);
                    }

                    if (!rmViewMMP.IsDBNull(102))
                    {
                        ViewBag.MMPProgrammingCharges = rmViewMMP.GetString(102);
                    }

                    if (!rmViewMMP.IsDBNull(103))
                    {
                        ViewBag.MMPReturnMailVol = rmViewMMP.GetString(103);
                    }

                    if (!rmViewMMP.IsDBNull(104))
                    {
                        ViewBag.MMPReturnMailRate = rmViewMMP.GetString(104);
                    }

                    if (!rmViewMMP.IsDBNull(105))
                    {
                        ViewBag.MMPReturnMailCharges = rmViewMMP.GetString(105);
                    }

                    if (!rmViewMMP.IsDBNull(106))
                    {
                        ViewBag.MMPRetainerVol = rmViewMMP.GetString(106);
                    }

                    if (!rmViewMMP.IsDBNull(107))
                    {
                        ViewBag.MMPRetainerRate = rmViewMMP.GetString(107);
                    }

                    if (!rmViewMMP.IsDBNull(108))
                    {
                        ViewBag.MMPRetainerCharges = rmViewMMP.GetString(108);
                    }

                    if (!rmViewMMP.IsDBNull(109))
                    {
                        ViewBag.MMPRubberStampingVol = rmViewMMP.GetString(109);
                    }

                    if (!rmViewMMP.IsDBNull(110))
                    {
                        ViewBag.MMPRubberStampingRate = rmViewMMP.GetString(110);
                    }

                    if (!rmViewMMP.IsDBNull(111))
                    {
                        ViewBag.MMPRubberStampingCharges = rmViewMMP.GetString(111);
                    }

                    if (!rmViewMMP.IsDBNull(112))
                    {
                        ViewBag.MMPGlueingVol = rmViewMMP.GetString(112);
                    }

                    if (!rmViewMMP.IsDBNull(113))
                    {
                        ViewBag.MMPGlueingRate = rmViewMMP.GetString(113);
                    }

                    if (!rmViewMMP.IsDBNull(114))
                    {
                        ViewBag.MMPGlueingCharges = rmViewMMP.GetString(114);
                    }

                    if (!rmViewMMP.IsDBNull(115))
                    {
                        ViewBag.MMPCuttingVol = rmViewMMP.GetString(115);
                    }

                    if (!rmViewMMP.IsDBNull(116))
                    {
                        ViewBag.MMPCuttingRate = rmViewMMP.GetString(116);
                    }

                    if (!rmViewMMP.IsDBNull(117))
                    {
                        ViewBag.MMPCuttingCharges = rmViewMMP.GetString(117);
                    }

                    if (!rmViewMMP.IsDBNull(118))
                    {
                        ViewBag.MMPMergingVol = rmViewMMP.GetString(118);
                    }

                    if (!rmViewMMP.IsDBNull(119))
                    {
                        ViewBag.MMPMergingRate = rmViewMMP.GetString(119);
                    }

                    if (!rmViewMMP.IsDBNull(120))
                    {
                        ViewBag.MMPMergingCharges = rmViewMMP.GetString(120);
                    }

                    if (!rmViewMMP.IsDBNull(121))
                    {
                        ViewBag.MMPDiscountVol = rmViewMMP.GetString(121);
                    }

                    if (!rmViewMMP.IsDBNull(122))
                    {
                        ViewBag.MMPDiscountRate = rmViewMMP.GetString(122);
                    }

                    if (!rmViewMMP.IsDBNull(123))
                    {
                        ViewBag.MMPDiscountCharges = rmViewMMP.GetString(123);
                    }

                    if (!rmViewMMP.IsDBNull(124))
                    {
                        ViewBag.MMPPostage1Desc = rmViewMMP.GetString(124);
                    }

                    if (!rmViewMMP.IsDBNull(125))
                    {
                        ViewBag.MMPPostage1Vol = rmViewMMP.GetString(125);
                    }

                    if (!rmViewMMP.IsDBNull(126))
                    {
                        ViewBag.MMPPostage1Rate = rmViewMMP.GetString(126);
                    }

                    if (!rmViewMMP.IsDBNull(127))
                    {
                        ViewBag.MMPPostage1Charges = rmViewMMP.GetString(127);
                    }

                    if (!rmViewMMP.IsDBNull(128))
                    {
                        ViewBag.MMPPostage2Desc = rmViewMMP.GetString(128);
                    }

                    if (!rmViewMMP.IsDBNull(129))
                    {
                        ViewBag.MMPPostage2Vol = rmViewMMP.GetString(129);
                    }

                    if (!rmViewMMP.IsDBNull(130))
                    {
                        ViewBag.MMPPostage2Rate = rmViewMMP.GetString(130);
                    }

                    if (!rmViewMMP.IsDBNull(131))
                    {
                        ViewBag.MMPPostage2Charges = rmViewMMP.GetString(131);
                    }

                    if (!rmViewMMP.IsDBNull(132))
                    {
                        ViewBag.MMPPostage3Desc = rmViewMMP.GetString(132);
                    }

                    if (!rmViewMMP.IsDBNull(133))
                    {
                        ViewBag.MMPPostage3Vol = rmViewMMP.GetString(133);
                    }

                    if (!rmViewMMP.IsDBNull(134))
                    {
                        ViewBag.MMPPostage3Rate = rmViewMMP.GetString(134);
                    }

                    if (!rmViewMMP.IsDBNull(135))
                    {
                        ViewBag.MMPPostage3Charges = rmViewMMP.GetString(135);
                    }

                    if (!rmViewMMP.IsDBNull(136))
                    {
                        ViewBag.MMPPostage4Desc = rmViewMMP.GetString(136);
                    }

                    if (!rmViewMMP.IsDBNull(137))
                    {
                        ViewBag.MMPPostage4Vol = rmViewMMP.GetString(137);
                    }

                    if (!rmViewMMP.IsDBNull(138))
                    {
                        ViewBag.MMPPostage4Rate = rmViewMMP.GetString(138);
                    }

                    if (!rmViewMMP.IsDBNull(139))
                    {
                        ViewBag.MMPPostage4Charges = rmViewMMP.GetString(139);
                    }

                    if (!rmViewMMP.IsDBNull(140))
                    {
                        ViewBag.MMPPostage5Desc = rmViewMMP.GetString(140);
                    }

                    if (!rmViewMMP.IsDBNull(141))
                    {
                        ViewBag.MMPPostage5Vol = rmViewMMP.GetString(141);
                    }

                    if (!rmViewMMP.IsDBNull(142))
                    {
                        ViewBag.MMPPostage5Rate = rmViewMMP.GetString(142);
                    }

                    if (!rmViewMMP.IsDBNull(143))
                    {
                        ViewBag.MMPPostage5Charges = rmViewMMP.GetString(143);
                    }

                    if (!rmViewMMP.IsDBNull(144))
                    {
                        ViewBag.MMPPostage6Desc = rmViewMMP.GetString(144);
                    }

                    if (!rmViewMMP.IsDBNull(145))
                    {
                        ViewBag.MMPPostage6Vol = rmViewMMP.GetString(145);
                    }

                    if (!rmViewMMP.IsDBNull(146))
                    {
                        ViewBag.MMPPostage6Rate = rmViewMMP.GetString(146);
                    }

                    if (!rmViewMMP.IsDBNull(147))
                    {
                        ViewBag.MMPPostage6Charges = rmViewMMP.GetString(147);
                    }

                    if (!rmViewMMP.IsDBNull(148))
                    {
                        ViewBag.MMPPostage7Desc = rmViewMMP.GetString(148);
                    }

                    if (!rmViewMMP.IsDBNull(149))
                    {
                        ViewBag.MMPPostage7Vol = rmViewMMP.GetString(149);
                    }

                    if (!rmViewMMP.IsDBNull(150))
                    {
                        ViewBag.MMPPostage7Rate = rmViewMMP.GetString(150);
                    }

                    if (!rmViewMMP.IsDBNull(151))
                    {
                        ViewBag.MMPPostage7Charges = rmViewMMP.GetString(151);
                    }

                    if (!rmViewMMP.IsDBNull(152))
                    {
                        ViewBag.MMPPostage8Desc = rmViewMMP.GetString(152);
                    }

                    if (!rmViewMMP.IsDBNull(153))
                    {
                        ViewBag.MMPPostage8Vol = rmViewMMP.GetString(153);
                    }

                    if (!rmViewMMP.IsDBNull(154))
                    {
                        ViewBag.MMPPostage8Rate = rmViewMMP.GetString(154);
                    }

                    if (!rmViewMMP.IsDBNull(155))
                    {
                        ViewBag.MMPPostage8Charges = rmViewMMP.GetString(155);
                    }

                    if (!rmViewMMP.IsDBNull(156))
                    {
                        ViewBag.MMPImprest1Desc = rmViewMMP.GetString(156);
                    }

                    if (!rmViewMMP.IsDBNull(157))
                    {
                        ViewBag.MMPImprest1Vol = rmViewMMP.GetString(157);
                    }

                    if (!rmViewMMP.IsDBNull(158))
                    {
                        ViewBag.MMPImprest1Rate = rmViewMMP.GetString(158);
                    }

                    if (!rmViewMMP.IsDBNull(159))
                    {
                        ViewBag.MMPImprest1Charges = rmViewMMP.GetString(159);
                    }

                    if (!rmViewMMP.IsDBNull(160))
                    {
                        ViewBag.MMPImprest2Desc = rmViewMMP.GetString(160);
                    }

                    if (!rmViewMMP.IsDBNull(161))
                    {
                        ViewBag.MMPImprest2Vol = rmViewMMP.GetString(161);
                    }

                    if (!rmViewMMP.IsDBNull(162))
                    {
                        ViewBag.MMPImprest2Rate = rmViewMMP.GetString(162);
                    }

                    if (!rmViewMMP.IsDBNull(163))
                    {
                        ViewBag.MMPImprest2Charges = rmViewMMP.GetString(163);
                    }

                    if (!rmViewMMP.IsDBNull(164))
                    {
                        ViewBag.MMPImprest3Desc = rmViewMMP.GetString(164);
                    }

                    if (!rmViewMMP.IsDBNull(165))
                    {
                        ViewBag.MMPImprest3Vol = rmViewMMP.GetString(165);
                    }

                    if (!rmViewMMP.IsDBNull(166))
                    {
                        ViewBag.MMPImprest3Rate = rmViewMMP.GetString(166);
                    }

                    if (!rmViewMMP.IsDBNull(167))
                    {
                        ViewBag.MMPImprest3Charges = rmViewMMP.GetString(167);
                    }

                    if (!rmViewMMP.IsDBNull(168))
                    {
                        ViewBag.MMPImprest4Desc = rmViewMMP.GetString(168);
                    }

                    if (!rmViewMMP.IsDBNull(169))
                    {
                        ViewBag.MMPImprest4Vol = rmViewMMP.GetString(169);
                    }

                    if (!rmViewMMP.IsDBNull(168))
                    {
                        ViewBag.MMPImprest4Desc = rmViewMMP.GetString(168);
                    }

                    if (!rmViewMMP.IsDBNull(169))
                    {
                        ViewBag.MMPImprest4Vol = rmViewMMP.GetString(169);
                    }

                    if (!rmViewMMP.IsDBNull(170))
                    {
                        ViewBag.MMPImprest4Rate = rmViewMMP.GetString(170);
                    }

                    if (!rmViewMMP.IsDBNull(171))
                    {
                        ViewBag.MMPImprest4Charges = rmViewMMP.GetString(171);
                    }

                    if (!rmViewMMP.IsDBNull(172))
                    {
                        ViewBag.MMPImprest5Desc = rmViewMMP.GetString(172);
                    }

                    if (!rmViewMMP.IsDBNull(173))
                    {
                        ViewBag.MMPImprest5Vol = rmViewMMP.GetString(173);
                    }

                    if (!rmViewMMP.IsDBNull(174))
                    {
                        ViewBag.MMPImprest5Rate = rmViewMMP.GetString(174);
                    }

                    if (!rmViewMMP.IsDBNull(175))
                    {
                        ViewBag.MMPImprest5Charges = rmViewMMP.GetString(175);
                    }

                    if (!rmViewMMP.IsDBNull(176))
                    {
                        ViewBag.MMPImprest6Desc = rmViewMMP.GetString(176);
                    }

                    if (!rmViewMMP.IsDBNull(177))
                    {
                        ViewBag.MMPImprest6Vol = rmViewMMP.GetString(177);
                    }

                    if (!rmViewMMP.IsDBNull(178))
                    {
                        ViewBag.MMPImprest6Rate = rmViewMMP.GetString(178);
                    }

                    if (!rmViewMMP.IsDBNull(179))
                    {
                        ViewBag.MMPImprest6Charges = rmViewMMP.GetString(179);
                    }

                    if (!rmViewMMP.IsDBNull(180))
                    {
                        ViewBag.MMPImprest7Desc = rmViewMMP.GetString(180);
                    }

                    if (!rmViewMMP.IsDBNull(181))
                    {
                        ViewBag.MMPImprest7Vol = rmViewMMP.GetString(181);
                    }

                    if (!rmViewMMP.IsDBNull(182))
                    {
                        ViewBag.MMPImprest7Rate = rmViewMMP.GetString(182);
                    }

                    if (!rmViewMMP.IsDBNull(183))
                    {
                        ViewBag.MMPImprest7Charges = rmViewMMP.GetString(183);
                    }

                    if (!rmViewMMP.IsDBNull(184))
                    {
                        ViewBag.MMPImprest8Desc = rmViewMMP.GetString(184);
                    }

                    if (!rmViewMMP.IsDBNull(185))
                    {
                        ViewBag.MMPImprest8Vol = rmViewMMP.GetString(185);
                    }

                    if (!rmViewMMP.IsDBNull(186))
                    {
                        ViewBag.MMPImprest8Rate = rmViewMMP.GetString(186);
                    }

                    if (!rmViewMMP.IsDBNull(187))
                    {
                        ViewBag.MMPImprest8Charges = rmViewMMP.GetString(187);
                    }

                    if (!rmViewMMP.IsDBNull(188))
                    {
                        ViewBag.MMPRebateDesc = rmViewMMP.GetString(188);
                    }

                    if (!rmViewMMP.IsDBNull(189))
                    {
                        ViewBag.MMPRebateVol = rmViewMMP.GetString(189);
                    }

                    if (!rmViewMMP.IsDBNull(190))
                    {
                        ViewBag.MMPRebateRate = rmViewMMP.GetString(190);
                    }

                    if (!rmViewMMP.IsDBNull(191))
                    {
                        ViewBag.MMPRebateCharges = rmViewMMP.GetString(191);
                    }

                    if (!rmViewMMP.IsDBNull(192))
                    {
                        ViewBag.MMPFrankingDesc = rmViewMMP.GetString(192);
                    }

                    if (!rmViewMMP.IsDBNull(193))
                    {
                        ViewBag.MMPFrankingVol = rmViewMMP.GetString(193);
                    }

                    if (!rmViewMMP.IsDBNull(194))
                    {
                        ViewBag.MMPFrankingRate = rmViewMMP.GetString(194);
                    }

                    if (!rmViewMMP.IsDBNull(195))
                    {
                        ViewBag.MMPFrankingCharges = rmViewMMP.GetString(195);
                    }

                    if (!rmViewMMP.IsDBNull(196))
                    {
                        ViewBag.MMPFranking10Desc = rmViewMMP.GetString(196);
                    }

                    if (!rmViewMMP.IsDBNull(197))
                    {
                        ViewBag.MMPFranking10Vol = rmViewMMP.GetString(197);
                    }

                    if (!rmViewMMP.IsDBNull(198))
                    {
                        ViewBag.MMPFranking10Rate = rmViewMMP.GetString(198);
                    }

                    if (!rmViewMMP.IsDBNull(199))
                    {
                        ViewBag.MMPFranking10Charges = rmViewMMP.GetString(199);
                    }

                    if (!rmViewMMP.IsDBNull(200))
                    {
                        ViewBag.MMPAirmailDesc = rmViewMMP.GetString(200);
                    }

                    if (!rmViewMMP.IsDBNull(201))
                    {
                        ViewBag.MMPAirmailVol = rmViewMMP.GetString(201);
                    }

                    if (!rmViewMMP.IsDBNull(202))
                    {
                        ViewBag.MMPAirmailRate = rmViewMMP.GetString(202);
                    }

                    if (!rmViewMMP.IsDBNull(203))
                    {
                        ViewBag.MMPAirmailCharges = rmViewMMP.GetString(203);
                    }

                    if (!rmViewMMP.IsDBNull(204))
                    {
                        ViewBag.MMPSporeDesc = rmViewMMP.GetString(204);
                    }

                    if (!rmViewMMP.IsDBNull(205))
                    {
                        ViewBag.MMPSporeVol = rmViewMMP.GetString(205);
                    }

                    if (!rmViewMMP.IsDBNull(206))
                    {
                        ViewBag.MMPSporeRate = rmViewMMP.GetString(206);
                    }

                    if (!rmViewMMP.IsDBNull(207))
                    {
                        ViewBag.MMPSporeCharges = rmViewMMP.GetString(207);
                    }

                    if (!rmViewMMP.IsDBNull(208))
                    {
                        ViewBag.MMPTLetterDesc = rmViewMMP.GetString(208);
                    }

                    if (!rmViewMMP.IsDBNull(209))
                    {
                        ViewBag.MMPTLetterVol = rmViewMMP.GetString(209);
                    }

                    if (!rmViewMMP.IsDBNull(210))
                    {
                        ViewBag.MMPTLetterRate = rmViewMMP.GetString(210);
                    }

                    if (!rmViewMMP.IsDBNull(211))
                    {
                        ViewBag.MMPTLetterCharges = rmViewMMP.GetString(211);
                    }

                    if (!rmViewMMP.IsDBNull(212))
                    {
                        ViewBag.MMPNPCDesc = rmViewMMP.GetString(212);
                    }

                    if (!rmViewMMP.IsDBNull(213))
                    {
                        ViewBag.MMPNPCVol = rmViewMMP.GetString(213);
                    }

                    if (!rmViewMMP.IsDBNull(214))
                    {
                        ViewBag.MMPNPCRate = rmViewMMP.GetString(214);
                    }

                    if (!rmViewMMP.IsDBNull(215))
                    {
                        ViewBag.MMPNPCCharges = rmViewMMP.GetString(215);
                    }

                    if (!rmViewMMP.IsDBNull(216))
                    {
                        ViewBag.MMPMix10Desc = rmViewMMP.GetString(216);
                    }

                    if (!rmViewMMP.IsDBNull(217))
                    {
                        ViewBag.MMPMix10Vol = rmViewMMP.GetString(217);
                    }

                    if (!rmViewMMP.IsDBNull(218))
                    {
                        ViewBag.MMPMix10Rate = rmViewMMP.GetString(218);
                    }

                    if (!rmViewMMP.IsDBNull(219))
                    {
                        ViewBag.MMPMix10Charges = rmViewMMP.GetString(219);
                    }

                    if (!rmViewMMP.IsDBNull(220))
                    {
                        ViewBag.MMPRegisteredMailsDesc = rmViewMMP.GetString(220);
                    }

                    if (!rmViewMMP.IsDBNull(221))
                    {
                        ViewBag.MMPRegisteredMailsVol = rmViewMMP.GetString(221);
                    }

                    if (!rmViewMMP.IsDBNull(222))
                    {
                        ViewBag.MMPRegisteredMailsRate = rmViewMMP.GetString(222);
                    }

                    if (!rmViewMMP.IsDBNull(223))
                    {
                        ViewBag.MMPRegisteredMailsCharges = rmViewMMP.GetString(223);
                    }

                    if (!rmViewMMP.IsDBNull(224))
                    {
                        ViewBag.MMPRegisteredMails2Desc = rmViewMMP.GetString(224);
                    }

                    if (!rmViewMMP.IsDBNull(225))
                    {
                        ViewBag.MMPRegisteredMails2Vol = rmViewMMP.GetString(225);
                    }

                    if (!rmViewMMP.IsDBNull(226))
                    {
                        ViewBag.MMPRegisteredMails2Rate = rmViewMMP.GetString(226);
                    }

                    if (!rmViewMMP.IsDBNull(227))
                    {
                        ViewBag.MMPRegisteredMails2Charges = rmViewMMP.GetString(227);
                    }

                    if (!rmViewMMP.IsDBNull(228))
                    {
                        ViewBag.MMPImprestRMDesc = rmViewMMP.GetString(228);
                    }

                    if (!rmViewMMP.IsDBNull(229))
                    {
                        ViewBag.MMPImprestRMVol = rmViewMMP.GetString(229);
                    }

                    if (!rmViewMMP.IsDBNull(230))
                    {
                        ViewBag.MMPImprestRMRate = rmViewMMP.GetString(230);
                    }

                    if (!rmViewMMP.IsDBNull(231))
                    {
                        ViewBag.MMPImprestRMCharges = rmViewMMP.GetString(231);
                    }

                    if (!rmViewMMP.IsDBNull(232))
                    {
                        ViewBag.MMPImprestRM2Desc = rmViewMMP.GetString(232);
                    }

                    if (!rmViewMMP.IsDBNull(233))
                    {
                        ViewBag.MMPImprestRM2Vol = rmViewMMP.GetString(233);
                    }

                    if (!rmViewMMP.IsDBNull(234))
                    {
                        ViewBag.MMPImprestRM2Rate = rmViewMMP.GetString(234);
                    }

                    if (!rmViewMMP.IsDBNull(235))
                    {
                        ViewBag.MMPImprestRM2Charges = rmViewMMP.GetString(235);
                    }

                    if (!rmViewMMP.IsDBNull(236))
                    {
                        ViewBag.MMPDataSFTPVol = rmViewMMP.GetString(236);
                    }

                    if (!rmViewMMP.IsDBNull(237))
                    {
                        ViewBag.MMPDataSFTPRate = rmViewMMP.GetString(237);
                    }

                    if (!rmViewMMP.IsDBNull(238))
                    {
                        ViewBag.MMPDataSFTPCharges = rmViewMMP.GetString(238);
                    }

                    if (!rmViewMMP.IsDBNull(239))
                    {
                        ViewBag.MMPCDArchivingVol = rmViewMMP.GetString(239);
                    }


                    if (!rmViewMMP.IsDBNull(240))
                    {
                        ViewBag.MMPCDArchivingRate = rmViewMMP.GetString(240);
                    }

                    if (!rmViewMMP.IsDBNull(241))
                    {
                        ViewBag.MMPCDArchivingCharges = rmViewMMP.GetString(241);
                    }
                }

            }



            cn.Close();
        }
        ViewBag.RatePerPiece = RatePerPiece;
        ViewBag.TotalCharges = TotalCharges;


        //return View(MatDescMail);
        return View();


        //        ViewBag.AuditTrail
        //ViewBag.RatePerPiece
        //ViewBag.TotalCharges
        //ViewBag.StockBalance
        //ViewBag.MB5KVol
        //ViewBag.MB5KRate
        //ViewBag.MB5KCharges
        //ViewBag.InsertingVol
        //ViewBag.InsertingRate
        //ViewBag.InsertingCharges
        //ViewBag.HandlingVol
        //ViewBag.HandlingRate
        //ViewBag.HandlingCharges
        //ViewBag.SealingVol
        //ViewBag.SealingRate
        //ViewBag.SealingCharges
        //ViewBag.TearingVol
        //ViewBag.TearingRate
        //ViewBag.TearingCharges
        //ViewBag.FoldingVol
        //ViewBag.FoldingRate
        //ViewBag.FoldingCharges
        //ViewBag.StockingVol
        //ViewBag.StockingRate
        //ViewBag.StockingCharges
        //ViewBag.LabellingVol
        //ViewBag.LabellingRate
        //ViewBag.LabellingCharges
        //ViewBag.SelfMailerVol
        //ViewBag.SelfMailerRate
        //ViewBag.SelfMailerCharges
        //ViewBag.SelfMaterialVol
        //ViewBag.SelfMaterialRate
        //ViewBag.SelfMaterialCharges
        //ViewBag.OvertimeVol
        //ViewBag.OvertimeRate
        //ViewBag.OvertimeCharges
        //ViewBag.CourierVol
        //ViewBag.CourierRate
        //ViewBag.CourierCharges
        //ViewBag.DeliveryVol
        //ViewBag.DeliveryRate
        //ViewBag.DeliveryCharges
        //ViewBag.MatchingVol
        //ViewBag.MatchingRate
        //ViewBag.MatchingCharges
        //ViewBag.LabellingVol
        //ViewBag.LabellingRate
        //ViewBag.LabellingCharges
        //ViewBag.IPDSVol
        //ViewBag.IPDSRate
        //ViewBag.IPDSCharges
        //ViewBag.ProgrammingVol
        //ViewBag.ProgrammingRate
        //ViewBag.ProgrammingCharges
        //ViewBag.ReturnMailVol
        //ViewBag.ReturnMailRate
        //ViewBag.ReturnMailCharges
        //ViewBag.RetainerVol
        //ViewBag.RetainerRate
        //ViewBag.RetainerCharges
        //ViewBag.RubberStampingVol
        //ViewBag.RubberStampingRate
        //ViewBag.RubberStampingCharges
        //ViewBag.GlueingVol
        //ViewBag.GlueingRate
        //ViewBag.GlueingCharges
        //ViewBag.CuttingVol
        //ViewBag.CuttingRate
        //ViewBag.CuttingCharges
        //ViewBag.MergingVol
        //ViewBag.MergingRate
        //ViewBag.MergingCharges
        //ViewBag.DiscountVol
        //ViewBag.DiscountRate
        //ViewBag.DiscountCharges
        //ViewBag.Postage1Desc
        //ViewBag.Postage1Vol
        //ViewBag.Postage1Rate
        //ViewBag.Postage1Charges
        //ViewBag.Imprest1Desc
        //ViewBag.Imprest1Vol
        //ViewBag.Imprest1Rate
        //ViewBag.Imprest1Charges
        //ViewBag.Postage2Desc
        //ViewBag.Postage2Vol
        //ViewBag.Post2Rate
        //ViewBag.Postage2Charges
        //ViewBag.Imprest2Desc
        //ViewBag.Imprest2Vol
        //ViewBag.Imprest2Rate
        //ViewBag.Imprest2Charges
        //ViewBag.Postage3Desc
        //ViewBag.Postage3Vol
        //ViewBag.Postage3Rate
        //ViewBag.Postage3Charges
        //ViewBag.Imprest3Desc
        //ViewBag.Imprest3Vol
        //ViewBag.Imprest3Rate
        //ViewBag.Imprest3Charges
        //ViewBag.Postage4Desc
        //ViewBag.Postage4Vol
        //ViewBag.Postage4Rate
        //ViewBag.Postage4Charges
        //ViewBag.Imprest4Desc
        //ViewBag.Imprest4Vol
        //ViewBag.Imprest4Rate
        //ViewBag.Imprest4Charges
        //ViewBag.Postage5Desc
        //ViewBag.Postage5Vol
        //ViewBag.Postage5Rate
        //ViewBag.Postage5Charges
        //ViewBag.Imprest5Desc
        //ViewBag.Imprest5Vol
        //ViewBag.Imprest5Rate
        //ViewBag.Imprest5Chares
        //ViewBag.Postage6Desc
        //ViewBag.Postage6Vol
        //ViewBag.Postage6Rate
        //ViewBag.Postage6Charges
        //ViewBag.Imprest6Desc
        //ViewBag.Imprest6Vol
        //ViewBag.Imprest6Rate
        //ViewBag.Imprest6Charges
        //ViewBag.Postage7Desc
        //ViewBag.Postage7Vol
        //ViewBag.Postage7Rate
        //ViewBag.Postage7Charges
        //ViewBag.Imprest7Desc
        //ViewBag.Imprest7Vol
        //ViewBag.Imprest7Rate
        //ViewBag.Imprest7Charges
        //ViewBag.Postage8Desc
        //ViewBag.Postage8Vol
        //ViewBag.Postage8Rate
        //ViewBag.Postage8Charges
        //ViewBag.Imprest8Desc
        //ViewBag.Imprest8Vol
        //ViewBag.Imprest8Rate
        //ViewBag.Imprest8Charges
        //ViewBag.RebateDesc
        //ViewBag.RebateVol
        //ViewBag.RebateRate
        //ViewBag.RebateCharges
        //ViewBag.FrankingDesc
        //ViewBag.FrankingVol
        //ViewBag.FrankingRate
        //ViewBag.FrankingCharges
        //ViewBag.Franking10Desc
        //ViewBag.Franking10Vol
        //ViewBag.Franking10Rate
        //ViewBag.Franking10Charges
        //ViewBag.AirmailDesc
        //ViewBag.AirmailVol
        //ViewBag.AirmailRate
        //ViewBag.AirmailCharges
        //ViewBag.SporeDesc
        //ViewBag.SporeVol
        //ViewBag.SporeRate
        //ViewBag.SporeCharges
        //ViewBag.TLetterDesc
        //ViewBag.TLetterVol
        //ViewBag.TLetterRate
        //ViewBag.TLetterCharges
        //ViewBag.NPCDesc
        //ViewBag.NPCVol
        //ViewBag.NPCRate
        //ViewBag.NPCCharges
        //ViewBag.Mix10Desc
        //ViewBag.Mix10Vol
        //ViewBag.Mix10Rate
        //ViewBag.Mix10Charges
        //ViewBag.RegisteredMailsDesc
        //ViewBag.RegisteredMailsVol
        //ViewBag.RegisteredMailsRate
        //ViewBag.RegisteredMailsCharges
        //ViewBag.ImprestRMDesc
        //ViewBag.ImprestRMVol
        //ViewBag.ImprestRMRate
        //ViewBag.ImprestRMCharges
        //ViewBag.RegisteredMails2Desc
        //ViewBag.RegisteredMails2Vol
        //ViewBag.RegisteredMails2Rate
        //ViewBag.RegisteredMails2Charges
        //ViewBag.ImprestRM2Desc
        //ViewBag.ImprestRM2Vol
        //ViewBag.ImprestRM2Rate
        //ViewBag.ImprestRM2Charges
    }



    public ActionResult CreateBatch(string set, string ProductName, string BatchId)
    {
        List<JobAuditTrailDetail> JobList = new List<JobAuditTrailDetail>();
        int checkBoxCount = 0;

        //Debug.WriteLine("Product Name Get : " + productName);
        ViewBag.BatchId = BatchId;


        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        {
            cn.Open();

            int bil = 1;

            //SqlCommand cmdView = new SqlCommand("SELECT LogTagNo, Customer_Name, ProductName, MAX(AccQty), MAX(ImpQty), MAX(PageQty) FROM JobAuditTrailDetail WHERE Status='FINANCE' GROUP BY LogTagNo, Customer_Name, ProductName ", cn);
            SqlCommand cmdView = new SqlCommand("SELECT LogTagNo, Customer_Name, ProductName, MAX(AccQty), MAX(ImpQty), MAX(PageQty), JobSheetNo FROM JobAuditTrailDetail WHERE ProductName LIKE @ProductName AND Status='FINANCE' Group By LogTagNo,Customer_Name, ProductName, JobSheetNo", cn);
            cmdView.Parameters.AddWithValue("@ProductName", "%" + ProductName + "%");
            SqlDataReader rmView = cmdView.ExecuteReader();

            while (rmView.Read())
            {
                List<string> totalAll = TotalAll(rmView["LogTagNo"].ToString());

                JobAuditTrailDetail model = new JobAuditTrailDetail();
                {
                    model.Bil = bil;
                    model.LogTagNo = rmView.GetString(0);
                    model.Customer_Name = rmView.GetString(1);
                    model.ProductName = rmView.GetString(2);
                    model.AccQty = totalAll[0];
                    model.ImpQty = totalAll[2];
                    model.PageQty = totalAll[1];
                }
                bil++;
                JobList.Add(model);
            }

            SqlCommand TotalCheckbox = new SqlCommand("SELECT Count(LogTagNo) FROM JobAuditTrailDetail WHERE Status='FINANCE'", cn);
            SqlDataReader rmTotalCheckBox = TotalCheckbox.ExecuteReader();

            while (rmTotalCheckBox.Read())
            {
                if (rmTotalCheckBox.HasRows)
                {
                    checkBoxCount = rmTotalCheckBox.GetInt32(0);
                    ViewBag.CheckBoxCount = checkBoxCount;
                }
            }

            List<string> LogTagList = new List<string>();
            SqlCommand checkJobBatch = new SqlCommand("SELECT LogTagNo From JobBatch WHERE BatchId=@checkBatchId", cn);
            checkJobBatch.Parameters.AddWithValue("@checkBatchId", BatchId);
            SqlDataReader rmJobBatch = checkJobBatch.ExecuteReader();

            while (rmJobBatch.Read())
            {
                LogTagList.Add(rmJobBatch.GetString(0));
            }

            foreach (var logtag in LogTagList)
            {
                Debug.WriteLine("Item : " + logtag);
            }

            ViewBag.LogTagList = LogTagList;

            cn.Close();
        }

        ViewBag.ProductName = ProductName;
        return View(JobList);
    }

    [HttpPost]
    public ActionResult CreateBatch(FormCollection formCollection, string set, string ProductName, string BatchId)
    {
        List<JobAuditTrailDetail> JobList = new List<JobAuditTrailDetail>();

        string LogTagNo = "";
        string JobSheetNo = "";
        Guid? JIID = null;

        if (string.IsNullOrEmpty(BatchId))
        {
            ProductName = formCollection["ProductName"];
        }

        Debug.WriteLine("product name post : " + ProductName);

        string[] productDetails = ProductName.Split('$');

        //foreach(var x in productDetails)
        //{
        //    Debug.WriteLine("x value : "+x);
        //}

        ViewBag.Customer_Name = productDetails[0];
        ViewBag.ProductName = productDetails[1];

        Debug.WriteLine("Product Name : " + productDetails[1]);

        int checkBoxCount = 0;

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        {
            cn.Open();

            int bil = 1;

            SqlCommand cmdView = new SqlCommand("SELECT LogTagNo, Customer_Name, ProductName, MAX(AccQty), MAX(ImpQty), MAX(PageQty), JobSheetNo FROM JobAuditTrailDetail WHERE ProductName LIKE @ProductName AND Status='FINANCE' Group By LogTagNo,Customer_Name, ProductName, JobSheetNo", cn);
            cmdView.Parameters.AddWithValue("@ProductName", "%"+productDetails[1]+"%");
            SqlDataReader rmView = cmdView.ExecuteReader();

            while (rmView.Read())
            {
                List<string> totalAll = TotalAll(rmView["LogTagNo"].ToString());

                JobAuditTrailDetail model = new JobAuditTrailDetail();
                {
                    model.Bil = bil;
                    model.LogTagNo = rmView.GetString(0);
                    model.Customer_Name = rmView.GetString(1);
                    model.ProductName = rmView.GetString(2);
                    model.AccQty = totalAll[0];
                    model.ImpQty = totalAll[2];
                    model.PageQty = totalAll[1];
                }

                JobSheetNo = rmView.GetString(6);

                bil++;
                JobList.Add(model);
            }


            SqlCommand getId = new SqlCommand("Select JobInstruction.Id FROM JobInstruction FULL JOIN JobAuditTrailDetail ON JobAuditTrailDetail.JobSheetNo=JobInstruction.JobSheetNo WHERE JobAuditTrailDetail.JobSheetNo = @JSID AND JobAuditTrailDetail.Status='FINANCE'", cn);
            getId.Parameters.AddWithValue("@JSID", JobSheetNo);
            SqlDataReader rmID = getId.ExecuteReader();

            while (rmID.Read())
            {
                JIID = rmID.GetGuid(0);
            }

            Debug.WriteLine("JI ID : " + JIID);

            if (set == "submit")
            {
                var _No = new JobBatchNo();

                SqlCommand countCheckbox = new SqlCommand("SELECT COUNT(LogTagNo) FROM JobAuditTrailDetail WHERE Status='FINANCE'", cn);
                SqlDataReader rmCount = countCheckbox.ExecuteReader();

                while (rmCount.Read())
                {
                    checkBoxCount = rmCount.GetInt32(0);
                }

                //Debug.WriteLine("Checkbox count : " + checkBoxCount);

                rmCount.Close();

                string[] checkbox = new string[checkBoxCount + 1];

                List<int> TickedCheckbox = new List<int>();

                for (int i = 1; i <= checkBoxCount; i++)
                {
                    //Debug.WriteLine("i value : " + i);

                    checkbox[i] = formCollection["box" + i];

                    if (!string.IsNullOrEmpty(checkbox[i]))
                    {
                        TickedCheckbox.Add(i);
                        //Debug.WriteLine("Checkbox " + i + " is ticked");

                    }
                    else
                    {
                        Debug.WriteLine("Checkbox " + i + " is empty");
                    }

                }

                //Debug.WriteLine("Ticked Checkbox count : " + checkBoxCount);
                //Debug.WriteLine("Ticked Checkbox item : ");

                //foreach(var x in TickedCheckbox)
                //{
                //    Debug.WriteLine("checkbox : " + x);
                //}

                if (!string.IsNullOrEmpty(BatchId))
                {
                    SqlCommand cmdDelete = new SqlCommand("DELETE FROM JobBatch WHERE BatchId=@BatchIdDelete", cn);
                    cmdDelete.Parameters.AddWithValue("@BatchIdDelete", BatchId);

                    cmdDelete.ExecuteNonQuery();
                }
                for (int i = 1; i <= checkBoxCount; i++)
                {

                    checkbox[i] = formCollection["box" + i];


                    //Debug.WriteLine("i value: " + i);

                    //Debug.WriteLine("checkbox " + i + " : " + formCollection["box" + i]);

                    if (TickedCheckbox.Contains(i))
                    {

                        if (!string.IsNullOrEmpty(checkbox[i]))
                        {
                            LogTagNo = checkbox[i];

                            if (!string.IsNullOrEmpty(BatchId))
                            {
                                SqlCommand cmdUpdate = new SqlCommand("INSERT INTO JobBatch(Id,BatchId,LogTagNo) VALUES(@IdUpdate,@BatchIdUpdate,@LogTagNoUpdate)", cn);
                                Guid Id = Guid.NewGuid();

                                cmdUpdate.Parameters.AddWithValue("@IdUpdate", Id);
                                cmdUpdate.Parameters.AddWithValue("@BatchIdUpdate", BatchId);
                                cmdUpdate.Parameters.AddWithValue("@LogTagNoUpdate", checkbox[i]);

                                cmdUpdate.ExecuteNonQuery();


                            }
                            else
                            {
                                SqlCommand cmdInsert = new SqlCommand("INSERT INTO JobBatch(Id,BatchId,LogTagNo) VALUES(@Id,@BatchId,@LogTagNo)", cn);
                                Guid Id = Guid.NewGuid();

                                cmdInsert.Parameters.AddWithValue("@Id", Id);
                                cmdInsert.Parameters.AddWithValue("@BatchId", _No.RefNo);
                                cmdInsert.Parameters.AddWithValue("@LogTagNo", checkbox[i]);

                                cmdInsert.ExecuteNonQuery();

                            }



                        }
                    }

                    //Debug.WriteLine("checkbox " + i + " value : " + checkbox[i]);
                }



                //return RedirectToAction("ViewMPRBatch", new { BatchId=_No.RefNo, Customer_Name = productDetails[0], LogTagNo=LogTagNo  });
                if (!string.IsNullOrEmpty(BatchId))
                {
                    return RedirectToAction("ManageBatch");

                }
                else
                {
                    return RedirectToAction("CreateMPR", new { JobSheetNo = JobSheetNo, BatchId = _No.RefNo });
                }



            }

            cn.Close();
        }
        return View(JobList);


    }


    public ActionResult ViewMPRNew(string LogTagNo, string JobSheetNo,string ProductName)
    {
        List<JobAuditTrailDetail> File = new List<JobAuditTrailDetail>();
        List<int> SumAcc = new List<int>();
        List<int> SumImp = new List<int>();
        List<int> SumPage = new List<int>();

        string Contact_Person = "";
        string Customer_Name = "";
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        {
            cn.Open();

            SqlCommand getJS = new SqlCommand("SELECT TOP(1) JobSheetNo FROM JobAuditTrailDetail WHERE LogTagNo = @LogTagNoJS", cn);
            getJS.Parameters.AddWithValue("@LogTagNoJS", LogTagNo);
            SqlDataReader rmJS = getJS.ExecuteReader();
            
            while(rmJS.Read())
            {
                if(!rmJS.IsDBNull(0))
                {
                    JobSheetNo = rmJS.GetString(0);

                }
            }

            SqlCommand getChannel = new SqlCommand(@"SELECT DeliveryChannel FROM JobInstruction WHERE JobSheetNo = @JSChannel", cn);
            getChannel.Parameters.AddWithValue("@JSChannel", JobSheetNo);
            SqlDataReader rmChannel = getChannel.ExecuteReader();

            if(rmChannel.HasRows)
            {
                while(rmChannel.Read())
                {
                    if(!rmChannel.IsDBNull(0))
                    {
                        ViewBag.DeliveryChannel = rmChannel.GetString(0);
                    }
                }
            }


            SqlCommand tableA = new SqlCommand("SELECT JobAuditTrailDetail.Id, JobAuditTrailDetail.LogTagNo, JobAuditTrailDetail.JobSheetNo, JobAuditTrailDetail.FileId, JobAuditTrailDetail.AccQty, JobAuditTrailDetail.ImpQty, JobAuditTrailDetail.PageQty, JobAuditTrailDetail.ProductName," +
                "CONVERT(VARCHAR, CAST(JobAuditTrailDetail.ProcessDate AS DATE), 3), CONVERT(VARCHAR, CAST(Hist_ProductionSlip.StartDateOn AS DATE), 3),CONVERT(VARCHAR, CAST(MAX(PostingManifest.PostingDateOn) AS DATE), 3) FROM JobAuditTrailDetail FULL JOIN Hist_ProductionSlip ON Hist_ProductionSlip.LogTagNo=JobAuditTrailDetail.LogTagNo " +
                "FULL JOIN PostingManifest ON PostingManifest.LogTagNo=JobAuditTrailDetail.LogTagNo WHERE JobAuditTrailDetail.LogTagNo=@LogTagNoTableA " +
                "GROUP BY JobAuditTrailDetail.Id, JobAuditTrailDetail.LogTagNo, JobAuditTrailDetail.JobSheetNo, JobAuditTrailDetail.FileId, JobAuditTrailDetail.AccQty, JobAuditTrailDetail.ImpQty, JobAuditTrailDetail.PageQty, JobAuditTrailDetail.ProductName,JobAuditTrailDetail.ProcessDate,Hist_ProductionSlip.StartDateOn", cn);

            //SqlCommand tableA = new SqlCommand(@" SELECT DISTINCT JobAuditTrailDetail.LogTagNo, SUM(CONVERT(INT, JobAuditTrailDetail.PageQty)), SUM(CONVERT(INT,JobAuditTrailDetail.ImpQty)), 
            //        SUM(CONVERT(INT,JobAuditTrailDetail.AccQty)),CONVERT(VARCHAR, CAST(JobAuditTrailDetail.RevStrtDateOn AS DATE), 3), CONVERT(VARCHAR, CONVERT(DATE, JobAuditTrailDetail.ProcessDate, 105), 3),
            //        JobAuditTrailDetail.RevStrtTime, CONVERT(VARCHAR, CAST(MAX(Hist_ProductionSlip.StartDateOn) AS DATE), 3) FROM JobAuditTrailDetail FULL JOIN Hist_ProductionSlip ON Hist_ProductionSlip.LogTagNo=JobAuditTrailDetail.LogTagNo
            //        WHERE JobAuditTrailDetail.LogTagNo = @LogTagNoTableA GROUP BY JobAuditTrailDetail.LogTagNo,JobAuditTrailDetail.RevStrtDateOn,JobAuditTrailDetail.RevStrtTime,JobAuditTrailDetail.ProcessDate", cn);

            tableA.Parameters.AddWithValue("@LogTagNoTableA", LogTagNo);
            SqlDataReader rmTableA = tableA.ExecuteReader();

            int bilTableA = 1;

            while (rmTableA.Read())
            {
                JobAuditTrailDetail model = new JobAuditTrailDetail();
                {
                    model.Bil = bilTableA++;
                    model.FileId = rmTableA.GetString(3);
                    model.AccQty = rmTableA.GetString(4);
                    model.ImpQty = rmTableA.GetString(5);
                    model.PageQty = rmTableA.GetString(6);
                    model.ProcessDateStr = rmTableA.GetString(8);

                    model.PrintSlip = rmTableA.GetString(9);
                    model.PlanDatePostOnTxt = rmTableA.GetString(10);


                    SumAcc.Add(Int32.Parse(model.AccQty));
                    SumImp.Add(Int32.Parse(model.ImpQty));
                    SumPage.Add(Int32.Parse(model.PageQty));
                }
                ViewBag.LogTagNo = rmTableA.GetString(1);

                // last minute addition, table c part, but i use query for table A for the sake of simplicity
                ViewBag.ProductName = rmTableA.GetString(7);



                File.Add(model);

            }

            ViewBag.SumAcc = SumAcc.Sum();
            ViewBag.SumPage = SumPage.Sum();
            ViewBag.SumImp = SumImp.Sum();

            int PageQty = SumPage.Sum();
            int AccQty = SumAcc.Sum();

            rmTableA.Close();

            SqlCommand cmdTableC = new SqlCommand("SELECT CONVERT(VARCHAR, CAST(A.StartDateOn AS DATE), 3), CONVERT(VARCHAR, CAST(B.PostingDateOn AS DATE), 3) FROM Hist_ProductionSlip AS A INNER JOIN PostingManifest AS B ON A.LogTagNo=B.LogTagNo WHERE A.LogTagNo = @LogTagNoTableC ", cn);
            cmdTableC.Parameters.AddWithValue("@LogTagNoTableC", LogTagNo);
            SqlDataReader rmTableC = cmdTableC.ExecuteReader();

            List<string> PrintedDate = new List<string>();
            List<string> PostingDate = new List<string>();

            while (rmTableC.Read())
            {
                if (!rmTableC.IsDBNull(0))
                {
                    PrintedDate.Add(rmTableC.GetString(0));
                }
                else
                {
                    PrintedDate.Add("");
                }

                if (!rmTableC.IsDBNull(1))
                {
                    PostingDate.Add(rmTableC.GetString(1));
                }
                else
                {
                    PostingDate.Add("");
                }
            }

            ViewBag.PrintedDate = PrintedDate;
            ViewBag.PostingDate = PostingDate;

            SqlCommand getJI = new SqlCommand("SELECT ContactPerson FROM MaterialDescriptionMail WHERE LogtagNo=@LogTagNo AND (ContactPerson IS NOT NULL OR ContactPerson !='') ORDER BY CreatedOn DESC", cn);
            getJI.Parameters.AddWithValue("@LogTagNo", LogTagNo);
            SqlDataReader rmJI = getJI.ExecuteReader();

            while (rmJI.Read())
            {
                if(!rmJI.IsDBNull(0))
                {
                    Contact_Person = rmJI.GetString(0);
                    ViewBag.Contact_Person = Contact_Person;
                }
                else
                {
                    Contact_Person = "-";
                    ViewBag.Contact_Person = Contact_Person;

                }

            }

            // CUSTOMER CONTACT DETAIL
            SqlCommand getContact = new SqlCommand("SELECT Cust_Phone, Cust_FaxNo, Cust_Mobile FROM CustomerDetails WHERE Contact_Person=@Contact_Person", cn);
            getContact.Parameters.AddWithValue("@Contact_Person", Contact_Person);
            SqlDataReader rmContact = getContact.ExecuteReader();

            while (rmContact.Read())
            {
                if (!rmContact.IsDBNull(0))
                {
                    ViewBag.Cust_Phone = rmContact.GetString(0);
                }

                if (!rmContact.IsDBNull(1))
                {
                    ViewBag.Cust_FaxNo = rmContact.GetString(1);
                }

                if (!rmContact.IsDBNull(2))
                {
                    ViewBag.Cust_Mobile = rmContact.GetString(2);
                }
            }


            //CUSTOMER NAME
            //ViewBag.Customer_Name = Customer_Name;
            SqlCommand cmdProduct = new SqlCommand(@"SELECT Customer_Name, CONVERT(VARCHAR, CAST(RevStrtDateOn AS DATE), 3) as RevStrtDateOn, RevStrtTime FROM JobAuditTrailDetail WHERE LogTagNo = @ProductName1", cn);
            cmdProduct.Parameters.AddWithValue("@ProductName1", LogTagNo);
            SqlDataReader rmProduct = cmdProduct.ExecuteReader();

            if (rmProduct.HasRows)
            {
                while (rmProduct.Read())
                {
                    if (!rmProduct.IsDBNull(0))
                    {
                        ViewBag.Customer_Name = rmProduct.GetString(0);
                    }

                    if (!rmProduct.IsDBNull(1))
                    {
                        ViewBag.CollectedDate = rmProduct["RevStrtDateOn"].ToString();
                    }

                    if (!rmProduct.IsDBNull(2))
                    {
                        ViewBag.CollectedTime = rmProduct.GetString(2);
                    }
                }
            }


            //REPORT DATE
            DateTime currentDate = DateTime.Now;
            string formattedDate = currentDate.ToString("dd/MM/yyyy");

            ViewBag.CurrentDate = formattedDate;



            foreach (var x in File)
            {
                Debug.WriteLine("File Id : " + x.LogTagNo);
                Debug.WriteLine("PageQty : " + x.PageQty);
                Debug.WriteLine("ImpQty : " + x.ImpQty);
                Debug.WriteLine("AccQty : " + x.AccQty);
                Debug.WriteLine("================================");

            }

            //Table D

            int OverseaSum = 0;
            int CourierSum = 0;
            int Re_turnSum = 0;
            int PO_BOXSum = 0;
            int InsertMMPSum = 0;
            string OverseasStr = "";
            string CourierStr = "";
            string Re_turnStr = "";
            string PO_BOXStr = "";
            string Ins_MaterialStr = "";
            string InsertMMPStr = "";
            string Local = "";

            SqlCommand TableD = new SqlCommand("SELECT SUM(CAST(Oversea AS INT)) AS Oversea, SUM(CAST(Courier AS INT)) AS Courier ,  SUM(CAST(Re_turn AS INT)) AS Re_turn , SUM(CAST(PO_BOX AS INT)) AS PO_BOX , SUM(CAST(RemarkIns_Material AS INT)) AS RemarkIns_Material , SUM(CAST(InsertMMP AS INT)) AS InsertMMP  , SUM(CAST(Local AS INT)) AS Local  FROM PostingManifest WHERE LogTagNo=@LogTagPosting", cn);
            TableD.Parameters.AddWithValue("@LogTagPosting", LogTagNo);
            SqlDataReader rmPosting = TableD.ExecuteReader();

            while (rmPosting.Read())
            {
                if (!rmPosting.IsDBNull(0))
                {
                    OverseasStr = rmPosting["Oversea"].ToString();
                }
                else
                {
                    OverseasStr = "0";
                }

                if (!rmPosting.IsDBNull(1))
                {
                    CourierStr = rmPosting["Courier"].ToString();

                }
                else
                {
                    CourierStr = "0";

                }

                if (!rmPosting.IsDBNull(2))
                {
                    Re_turnStr = rmPosting["Re_turn"].ToString();

                }
                else
                {
                    Re_turnStr = "0";
                }

                if (!rmPosting.IsDBNull(3))
                {
                    PO_BOXStr = rmPosting["PO_BOX"].ToString();

                }
                else
                {
                    PO_BOXStr = "0";

                }

                if (!rmPosting.IsDBNull(4))
                {
                    Ins_MaterialStr = rmPosting["Ins_Material"].ToString();
                }
                else
                {
                    Ins_MaterialStr = "0";
                }

                if (!rmPosting.IsDBNull(5))
                {
                    InsertMMPStr = rmPosting["InsertMMP"].ToString();
                }
                else
                {
                    InsertMMPStr = "0";

                }

                if (!rmPosting.IsDBNull(6))
                {
                    Local = rmPosting["Local"].ToString();
                }
                else
                {
                    Local = "0";

                }


                int Oversea = Int32.Parse(OverseasStr);
                int Courier = Int32.Parse(CourierStr);
                int Re_turn = Int32.Parse(Re_turnStr);
                int PO_BOX = Int32.Parse(PO_BOXStr);
                int Ins_Material = Int32.Parse(Ins_MaterialStr);
                int InsertMMP = Int32.Parse(InsertMMPStr);


                PageQty = PageQty - Oversea - Courier - Re_turn - InsertMMP;

                OverseaSum += Oversea;
                CourierSum += Courier;
                Re_turnSum += Re_turn;
                PO_BOXSum += PO_BOX;
                InsertMMPSum += InsertMMP;

                ViewBag.Oversea = OverseaSum;
                ViewBag.Courier = CourierSum;
                ViewBag.Return = Re_turnSum;
                ViewBag.PO_BOX = PO_BOXSum;
                ViewBag.Ins_Material = Ins_Material;
                ViewBag.InsertMMP = InsertMMPSum;
                ViewBag.Local = Local;
                ViewBag.AccQtyPost = AccQty;
            }

            rmPosting.Close();

            //table E

            double TotalChargesTableE = 0;
            List<string> MaterialType = new List<string>();
            List<string> MatDesc = new List<string>();
            List<string> MatRate = new List<string>();
            List<double> MatCharges = new List<double>();
            List<string> MatUsage = new List<string>();
            List<double> MatSST = new List<double>();

            double MatTax = 0;
            //Jobsheetno actually is logtagno for this case here
            SqlCommand TableE = new SqlCommand("SELECT MaterialType, Material_Description, Rate_Per_Piece, Total_Charges, Volume_Usage FROM MaterialDescriptionMail WHERE LogTagNo =@LogTagNoTableE AND MaterialType IS NOT NULL AND Material_Description IS NOT NULL AND Rate_Per_Piece IS NOT NULL AND Total_Charges IS NOT NULL AND Volume_Usage IS NOT NULL", cn);
            TableE.Parameters.AddWithValue("@LogTagNoTableE", LogTagNo);
            SqlDataReader rmTableE = TableE.ExecuteReader();

            while (rmTableE.Read())
            {
                if (!string.IsNullOrEmpty(rmTableE.GetString(0)))
                {
                    MaterialType.Add(rmTableE.GetString(0));
                }
                else
                {
                    MaterialType.Add("");
                }

                if (!string.IsNullOrEmpty(rmTableE.GetString(1)))
                {
                    MatDesc.Add(rmTableE.GetString(1));
                }
                else
                {
                    MatDesc.Add("");
                }

                if (!string.IsNullOrEmpty(rmTableE.GetString(2)))
                {
                    MatRate.Add(rmTableE.GetString(2));
                }
                else
                {
                    MatRate.Add("");
                }

                if (!string.IsNullOrEmpty(rmTableE.GetString(3)))
                {
                    MatCharges.Add(double.Parse((rmTableE.GetString(3))));
                    MatTax = double.Parse((rmTableE.GetString(3))) * 0.08;
                    MatSST.Add(MatTax);
                }
                else
                {
                    MatCharges.Add(0.00);
                    MatSST.Add(0.00);
                }

                if (!string.IsNullOrEmpty(rmTableE.GetString(4)))
                {
                    MatUsage.Add((rmTableE.GetString(4)));
                }
                else
                {
                    MatUsage.Add("");
                }

                //ViewBag.MaterialType = rmTableE.GetString(0);
                //ViewBag.MaterialDescription = rmTableE.GetString(1);
                //ViewBag.Rate = rmTableE.GetString(2);
                //ViewBag.TotalCharges = rmTableE.GetString(3);

                TotalChargesTableE = double.Parse(rmTableE.GetString(3));
            }

            ViewBag.MaterialType = MaterialType;
            ViewBag.MaterialDescription = MatDesc;
            ViewBag.Rate = MatRate;
            ViewBag.TotalCharges = MatCharges;
            ViewBag.MaterialUsage = MatUsage;
            ViewBag.MatSST = MatSST;


            //End of table E
            //Debug.WriteLine("End of table E");


            //Table F Content Check

            int postingCounter = 2;
            int InsertionCounter = 4;
            int BrochureCounter = 5;
            int PostageCounter = 8;
            int ImprestCounter = 8;

            List<string> SCColumn = new List<string>();



            //posting
            for (int counter = 1; counter <= postingCounter; counter++)
            {
                SqlCommand PostingCheck = new SqlCommand("SELECT Posting" + counter + "Charges FROM BillingMPR WHERE JobSheetNo=@LogTagNoPosting", cn);
                PostingCheck.Parameters.AddWithValue("@LogTagNoPosting", LogTagNo);
                SqlDataReader rmPostCheck = PostingCheck.ExecuteReader();

                while (rmPostCheck.Read())
                {
                    //if (rmPostCheck.HasRows)
                    if (!rmPostCheck.IsDBNull(0))
                    {
                        SCColumn.Add("Posting" + counter);
                    }
                }

                rmPostCheck.Close();
            }

            Debug.WriteLine("Masuk process table F");

            //insertion

            for (int counter = 1; counter <= InsertionCounter; counter++)
            {
                SqlCommand InsertionCheck = new SqlCommand("SELECT Insertion" + counter + "Charges FROM BillingMPR WHERE JobSheetNo=@LogTagNoInsertion", cn);
                InsertionCheck.Parameters.AddWithValue("@LogTagNoInsertion", LogTagNo);
                SqlDataReader rmInsertionCheck = InsertionCheck.ExecuteReader();

                while (rmInsertionCheck.Read())
                {
                    if (!rmInsertionCheck.IsDBNull(0))
                    {
                        SCColumn.Add("Insertion" + counter);
                    }
                }

                rmInsertionCheck.Close();
            }

            //mix
            SqlCommand MixCheck = new SqlCommand("SELECT MixCharges FROM BillingMPR WHERE JobSheetNo=@LogTagNoMix", cn);
            MixCheck.Parameters.AddWithValue("@LogTagNoMix", LogTagNo);
            SqlDataReader rmMixCheck = MixCheck.ExecuteReader();

            while (rmMixCheck.Read())
            {
                if (!rmMixCheck.IsDBNull(0))
                {
                    SCColumn.Add("Mix");
                }
            }

            rmMixCheck.Close();

            //statement
            SqlCommand StatementCheck = new SqlCommand("SELECT StatementCharges FROM BillingMPR WHERE JobSheetNo=@LogTagNoStatement", cn);
            StatementCheck.Parameters.AddWithValue("@LogTagNoStatement", LogTagNo);
            SqlDataReader rmStatementCheck = StatementCheck.ExecuteReader();

            while (rmStatementCheck.Read())
            {
                if (!rmStatementCheck.IsDBNull(0))
                {
                    SCColumn.Add("Statement");
                }
            }

            rmStatementCheck.Close();

            //brochure
            for (int counter = 1; counter <= BrochureCounter; counter++)
            {
                SqlCommand BrochureCheck = new SqlCommand("SELECT Brochure" + counter + "Charges FROM BillingMPR WHERE JobSheetNo=@LogTagNoBrochure", cn);
                BrochureCheck.Parameters.AddWithValue("@LogTagNoBrochure", LogTagNo);
                SqlDataReader rmBrochureCheck = BrochureCheck.ExecuteReader();

                while (rmBrochureCheck.Read())
                {
                    if (!rmBrochureCheck.IsDBNull(0))
                    {
                        SCColumn.Add("Brochure" + counter);
                    }
                }

                rmBrochureCheck.Close();
            }

            //MB5K until Discount

            SqlCommand BulkCheck = new SqlCommand("SELECT MB5KCharges, InsertingCharges, HandlingCharges, SealingCharges, TearingCharges, FoldingCharges, StockingCharges, LabellingCharges, SelfMailerCharges,SelfMaterialCharges, " +
                "OvertimeCharges, CDArchivingCharges, CourierCharges, DeliveryCharges, MatchingCharges, LabellingRMCharges, IPDSCharges, ProgrammingCharges, ReturnMailCharges, RetainerCharges, RubberStampingCharges, GlueingCharges, " +
                "CuttingCharges, MergingCharges, DiscountCharges, DataSFTPCharges FROM BillingMPR WHERE JobSheetNo=@LogTagNoBulk", cn);
            BulkCheck.Parameters.AddWithValue("@LogTagNoBulk", LogTagNo);
            SqlDataReader rmBulkCheck = BulkCheck.ExecuteReader();

            while (rmBulkCheck.Read())
            {
                if (!rmBulkCheck.IsDBNull(0))
                {
                    SCColumn.Add("MB5K");
                }
                if (!rmBulkCheck.IsDBNull(1))
                {
                    SCColumn.Add("Inserting");
                }
                if (!rmBulkCheck.IsDBNull(2))
                {
                    SCColumn.Add("Handling");
                }
                if (!rmBulkCheck.IsDBNull(3))
                {
                    SCColumn.Add("Sealing");
                }
                if (!rmBulkCheck.IsDBNull(4))
                {
                    SCColumn.Add("Tearing");
                }
                if (!rmBulkCheck.IsDBNull(5))
                {
                    SCColumn.Add("Folding");
                }
                if (!rmBulkCheck.IsDBNull(6))
                {
                    SCColumn.Add("Sticking");
                }
                if (!rmBulkCheck.IsDBNull(7))
                {
                    SCColumn.Add("Labelling");
                }
                if (!rmBulkCheck.IsDBNull(8))
                {
                    SCColumn.Add("SelfMailer");
                }
                if (!rmBulkCheck.IsDBNull(9))
                {
                    SCColumn.Add("SelfMaterial");
                }
                if (!rmBulkCheck.IsDBNull(10))
                {
                    SCColumn.Add("OverTime");
                }
                if (!rmBulkCheck.IsDBNull(11))
                {
                    SCColumn.Add("CDArchiving");
                }
                if (!rmBulkCheck.IsDBNull(12))
                {
                    SCColumn.Add("Courier");
                }
                if (!rmBulkCheck.IsDBNull(13))
                {
                    SCColumn.Add("Delivery");
                }
                if (!rmBulkCheck.IsDBNull(14))
                {
                    SCColumn.Add("Matching");
                }
                if (!rmBulkCheck.IsDBNull(15))
                {
                    SCColumn.Add("LabellingRM");
                }
                if (!rmBulkCheck.IsDBNull(16))
                {
                    SCColumn.Add("IPDS");
                }
                if (!rmBulkCheck.IsDBNull(17))
                {
                    SCColumn.Add("Programming");
                }
                if (!rmBulkCheck.IsDBNull(18))
                {
                    SCColumn.Add("ReturnMail");
                }
                if (!rmBulkCheck.IsDBNull(19))
                {
                    SCColumn.Add("Retainer");
                }
                if (!rmBulkCheck.IsDBNull(20))
                {
                    SCColumn.Add("RubberStamping");
                }
                if (!rmBulkCheck.IsDBNull(21))
                {
                    SCColumn.Add("Glueing");
                }
                if (!rmBulkCheck.IsDBNull(22))
                {
                    SCColumn.Add("Cutting");
                }
                if (!rmBulkCheck.IsDBNull(23))
                {
                    SCColumn.Add("Merging");
                }
                if (!rmBulkCheck.IsDBNull(24))
                {
                    SCColumn.Add("Discount");
                }
                if (!rmBulkCheck.IsDBNull(25))
                {
                    SCColumn.Add("DataSFTP");
                }

            }

            rmBulkCheck.Close();

            //postage and imprest
            for (int counter = 1; counter <= PostageCounter; counter++)
            {
                SqlCommand PostImpCheck = new SqlCommand("SELECT Postage" + counter + "Charges, Imprest" + counter + "Charges FROM BillingMPR WHERE JobSheetNo=@LogTagNoPostImp", cn);
                PostImpCheck.Parameters.AddWithValue("@LogTagNoPostImp", LogTagNo);
                SqlDataReader rmPostImpCheck = PostImpCheck.ExecuteReader();

                while (rmPostImpCheck.Read())
                {
                    if (!rmPostImpCheck.IsDBNull(0))
                    {
                        SCColumn.Add("Postage" + counter);
                    }

                    if (!rmPostImpCheck.IsDBNull(1))
                    {
                        SCColumn.Add("Imprest" + counter);
                    }
                }

                rmPostImpCheck.Close();
            }

            SqlCommand BulkCheck2 = new SqlCommand("SELECT RebateCharges, FrankingCharges, Franking10Charges, AirmailCharges, SporeCharges, TLetterCharges, " +
                "NPCCharges, Mix10Charges, RegisteredMailsCharges, ImprestRMCharges, RegisteredMails2Charges, ImprestRM2Charges FROM BillingMPR WHERE JobSheetNo=@JSBC2", cn);
            BulkCheck2.Parameters.AddWithValue("@JSBC2", LogTagNo);
            SqlDataReader rmBC2 = BulkCheck2.ExecuteReader();

            while (rmBC2.Read())
            {
                if (!rmBC2.IsDBNull(0))
                {
                    SCColumn.Add("Rebate");
                }
                if (!rmBC2.IsDBNull(1))
                {
                    SCColumn.Add("Franking");
                }
                if (!rmBC2.IsDBNull(2))
                {
                    SCColumn.Add("Franking10");
                }
                if (!rmBC2.IsDBNull(3))
                {
                    SCColumn.Add("Airmail");
                }
                if (!rmBC2.IsDBNull(4))
                {
                    SCColumn.Add("Spore");
                }
                if (!rmBC2.IsDBNull(5))
                {
                    SCColumn.Add("TLetter");
                }
                if (!rmBC2.IsDBNull(6))
                {
                    SCColumn.Add("NPC");
                }
                if (!rmBC2.IsDBNull(7))
                {
                    SCColumn.Add("Mix10");
                }
                if (!rmBC2.IsDBNull(8))
                {
                    SCColumn.Add("RegisteredMails");
                }
                if (!rmBC2.IsDBNull(9))
                {
                    SCColumn.Add("ImprestRM");
                }
                if (!rmBC2.IsDBNull(10))
                {
                    SCColumn.Add("RegisteredMails2");
                }
                if (!rmBC2.IsDBNull(11))
                {
                    SCColumn.Add("ImprestRM2");
                }
            }

            foreach (var x in SCColumn)
            {
                Debug.WriteLine("item : " + x);
            }

            List<int> Vol = new List<int>();
            List<double> Charges = new List<double>();
            List<string> Rate = new List<string>();
            List<string> Desc = new List<string>();
            List<string> Process = new List<string>();
            List<double> SST8 = new List<double>();

            double tax = 0;

            //table f
            foreach (var item in SCColumn)
            {
                Debug.WriteLine(item);
                SqlCommand TableF = new SqlCommand("SELECT " + item + "Vol, " + item + "Charges, " + item + "Rate, " + item + "Desc FROM BillingMPR WHERE JobSheetNo=@JSTF", cn);
                TableF.Parameters.AddWithValue("@JSTF", LogTagNo);
                SqlDataReader rmTableF = TableF.ExecuteReader();

                while (rmTableF.Read())
                {
                    if (!rmTableF.IsDBNull(0))
                    {
                        try
                        {
                            Vol.Add(Int32.Parse(rmTableF.GetString(0)));

                        }
                        catch
                        {
                            Vol.Add(Int32.Parse(rmTableF.GetString(0)));

                        }
                    }

                    if (!rmTableF.IsDBNull(1))
                    {
                        if (item == "CDArchiving" || item == "Programming" || item == "DataSFTP")
                        {
                            Charges.Add(double.Parse(rmTableF.GetString(1)));
                            tax = double.Parse(rmTableF.GetString(1)) * 0.08;
                            SST8.Add(tax);
                        }
                        else
                        {
                            Charges.Add(double.Parse(rmTableF.GetString(1)));
                            tax = 0.00;
                            SST8.Add(tax);
                        }

                    }

                    if (!rmTableF.IsDBNull(2))
                    {
                        Rate.Add(rmTableF.GetString(2));
                    }

                    if (!rmTableF.IsDBNull(3))
                    {
                        Desc.Add(rmTableF.GetString(3));
                    }
                    else
                    {
                        Desc.Add("");
                    }

                    Process.Add(item);
                }
            }

            ViewBag.VolTableF = Vol;
            ViewBag.VolSumTableF = Vol.Sum();
            ViewBag.ChargesTableF = Charges;
            ViewBag.ChargesSumTableF = Math.Round(Charges.Sum(), 3);
            ViewBag.RateTableF = Rate;
            ViewBag.DescTableF = Desc;
            ViewBag.ProcessTableF = Process;
            ViewBag.SST8 = SST8;
            ViewBag.SST8Total = SST8.Sum();
            int ItemCount = Charges.Count;
            ViewBag.ItemCountTableF = ItemCount;
            ViewBag.EFSum = Charges.Sum() + TotalChargesTableE;

            cn.Close();
        }

        //return View(File);

        return new Rotativa.ViewAsPdf("ViewMPRNew", File)
        {
            // FileName = flightPlan.ListingItemDetailsModel.FlightDetails + ".pdf",
            FileName = "MPR.pdf",
            PageMargins = new Rotativa.Options.Margins(12, 12, 2, 12),
            //PageOrientation = Rotativa.Options.Orientation.Landscape,
            PageOrientation = Rotativa.Options.Orientation.Portrait,
            //PageWidth = 210,
            //PageHeight = 297
        };
    }

    public ActionResult ViewMPRMMP(string LogTagNo, string JobSheetNo)
    {
        List<JobAuditTrailDetail> File = new List<JobAuditTrailDetail>();
        List<int> SumAcc = new List<int>();
        List<int> SumImp = new List<int>();
        List<int> SumPage = new List<int>();

        string Contact_Person = "";
        string Customer_Name = "";
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        {
            cn.Open();

            SqlCommand getChannel = new SqlCommand(@"SELECT DeliveryChannel FROM JobInstruction WHERE JobSheetNo = @JSChannel", cn);
            getChannel.Parameters.AddWithValue("@JSChannel", JobSheetNo);
            SqlDataReader rmChannel = getChannel.ExecuteReader();

            if (rmChannel.HasRows)
            {
                while (rmChannel.Read())
                {
                    if (!rmChannel.IsDBNull(0))
                    {
                        ViewBag.DeliveryChannel = rmChannel.GetString(0);
                    }
                }
            }


            SqlCommand tableA = new SqlCommand("SELECT JobAuditTrailDetail.Id, JobAuditTrailDetail.LogTagNo, JobAuditTrailDetail.JobSheetNo, JobAuditTrailDetail.FileId, JobAuditTrailDetail.AccQty, JobAuditTrailDetail.ImpQty, JobAuditTrailDetail.PageQty, JobAuditTrailDetail.ProductName," +
                "CONVERT(VARCHAR, CAST(JobAuditTrailDetail.ProcessDate AS DATE), 3), CONVERT(VARCHAR, CAST(Hist_ProductionSlip.EndDateOn AS DATE), 3),CONVERT(VARCHAR, CAST(MAX(PostingManifest.PostingDateOn) AS DATE), 3) FROM JobAuditTrailDetail FULL JOIN Hist_ProductionSlip ON Hist_ProductionSlip.LogTagNo=JobAuditTrailDetail.LogTagNo " +
                "FULL JOIN PostingManifest ON PostingManifest.LogTagNo=JobAuditTrailDetail.LogTagNo WHERE JobAuditTrailDetail.LogTagNo=@LogTagNoTableA " +
                "GROUP BY JobAuditTrailDetail.Id, JobAuditTrailDetail.LogTagNo, JobAuditTrailDetail.JobSheetNo, JobAuditTrailDetail.FileId, JobAuditTrailDetail.AccQty, JobAuditTrailDetail.ImpQty, JobAuditTrailDetail.PageQty, JobAuditTrailDetail.ProductName,JobAuditTrailDetail.ProcessDate,Hist_ProductionSlip.EndDateOn,PostingManifest.PostingDateOn", cn);
            tableA.Parameters.AddWithValue("@LogTagNoTableA", LogTagNo);
            SqlDataReader rmTableA = tableA.ExecuteReader();

            int bilTableA = 1;

            while (rmTableA.Read())
            {
                JobAuditTrailDetail model = new JobAuditTrailDetail();
                {
                    model.Bil = bilTableA++;
                    model.FileId = rmTableA.GetString(3);
                    model.AccQty = rmTableA.GetString(4);
                    model.ImpQty = rmTableA.GetString(5);
                    model.PageQty = rmTableA.GetString(6);
                    model.ProcessDateStr = rmTableA.GetString(8);

                    model.PrintSlip = rmTableA.GetString(9);
                    model.PlanDatePostOnTxt = rmTableA.GetString(10);

                    SumAcc.Add(Int32.Parse(model.AccQty));
                    SumImp.Add(Int32.Parse(model.ImpQty));
                    SumPage.Add(Int32.Parse(model.PageQty));
                }
                ViewBag.LogTagNo = rmTableA.GetString(1);


                File.Add(model);

            }

            ViewBag.SumAcc = SumAcc.Sum();
            ViewBag.SumPage = SumPage.Sum();
            ViewBag.SumImp = SumImp.Sum();

            int PageQty = SumPage.Sum();

            rmTableA.Close();

            SqlCommand cmdTableC = new SqlCommand("SELECT CONVERT(VARCHAR, CAST(A.StartDateOn AS DATE), 3), CONVERT(VARCHAR, CAST(B.PostingDateOn AS DATE), 3) FROM ProductionSlip AS A INNER JOIN PostingManifest AS B ON A.LogTagNo=B.LogTagNo WHERE A.LogTagNo = @LogTagNoTableC ", cn);
            cmdTableC.Parameters.AddWithValue("@LogTagNoTableC", LogTagNo);
            SqlDataReader rmTableC = cmdTableC.ExecuteReader();

            List<string> PrintedDate = new List<string>();
            List<string> PostingDate = new List<string>();

            while (rmTableC.Read())
            {
                if (!rmTableC.IsDBNull(0))
                {
                    PrintedDate.Add(rmTableC.GetString(0));
                }
                else
                {
                    PrintedDate.Add("");
                }

                if (!rmTableC.IsDBNull(1))
                {
                    PostingDate.Add(rmTableC.GetString(1));
                }
                else
                {
                    PostingDate.Add("");
                }
            }

            ViewBag.PrintedDate = PrintedDate;
            ViewBag.PostingDate = PostingDate;

            SqlCommand getCP = new SqlCommand("SELECT ContactPerson FROM MaterialDescriptionMail WHERE LogtagNo=@LogTagNo", cn);
            getCP.Parameters.AddWithValue("@LogTagNo", LogTagNo);
            SqlDataReader rmCP = getCP.ExecuteReader();

            while (rmCP.Read())
            {
                Contact_Person = rmCP.GetString(0);
                ViewBag.Contact_Person = Contact_Person;
            }


            SqlCommand getJI = new SqlCommand("SELECT ContactPerson, ProductName FROM JobInstruction WHERE JobSheetNo=@JobSheetNo", cn);
            getJI.Parameters.AddWithValue("@JobSheetNo", JobSheetNo);
            SqlDataReader rmJI = getJI.ExecuteReader();

            while (rmJI.Read())
            {
                Contact_Person = rmJI.GetString(0);
                //ViewBag.Contact_Person = Contact_Person;
                ViewBag.ProductName = rmJI.GetString(1);
            }

            // CUSTOMER CONTACT DETAIL
            SqlCommand getContact = new SqlCommand("SELECT Cust_Phone, Cust_FaxNo, Cust_Mobile FROM CustomerDetails WHERE Contact_Person=@Contact_Person", cn);
            getContact.Parameters.AddWithValue("@Contact_Person", Contact_Person);
            SqlDataReader rmContact = getContact.ExecuteReader();

            while (rmContact.Read())
            {
                if (!rmContact.IsDBNull(0))
                {
                    ViewBag.Cust_Phone = rmContact.GetString(0);
                }

                if (!rmContact.IsDBNull(1))
                {
                    ViewBag.Cust_FaxNo = rmContact.GetString(1);
                }

                if (!rmContact.IsDBNull(2))
                {
                    ViewBag.Cust_Mobile = rmContact.GetString(2);
                }
            }




            //CUSTOMER NAME
            //ViewBag.Customer_Name = Customer_Name;
            SqlCommand cmdProduct = new SqlCommand(@"SELECT Customer_Name, CONVERT(VARCHAR, CAST(RevStrtDateOn AS DATE), 3) as RevStrtDateOn, RevStrtTime FROM JobAuditTrailDetail WHERE LogTagNo = @ProductName1", cn);
            cmdProduct.Parameters.AddWithValue("@ProductName1", LogTagNo);
            SqlDataReader rmProduct = cmdProduct.ExecuteReader();

            if (rmProduct.HasRows)
            {
                while (rmProduct.Read())
                {
                    if (!rmProduct.IsDBNull(0))
                    {
                        ViewBag.Customer_Name = rmProduct.GetString(0);
                    }

                    if (!rmProduct.IsDBNull(1))
                    {
                        ViewBag.CollectedDate = rmProduct["RevStrtDateOn"].ToString();
                    }

                    if (!rmProduct.IsDBNull(2))
                    {
                        ViewBag.CollectedTime = rmProduct.GetString(2);
                    }
                }
            }

            //REPORT DATE
            DateTime currentDate = DateTime.Now;
            string formattedDate = currentDate.ToString("dd/MM/yyyy");

            ViewBag.CurrentDate = formattedDate;



            //foreach (var x in File)
            //{
            //    Debug.WriteLine("File Id : " + x.LogTagNo);
            //    Debug.WriteLine("PageQty : " + x.PageQty);
            //    Debug.WriteLine("ImpQty : " + x.ImpQty);
            //    Debug.WriteLine("AccQty : " + x.AccQty);
            //    Debug.WriteLine("================================");

            //}

            //Table D

            int OverseaSum = 0;
            int CourierSum = 0;
            int Re_turnSum = 0;
            int PO_BOXSum = 0;
            int InsertMMPSum = 0;

            SqlCommand TableD = new SqlCommand("SELECT Oversea, Courier, Re_turn, PO_BOX, Ins_Material, InsertMMP FROM PostingManifest WHERE LogTagNo=@LogTagPosting", cn);
            TableD.Parameters.AddWithValue("@LogTagPosting", LogTagNo);
            SqlDataReader rmPosting = TableD.ExecuteReader();

            while (rmPosting.Read())
            {

                string OverseasStr = "";
                string CourierStr = "";
                string Re_turnStr = "";
                string PO_BOXStr = "";
                //string Ins_MaterialStr = rmPosting.GetString(4);
                string InsertMMPStr = "";

                if (!string.IsNullOrEmpty(OverseasStr))
                {
                    OverseasStr = rmPosting.GetString(0);
                }
                else
                {
                    OverseasStr = "0";

                }

                if (!string.IsNullOrEmpty(CourierStr))
                {
                    CourierStr = rmPosting.GetString(1);
                }
                else
                {
                    CourierStr = "0";

                }

                if (!string.IsNullOrEmpty(Re_turnStr))
                {
                    Re_turnStr = rmPosting.GetString(2);
                }
                else
                {
                    Re_turnStr = "0";

                }

                if (!string.IsNullOrEmpty(PO_BOXStr))
                {
                    PO_BOXStr = rmPosting.GetString(3);
                }
                else
                {
                    PO_BOXStr = "0";

                }

                if (!string.IsNullOrEmpty(InsertMMPStr))
                {
                    InsertMMPStr = rmPosting.GetString(5);
                }
                else
                {
                    InsertMMPStr = "0";

                }


                int Oversea = Int32.Parse(OverseasStr);
                int Courier = Int32.Parse(CourierStr);
                int Re_turn = Int32.Parse(Re_turnStr);
                int PO_BOX = Int32.Parse(PO_BOXStr);
                //int Ins_Material = Int32.Parse(Ins_MaterialStr);
                int InsertMMP = Int32.Parse(InsertMMPStr);


                PageQty = PageQty - Oversea - Courier - Re_turn - PO_BOX - InsertMMP;

                OverseaSum += Oversea;
                CourierSum += Courier;
                Re_turnSum += Re_turn;
                PO_BOXSum += PO_BOX;
                InsertMMPSum += InsertMMP;

                ViewBag.Oversea = OverseaSum;
                ViewBag.Courier = CourierSum;
                ViewBag.Return = Re_turnSum;
                ViewBag.PO_BOX = PO_BOXSum;
                //ViewBag.Ins_Material = Ins_Material;
                ViewBag.InsertMMP = InsertMMPSum;
                ViewBag.Local = PageQty;
            }

            rmPosting.Close();

            //table E

            double TotalChargesTableE = 0;

            List<string> MMPMaterialType = new List<string>();
            List<string> MMPMaterialDescription = new List<string>();
            List<string> MMPMaterialRate = new List<string>();
            List<string> MMPMaterialUsage = new List<string>();
            List<double> MMPTotalCharges = new List<double>();

            //Jobsheeno actually is logtagno for this case here
            SqlCommand TableE = new SqlCommand("SELECT MaterialTypeMMP, Material_DescriptionMMP, Rate_Per_PieceMMP, Total_ChargesMMP,Volume_UsageMMP FROM MaterialDescriptionMail WHERE LogTagNo =@LogTagNoTableE AND MaterialTypeMMP IS NOT NULL AND Material_DescriptionMMP IS NOT NULL AND Rate_Per_PieceMMP IS NOT NULL AND Total_ChargesMMP IS NOT NULL AND Volume_UsageMMP IS NOT NULL", cn);
            TableE.Parameters.AddWithValue("@LogTagNoTableE", LogTagNo);
            SqlDataReader rmTableE = TableE.ExecuteReader();

            while (rmTableE.Read())
            {
                if (!rmTableE.IsDBNull(0))
                {
                    MMPMaterialType.Add(rmTableE.GetString(0));
                }
                else
                {
                    MMPMaterialType.Add("");
                }

                if (!rmTableE.IsDBNull(1))
                {
                    MMPMaterialDescription.Add(rmTableE.GetString(1));
                }
                else
                {
                    MMPMaterialDescription.Add("");
                }

                if (!rmTableE.IsDBNull(2))
                {
                    MMPMaterialRate.Add(rmTableE.GetString(2));
                }
                else
                {
                    MMPMaterialRate.Add("");
                }

                if (!rmTableE.IsDBNull(3))
                {
                    MMPTotalCharges.Add(double.Parse(rmTableE.GetString(3)));
                }
                else
                {
                    MMPTotalCharges.Add(0.00);
                }

                if (!rmTableE.IsDBNull(4))
                {
                    MMPMaterialUsage.Add(rmTableE.GetString(4));
                }
                else
                {
                    MMPMaterialUsage.Add("");
                }
                //ViewBag.MaterialType = rmTableE.GetString(0);
                //ViewBag.MaterialDescription = rmTableE.GetString(1);
                //ViewBag.Rate = rmTableE.GetString(2);
                //ViewBag.TotalCharges = rmTableE.GetString(3);

                //TotalChargesTableE = double.Parse(rmTableE.GetString(3));
            }

            foreach (var x in MMPMaterialType)
            {
                Debug.WriteLine("Material Type : " + x);
            }

            ViewBag.MaterialType = MMPMaterialType;
            ViewBag.MaterialDescription = MMPMaterialDescription;
            ViewBag.Rate = MMPMaterialRate;
            ViewBag.TotalCharges = MMPTotalCharges;
            ViewBag.MaterialUsage = MMPMaterialUsage;

            Debug.WriteLine("End of table E");
            //Table F Content Check

            int postingCounter = 2;
            int InsertionCounter = 4;
            int BrochureCounter = 5;
            int PostageCounter = 8;
            int ImprestCounter = 8;

            List<string> SCColumn = new List<string>();
            List<string> SCProcess = new List<string>();

            //posting
            for (int counter = 1; counter <= postingCounter; counter++)
            {
                SqlCommand PostingCheck = new SqlCommand("SELECT MMPPosting" + counter + "Charges FROM BillingMPRMMP WHERE JobSheetNo=@LogTagNoPosting", cn);
                PostingCheck.Parameters.AddWithValue("@LogTagNoPosting", LogTagNo);
                SqlDataReader rmPostCheck = PostingCheck.ExecuteReader();

                while (rmPostCheck.Read())
                {
                    //if (rmPostCheck.HasRows)
                    if (!rmPostCheck.IsDBNull(0))
                    {
                        SCColumn.Add("MMPPosting" + counter);
                        Debug.WriteLine("Add MMPPosting" + counter);
                    }
                }

                rmPostCheck.Close();
            }

            //insertion

            for (int counter = 1; counter <= InsertionCounter; counter++)
            {
                SqlCommand InsertionCheck = new SqlCommand("SELECT MMPInsertion" + counter + "Charges FROM BillingMPRMMP WHERE JobSheetNo=@LogTagNoInsertion", cn);
                InsertionCheck.Parameters.AddWithValue("@LogTagNoInsertion", LogTagNo);
                SqlDataReader rmInsertionCheck = InsertionCheck.ExecuteReader();

                while (rmInsertionCheck.Read())
                {
                    if (!rmInsertionCheck.IsDBNull(0))
                    {
                        SCColumn.Add("MMPInsertion" + counter);
                        Debug.WriteLine("Add MMPInsertion" + counter);

                    }
                }

                rmInsertionCheck.Close();
            }

            //mix
            SqlCommand MixCheck = new SqlCommand("SELECT MMPMixCharges FROM BillingMPRMMP WHERE JobSheetNo=@LogTagNoMix", cn);
            MixCheck.Parameters.AddWithValue("@LogTagNoMix", LogTagNo);
            SqlDataReader rmMixCheck = MixCheck.ExecuteReader();

            while (rmMixCheck.Read())
            {
                if (!rmMixCheck.IsDBNull(0))
                {
                    SCColumn.Add("MMPMix");
                    Debug.WriteLine("Add MMPMix");

                }
            }

            rmMixCheck.Close();

            //statement
            SqlCommand StatementCheck = new SqlCommand("SELECT MMPStatementCharges FROM BillingMPRMMP WHERE JobSheetNo=@LogTagNoStatement", cn);
            StatementCheck.Parameters.AddWithValue("@LogTagNoStatement", LogTagNo);
            SqlDataReader rmStatementCheck = StatementCheck.ExecuteReader();

            while (rmStatementCheck.Read())
            {
                if (!rmStatementCheck.IsDBNull(0))
                {
                    SCColumn.Add("MMPStatement");
                    Debug.WriteLine("Add MMPStatement");

                }
            }

            rmStatementCheck.Close();

            //brochure
            for (int counter = 1; counter <= BrochureCounter; counter++)
            {
                SqlCommand BrochureCheck = new SqlCommand("SELECT MMPBrochure" + counter + "Charges FROM BillingMPRMMP WHERE JobSheetNo=@LogTagNoBrochure", cn);
                BrochureCheck.Parameters.AddWithValue("@LogTagNoBrochure", LogTagNo);
                SqlDataReader rmBrochureCheck = BrochureCheck.ExecuteReader();

                while (rmBrochureCheck.Read())
                {
                    if (!rmBrochureCheck.IsDBNull(0))
                    {
                        SCColumn.Add("MMPBrochure" + counter);
                        Debug.WriteLine("Add MMPBrochure" + counter);

                    }
                }

                rmBrochureCheck.Close();
            }

            //MB5K until Discount

            SqlCommand BulkCheck = new SqlCommand("SELECT MMPMB5KCharges, MMPInsertingCharges, MMPHandlingCharges, MMPSealingCharges, MMPTearingCharges, MMPFoldingCharges, MMPStockingCharges, MMPLabellingCharges, MMPSelfMailerCharges,MMPSelfMaterialCharges, " +
                "MMPOvertimeCharges, MMPCDArchivingCharges, MMPCourierCharges, MMPDeliveryCharges, MMPMatchingCharges, MMPLabellingRMCharges, MMPIPDSCharges, MMPProgrammingCharges, MMPReturnMailCharges, MMPRetainerCharges, MMPRubberStampingCharges, MMPGlueingCharges, " +
                "MMPCuttingCharges, MMPMergingCharges, MMPDiscountCharges, MMPDataSFTPCharges FROM BillingMPRMMP WHERE JobSheetNo=@LogTagNoBulk", cn);
            BulkCheck.Parameters.AddWithValue("@LogTagNoBulk", LogTagNo);
            SqlDataReader rmBulkCheck = BulkCheck.ExecuteReader();

            while (rmBulkCheck.Read())
            {
                if (!rmBulkCheck.IsDBNull(0))
                {
                    SCColumn.Add("MMPMB5K");
                }
                if (!rmBulkCheck.IsDBNull(1))
                {
                    SCColumn.Add("MMPInserting");
                }
                if (!rmBulkCheck.IsDBNull(2))
                {
                    SCColumn.Add("MMPHandling");
                }
                if (!rmBulkCheck.IsDBNull(3))
                {
                    SCColumn.Add("MMPSealing");
                }
                if (!rmBulkCheck.IsDBNull(4))
                {
                    SCColumn.Add("MMPTearing");
                }
                if (!rmBulkCheck.IsDBNull(5))
                {
                    SCColumn.Add("MMPFolding");
                }
                if (!rmBulkCheck.IsDBNull(6))
                {
                    SCColumn.Add("MMPSticking");
                }
                if (!rmBulkCheck.IsDBNull(7))
                {
                    SCColumn.Add("MMPLabelling");
                }
                if (!rmBulkCheck.IsDBNull(8))
                {
                    SCColumn.Add("MMPSelfMailer");
                }
                if (!rmBulkCheck.IsDBNull(9))
                {
                    SCColumn.Add("MMPSelfMaterial");
                }
                if (!rmBulkCheck.IsDBNull(10))
                {
                    SCColumn.Add("MMPOverTime");
                }
                if (!rmBulkCheck.IsDBNull(11))
                {
                    SCColumn.Add("MMPCDArchiving");
                }
                if (!rmBulkCheck.IsDBNull(12))
                {
                    SCColumn.Add("MMPCourier");
                }
                if (!rmBulkCheck.IsDBNull(13))
                {
                    SCColumn.Add("MMPDelivery");
                }
                if (!rmBulkCheck.IsDBNull(14))
                {
                    SCColumn.Add("MMPMatching");
                }
                if (!rmBulkCheck.IsDBNull(15))
                {
                    SCColumn.Add("MMPLabellingRM");
                }
                if (!rmBulkCheck.IsDBNull(16))
                {
                    SCColumn.Add("MMPIPDS");
                }
                if (!rmBulkCheck.IsDBNull(17))
                {
                    SCColumn.Add("MMPProgramming");
                }
                if (!rmBulkCheck.IsDBNull(18))
                {
                    SCColumn.Add("MMPReturnMail");
                }
                if (!rmBulkCheck.IsDBNull(19))
                {
                    SCColumn.Add("MMPRetainer");
                }
                if (!rmBulkCheck.IsDBNull(20))
                {
                    SCColumn.Add("MMPRubberStamping");
                }
                if (!rmBulkCheck.IsDBNull(21))
                {
                    SCColumn.Add("MMPGlueing");
                }
                if (!rmBulkCheck.IsDBNull(22))
                {
                    SCColumn.Add("MMPCutting");
                }
                if (!rmBulkCheck.IsDBNull(23))
                {
                    SCColumn.Add("MMPMerging");
                }
                if (!rmBulkCheck.IsDBNull(24))
                {
                    SCColumn.Add("MMPDiscount");
                }
                if (!rmBulkCheck.IsDBNull(25))
                {
                    SCColumn.Add("MMPDataSFTP");
                }

            }

            rmBulkCheck.Close();

            //postage and imprest
            for (int counter = 1; counter <= PostageCounter; counter++)
            {
                SqlCommand PostImpCheck = new SqlCommand("SELECT MMPPostage" + counter + "Charges, MMPImprest" + counter + "Charges FROM BillingMPRMMP WHERE JobSheetNo=@LogTagNoPostImp", cn);
                PostImpCheck.Parameters.AddWithValue("@LogTagNoPostImp", LogTagNo);
                SqlDataReader rmPostImpCheck = PostImpCheck.ExecuteReader();

                while (rmPostImpCheck.Read())
                {
                    if (!rmPostImpCheck.IsDBNull(0))
                    {
                        SCColumn.Add("MMPPostage" + counter);
                        Debug.WriteLine("Add MMPPostage" + counter);

                    }

                    if (!rmPostImpCheck.IsDBNull(1))
                    {
                        SCColumn.Add("MMPImprest" + counter);
                        Debug.WriteLine("Add MMPImprest" + counter);

                    }
                }

                rmPostImpCheck.Close();
            }

            SqlCommand BulkCheck2 = new SqlCommand("SELECT MMPRebateCharges, MMPFrankingCharges, MMPFranking10Charges, MMPAirmailCharges, MMPSporeCharges, MMPTLetterCharges, " +
                "MMPNPCCharges, MMPMix10Charges, MMPRegisteredMailsCharges, MMPImprestRMCharges, MMPRegisteredMails2Charges, MMPImprestRM2Charges FROM BillingMPRMMP WHERE JobSheetNo=@JSBC2", cn);
            BulkCheck2.Parameters.AddWithValue("@JSBC2", LogTagNo);
            SqlDataReader rmBC2 = BulkCheck2.ExecuteReader();

            while (rmBC2.Read())
            {
                if (!rmBC2.IsDBNull(0))
                {
                    SCColumn.Add("MMPRebate");
                }
                if (!rmBC2.IsDBNull(1))
                {
                    SCColumn.Add("MMPFranking");
                }
                if (!rmBC2.IsDBNull(2))
                {
                    SCColumn.Add("MMPFranking10");
                }
                if (!rmBC2.IsDBNull(3))
                {
                    SCColumn.Add("MMPAirmail");
                }
                if (!rmBC2.IsDBNull(4))
                {
                    SCColumn.Add("MMPSpore");
                }
                if (!rmBC2.IsDBNull(5))
                {
                    SCColumn.Add("MMPTLetter");
                }
                if (!rmBC2.IsDBNull(6))
                {
                    SCColumn.Add("MMPNPC");
                }
                if (!rmBC2.IsDBNull(7))
                {
                    SCColumn.Add("MMPMix10");
                }
                if (!rmBC2.IsDBNull(8))
                {
                    SCColumn.Add("MMPRegisteredMails");
                }
                if (!rmBC2.IsDBNull(9))
                {
                    SCColumn.Add("MMPImprestRM");
                }
                if (!rmBC2.IsDBNull(10))
                {
                    SCColumn.Add("MMPRegisteredMails2");
                }
                if (!rmBC2.IsDBNull(11))
                {
                    SCColumn.Add("MMPImprestRM2");
                }
            }

            foreach (var x in SCColumn)
            {
                Debug.WriteLine("item : " + x);
            }

            List<int> Vol = new List<int>();
            List<double> Charges = new List<double>();
            List<string> Rate = new List<string>();
            List<string> Desc = new List<string>();

            //table f
            foreach (var item in SCColumn)
            {
                Debug.WriteLine(item);
                SqlCommand TableF = new SqlCommand("SELECT " + item + "Vol, " + item + "Charges, " + item + "Rate, " + item + "Desc FROM BillingMPRMMP WHERE JobSheetNo=@JSTF", cn);
                TableF.Parameters.AddWithValue("@JSTF", LogTagNo);
                SqlDataReader rmTableF = TableF.ExecuteReader();

                while (rmTableF.Read())
                {
                    if (!rmTableF.IsDBNull(0))
                    {
                        Vol.Add(Int32.Parse(rmTableF.GetString(0)));
                    }

                    if (!rmTableF.IsDBNull(1))
                    {

                        Charges.Add(double.Parse(rmTableF.GetString(1)));
                    }

                    if (!rmTableF.IsDBNull(2))
                    {
                        Rate.Add(rmTableF.GetString(2));
                    }

                    if (!rmTableF.IsDBNull(3))
                    {
                        Desc.Add(rmTableF.GetString(3));
                    }
                    else
                    {
                        Desc.Add("");
                    }

                    SCProcess.Add(item);
                }
            }

            ViewBag.VolTableF = Vol;
            ViewBag.VolSumTableF = Vol.Sum();
            ViewBag.ChargesTableF = Charges;
            ViewBag.ChargesSumTableF = Charges.Sum();
            ViewBag.RateTableF = Rate;
            ViewBag.DescTableF = Desc;
            ViewBag.Process = SCProcess;
            int ItemCount = Charges.Count;
            ViewBag.ItemCountTableF = ItemCount;
            ViewBag.EFSum = Charges.Sum() + TotalChargesTableE;

            cn.Close();
        }

        //return View(File);

        return new Rotativa.ViewAsPdf("ViewMPRMMP", File)
        {
            // FileName = flightPlan.ListingItemDetailsModel.FlightDetails + ".pdf",
            FileName = "MPRMMP.pdf",
            PageMargins = new Rotativa.Options.Margins(12, 12, 12, 12),
            //PageOrientation = Rotativa.Options.Orientation.Landscape,
            PageOrientation = Rotativa.Options.Orientation.Portrait,
            //PageWidth = 210,
            //PageHeight = 297
        };
    }

    public string getMPRPostingDate (string LogTagNo)
    {
        string PostingDate = "";
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        {
            cn.Open();

            SqlCommand cmd = new SqlCommand("SELECT CONVERT(VARCHAR, CAST(MAX(PostingManifest.PostingDateOn) AS DATE), 3) FROM PostingManifest WHERE LogTagNo=@LogTagNo", cn);
            cmd.Parameters.AddWithValue("@LogTagNo", LogTagNo);
            SqlDataReader rm = cmd.ExecuteReader();

            if(rm.HasRows)
            {
                while(rm.Read())
                {
                    if(!rm.IsDBNull(0))
                    {
                        PostingDate = rm.GetString(0);
                    }
                    else
                    {
                        PostingDate = "-";

                    }
                }
            }
            else
            {
                PostingDate = "-";
            }


            cn.Close();
        }


            return PostingDate;
    }

    public List<int> getAIPBatch(string LogTagNo)
    {
        List<int> AIPBatch = new List<int>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        {
            cn.Open();

            SqlCommand cmd = new SqlCommand(@"SELECT SUM(CAST(PageQty AS INT)), SUM(CAST(ImpQty AS INT)), 
                                              SUM(CAST(AccQty AS INT)) FROM JobAuditTrailDetail WHERE LogTagNo = @LogTagNo", cn);
            cmd.Parameters.AddWithValue("@LogTagNo", LogTagNo);
            SqlDataReader rm = cmd.ExecuteReader();

            if(rm.HasRows)
            {
                while(rm.Read())
                {
                    if(!rm.IsDBNull(0))
                    {
                        AIPBatch.Add(rm.GetInt32(0));
                    }
                    else
                    {
                        AIPBatch.Add(0);

                    }

                    if (!rm.IsDBNull(1))
                    {
                        AIPBatch.Add(rm.GetInt32(1));
                    }
                    else
                    {
                        AIPBatch.Add(0);

                    }

                    if (!rm.IsDBNull(2))
                    {
                        AIPBatch.Add(rm.GetInt32(2));
                    }
                    else
                    {
                        AIPBatch.Add(0);

                    }
                }
            }
            else
            {
                AIPBatch.Add(0);
                AIPBatch.Add(0);
                AIPBatch.Add(0);

            }

            cn.Close();
        }

        return AIPBatch;
    }

    public ActionResult ViewMPRBatch(string BatchId, string Customer_Name, string LogTagNo, string LogTagNoContact,string ProductName)
    {
        string JobSheetNo = "";
        string Contact_Person = "";
        int PageQty = 0;

        List<JobAuditTrailDetail> LogTagList = new List<JobAuditTrailDetail>();
        List<string> JobList = new List<string>();

        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        {
            int i = 0;
            cn.Open();

            SqlCommand tableA = new SqlCommand("SELECT DISTINCT JobBatch.BatchID, JobBatch.LogTagNo, JobAuditTrailDetail.JobSheetNo FROM JobBatch INNER JOIN JobAuditTrailDetail on JobBatch.LogTagNo=JobAuditTrailDetail.LogTagNo WHERE JobBatch.BatchId=@BatchId", cn);
            tableA.Parameters.AddWithValue("@BatchId", BatchId);
            SqlDataReader rmTableA = tableA.ExecuteReader();

            while (rmTableA.Read())
            {
                ViewBag.BatchId = rmTableA.GetString(0);
                JobList.Add(rmTableA.GetString(1));
                JobSheetNo = rmTableA.GetString(2);
                LogTagNoContact = rmTableA.GetString(1);
            }

            rmTableA.Close();

            SqlCommand getChannel = new SqlCommand(@"SELECT DeliveryChannel FROM JobInstruction WHERE JobSheetNo = @JSChannel", cn);
            getChannel.Parameters.AddWithValue("@JSChannel", JobSheetNo);
            SqlDataReader rmChannel = getChannel.ExecuteReader();

            if (rmChannel.HasRows)
            {
                while (rmChannel.Read())
                {
                    if (!rmChannel.IsDBNull(0))
                    {
                        ViewBag.DeliveryChannel = rmChannel.GetString(0);
                    }
                }
            }

            SqlCommand getJI = new SqlCommand("SELECT ContactPerson FROM MaterialDescriptionMail WHERE LogtagNo=@LogTagNo", cn);
            getJI.Parameters.AddWithValue("@LogTagNo", BatchId);
            SqlDataReader rmJI = getJI.ExecuteReader();

            while (rmJI.Read())
            {
                Contact_Person = rmJI.GetString(0);
                ViewBag.Contact_Person = Contact_Person;
            }

            // CUSTOMER CONTACT DETAIL
            SqlCommand getContact = new SqlCommand("SELECT Cust_Phone, Cust_FaxNo, Cust_Mobile FROM CustomerDetails WHERE Contact_Person=@Contact_Person", cn);
            getContact.Parameters.AddWithValue("@Contact_Person", Contact_Person);
            SqlDataReader rmContact = getContact.ExecuteReader();

            while (rmContact.Read())
            {
                if (!rmContact.IsDBNull(0))
                {
                    ViewBag.Cust_Phone = rmContact.GetString(0);
                }

                if (!rmContact.IsDBNull(1))
                {
                    ViewBag.Cust_FaxNo = rmContact.GetString(1);
                }

                if (!rmContact.IsDBNull(2))
                {
                    ViewBag.Cust_Mobile = rmContact.GetString(2);
                }
                //if (!rmContact.IsDBNull(3))
                //{
                //    ViewBag.Customer_Name = rmContact.GetString(3);
                //}
            }




            //REPORT DATE
            DateTime currentDate = DateTime.Now;
            string formattedDate = currentDate.ToString("dd/MM/yyyy");

            ViewBag.CurrentDate = formattedDate;
            List<string> PrintedDate = new List<string>();
            List<string> PostingDate = new List<string>();

           
            //table C
            foreach (var logtag in JobList)
            {
                

                Debug.WriteLine("LogTagNo : " + logtag);
                //SqlCommand TableC = new SqlCommand("SELECT DISTINCT JobAuditTrailDetail.LogTagNo, SUM(CONVERT(INT, JobAuditTrailDetail.PageQty)), SUM(CONVERT(INT,JobAuditTrailDetail.ImpQty)), " +
                //    "SUM(CONVERT(INT,JobAuditTrailDetail.AccQty)),CONVERT(VARCHAR, CAST(JobAuditTrailDetail.RevStrtDateOn AS DATE), 3), CONVERT(VARCHAR, CONVERT(DATE, JobAuditTrailDetail.ProcessDate, 105), 3)," +
                //    "JobAuditTrailDetail.RevStrtTime, CONVERT(VARCHAR, CAST(MAX(PostingManifest.PostingDateOn) AS DATE), 3) FROM JobAuditTrailDetail FULL JOIN PostingManifest ON JobAuditTrailDetail.LogTagNo=PostingManifest.LogTagNo " +
                //    "WHERE JobAuditTrailDetail.LogTagNo = @LogTagNoC GROUP BY JobAuditTrailDetail.LogTagNo,JobAuditTrailDetail.RevStrtDateOn,JobAuditTrailDetail.RevStrtTime,JobAuditTrailDetail.ProcessDate", cn);

                SqlCommand TableC = new SqlCommand(@" SELECT DISTINCT JobAuditTrailDetail.LogTagNo,CONVERT(VARCHAR, CAST(JobAuditTrailDetail.RevStrtDateOn AS DATE), 3), CONVERT(VARCHAR, CONVERT(DATE, JobAuditTrailDetail.ProcessDate, 105), 3),
                    MIN(JobAuditTrailDetail.RevStrtTime), CONVERT(VARCHAR, CAST(MAX(Hist_ProductionSlip.StartDateOn) AS DATE), 3) FROM JobAuditTrailDetail FULL JOIN Hist_ProductionSlip ON Hist_ProductionSlip.LogTagNo=JobAuditTrailDetail.LogTagNo
                    WHERE JobAuditTrailDetail.LogTagNo = @LogTagNoC GROUP BY JobAuditTrailDetail.LogTagNo,JobAuditTrailDetail.RevStrtDateOn,JobAuditTrailDetail.ProcessDate", cn);
                TableC.Parameters.AddWithValue("@LogTagNoC", logtag);

                //SqlCommand TableC = new SqlCommand(@"SELECT JobAuditTrailDetail.LogTagNo,CONVERT(VARCHAR, CAST(MAX(JobAuditTrailDetail.RevStrtDateOn) AS DATE), 3), CONVERT(VARCHAR, CONVERT(DATE, MAX(JobAuditTrailDetail.ProcessDate), 105), 3),
                //    MAX(JobAuditTrailDetail.RevStrtTime), CONVERT(VARCHAR, CAST(MAX(Hist_ProductionSlip.StartDateOn) AS DATE), 3) FROM JobAuditTrailDetail INNER JOIN Hist_ProductionSlip ON Hist_ProductionSlip.LogTagNo=JobAuditTrailDetail.LogTagNo
                //    WHERE JobAuditTrailDetail.LogTagNo = 'PPAA00863' GROUP BY JobAuditTrailDetail.LogTagNo", cn);
                //TableC.Parameters.AddWithValue("@LogTagNoC", logtag);
                SqlDataReader rmTableC = TableC.ExecuteReader();

                while (rmTableC.Read())
                {
                    JobAuditTrailDetail model = new JobAuditTrailDetail();
                    {
                        model.LogTagNo = rmTableC.GetString(0);
                        List<int> AIPBatch = getAIPBatch(logtag);
                        model.PageQty = AIPBatch[0].ToString();
                        model.ImpQty = AIPBatch[1].ToString();
                        model.AccQty = AIPBatch[2].ToString();
                        if (!rmTableC.IsDBNull(1))
                        {
                            model.RevStrtDateOnTxt = rmTableC.GetString(1);

                        }
                        else
                        {
                            model.RevStrtDateOnTxt = "-";

                        }

                        if (!rmTableC.IsDBNull(2))
                        {
                            model.RevStrtTime = rmTableC.GetString(2);

                        }
                        else
                        {
                            model.RevStrtTime = "-";

                        }

                        if (!rmTableC.IsDBNull(3))
                        {
                            model.ProcessDateStr = rmTableC.GetString(3);

                        }
                        else
                        {
                            model.ProcessDateStr = "-";

                        }

                        if (!rmTableC.IsDBNull(4))
                        {
                            model.PrintSlip = rmTableC.GetString(4);

                        }
                        else
                        {
                            model.PrintSlip = "-";

                        }

                        model.PlanDatePostOnTxt = getMPRPostingDate(rmTableC.GetString(0));

                        //if (!rmTableC.IsDBNull(8))
                        //{
                        //    model.PlanDatePostOnTxt = rmTableC.GetString(8);

                        //}
                        //else
                        //{
                        //    model.PlanDatePostOnTxt = "-";

                        //}
                    }

                    LogTagList.Add(model);
                }


                //CUSTOMER NAME
                SqlCommand cmdProduct = new SqlCommand(@"SELECT TOP(1) Customer_Name, ProductName FROM JobAuditTrailDetail WHERE LogTagNo = @ProductName1", cn);
                cmdProduct.Parameters.AddWithValue("@ProductName1", logtag);
                SqlDataReader rmProduct = cmdProduct.ExecuteReader();

                if (rmProduct.HasRows)
                {
                    while (rmProduct.Read())
                    {
                        if (!rmProduct.IsDBNull(0))
                        {
                            ViewBag.Customer_Name = rmProduct.GetString(0);
                        }

                        if (!rmProduct.IsDBNull(0))
                        {
                            ViewBag.ProductName = rmProduct.GetString(1);
                        }
                    }
                }

                SqlCommand cmdTableC2 = new SqlCommand("SELECT CONVERT(VARCHAR, CAST(A.StartDateOn AS DATE), 3), CONVERT(VARCHAR, CAST(B.PostingDateOn AS DATE), 3) FROM ProductionSlip AS A INNER JOIN PostingManifest AS B ON A.LogTagNo=B.LogTagNo WHERE A.LogTagNo = @LogTagNoTableC ", cn);
                cmdTableC2.Parameters.AddWithValue("@LogTagNoTableC", logtag);
                SqlDataReader rmTableC2 = cmdTableC2.ExecuteReader();

                while (rmTableC2.Read())
                {
                    if (!rmTableC2.IsDBNull(0))
                    {
                        PrintedDate.Add(rmTableC.GetString(0));
                    }
                    else
                    {
                        PrintedDate.Add("");
                    }

                    if (!rmTableC2.IsDBNull(1))
                    {
                        PostingDate.Add(rmTableC.GetString(1));
                    }
                    else
                    {
                        PostingDate.Add("");
                    }
                }
            }

            ViewBag.PrintedDate = PrintedDate;
            ViewBag.PostingDate = PostingDate;


            //foreach (var x in LogTagList)
            //{
            //    Debug.WriteLine("LogTagNo : " + x.LogTagNo);
            //    Debug.WriteLine("PageQty : " + x.PageQty);
            //    Debug.WriteLine("ImpQty : " + x.ImpQty);
            //    Debug.WriteLine("AccQty : " + x.AccQty);
            //    Debug.WriteLine("================================");

            //}

            SqlCommand LogTagSum = new SqlCommand("SELECT SUM(CAST(PageQty AS INT)), SUM(CAST(ImpQty AS INT)), SUM(CAST(AccQty AS INT)) FROM JobAuditTrailDetail WHERE JobSheetNo=@JobSheetNoSum", cn);
            LogTagSum.Parameters.AddWithValue("@JobSheetNoSum", JobSheetNo);
            SqlDataReader rmSum = LogTagSum.ExecuteReader();

            while (rmSum.Read())
            {
                ViewBag.SumPage = rmSum.GetInt32(0);
                ViewBag.SumImp = rmSum.GetInt32(1);
                ViewBag.SumAcc = rmSum.GetInt32(2);

                PageQty = rmSum.GetInt32(0);
            }

            rmSum.Close();

            //Table D

            int OverseaSum = 0;
            int CourierSum = 0;
            int Re_turnSum = 0;
            int PO_BOXSum = 0;
            int InsertMMPSum = 0;
            int SumLocal = 0;



            foreach (var logtag in JobList)
            {
                SqlCommand TableD = new SqlCommand("SELECT Oversea, Courier, Re_turn, PO_BOX, Ins_Material, InsertMMP, Local FROM PostingManifest WHERE LogTagNo=@LogTagPosting", cn);
                TableD.Parameters.AddWithValue("@LogTagPosting", logtag);
                SqlDataReader rmPosting = TableD.ExecuteReader();

                while (rmPosting.Read())
                {
                    string OverseasStr = "";
                    string CourierStr = "";
                    string Re_turnStr = "";
                    string PO_BOXStr = "";
                    string LocalStr = "";
                    //string Ins_MaterialStr = rmPosting.GetString(4);
                    string InsertMMPStr = "";

                    if(!rmPosting.IsDBNull(0))
                    {
                        OverseasStr = rmPosting.GetString(0);
                    }
                    else
                    {
                        OverseasStr = "0";

                    }

                    if (!rmPosting.IsDBNull(1))
                    {
                        CourierStr = rmPosting.GetString(1);
                    }
                    else
                    {
                        CourierStr = "0";

                    }

                    if (!rmPosting.IsDBNull(2))
                    {
                        Re_turnStr = rmPosting.GetString(2);
                    }
                    else
                    {
                        Re_turnStr = "0";

                    }

                    if (!rmPosting.IsDBNull(3))
                    {
                        PO_BOXStr = rmPosting.GetString(3);
                    }
                    else
                    {
                        PO_BOXStr = "0";

                    }

                    if (!rmPosting.IsDBNull(5))
                    {
                        InsertMMPStr = rmPosting.GetString(5);
                    }
                    else
                    {
                        InsertMMPStr = "0";

                    }

                    if (!rmPosting.IsDBNull(6))
                    {
                        LocalStr = rmPosting.GetString(6);
                    }
                    else
                    {
                        LocalStr = "0";

                    }

                    int Oversea = Int32.Parse(OverseasStr);
                    int Courier = Int32.Parse(CourierStr);
                    int Re_turn = Int32.Parse(Re_turnStr);
                    int PO_BOX = Int32.Parse(PO_BOXStr);
                    //int Ins_Material = Int32.Parse(Ins_MaterialStr);
                    int InsertMMP = Int32.Parse(InsertMMPStr);
                    int LocalInt = Int32.Parse(LocalStr);



                    PageQty = PageQty - Oversea - Courier - Re_turn - PO_BOX - InsertMMP;

                    OverseaSum += Oversea;
                    CourierSum += Courier;
                    Re_turnSum += Re_turn;
                    PO_BOXSum += PO_BOX;
                    InsertMMPSum += InsertMMP;
                    SumLocal += LocalInt;

                    ViewBag.Oversea = OverseaSum;
                    ViewBag.Courier = CourierSum;
                    ViewBag.Return = Re_turnSum;
                    ViewBag.PO_BOX = PO_BOXSum;
                    //ViewBag.Ins_Material = Ins_Material;
                    ViewBag.InsertMMP = InsertMMPSum;
                    ViewBag.Local = SumLocal;
                }
            }


            //table E

            double TotalChargesTableE = 0;
            List<string> MaterialType = new List<string>();
            List<string> MatDesc = new List<string>();
            List<string> MatRate = new List<string>();
            List<double> TotalCharges = new List<double>();
            List<string> MatVol = new List<string>();

            //Jobsheetno actually is logtagno for this case here
            SqlCommand TableE = new SqlCommand("SELECT MaterialType, Material_Description, Rate_Per_Piece, Total_Charges, Volume_Usage FROM MaterialDescriptionMail WHERE LogTagNo =@LogTagNoTableE", cn);
            TableE.Parameters.AddWithValue("@LogTagNoTableE", BatchId);
            SqlDataReader rmTableE = TableE.ExecuteReader();

            while (rmTableE.Read())
            {
                if(!rmTableE.IsDBNull(0))
                {
                    MaterialType.Add(rmTableE.GetString(0));

                }

                if (!rmTableE.IsDBNull(1))
                {
                    MatDesc.Add(rmTableE.GetString(1));
                }

                if (!rmTableE.IsDBNull(2))
                {
                    MatRate.Add(rmTableE.GetString(2));
                }

                if (!rmTableE.IsDBNull(3))
                {
                    TotalCharges.Add(double.Parse(rmTableE.GetString(3)));

                    TotalChargesTableE = double.Parse(rmTableE.GetString(3));
                }

                if (!rmTableE.IsDBNull(4))
                {
                    MatVol.Add(rmTableE.GetString(4));
                }

                //ViewBag.MaterialType = rmTableE.GetString(0);
                //ViewBag.MaterialDescription = rmTableE.GetString(1);
                //ViewBag.Rate = rmTableE.GetString(2);
                //ViewBag.TotalCharges = rmTableE.GetString(3);
            }

            ViewBag.MaterialType = MaterialType;
            ViewBag.MatDesc = MatDesc;
            ViewBag.MatRate = MatRate;
            ViewBag.TotalCharges = TotalCharges;
            ViewBag.MatVol = MatVol;

            //Table F Content Check

            int postingCounter = 2;
            int InsertionCounter = 4;
            int BrochureCounter = 5;
            int PostageCounter = 8;
            int ImprestCounter = 8;

            List<string> SCColumn = new List<string>();

            //posting
            for (int counter = 1; counter <= postingCounter; counter++)
            {
                SqlCommand PostingCheck = new SqlCommand("SELECT Posting" + counter + "Charges FROM BillingMPR WHERE JobSheetNo=@BatchIdPosting", cn);
                PostingCheck.Parameters.AddWithValue("@BatchIdPosting", BatchId);
                SqlDataReader rmPostCheck = PostingCheck.ExecuteReader();

                while (rmPostCheck.Read())
                {
                    //if (rmPostCheck.HasRows)
                    if (!rmPostCheck.IsDBNull(0))
                    {
                        SCColumn.Add("Posting" + counter);
                    }
                }

                rmPostCheck.Close();
            }

            //insertion

            for (int counter = 1; counter <= InsertionCounter; counter++)
            {
                SqlCommand InsertionCheck = new SqlCommand("SELECT Insertion" + counter + "Charges FROM BillingMPR WHERE JobSheetNo=@BatchIdInsertion", cn);
                InsertionCheck.Parameters.AddWithValue("@BatchIdInsertion", BatchId);
                SqlDataReader rmInsertionCheck = InsertionCheck.ExecuteReader();

                while (rmInsertionCheck.Read())
                {
                    if (!rmInsertionCheck.IsDBNull(0))
                    {
                        SCColumn.Add("Insertion" + counter);
                    }
                }

                rmInsertionCheck.Close();
            }

            //mix
            SqlCommand MixCheck = new SqlCommand("SELECT MixCharges FROM BillingMPR WHERE JobSheetNo=@BatchIdMix", cn);
            MixCheck.Parameters.AddWithValue("@BatchIdMix", BatchId);
            SqlDataReader rmMixCheck = MixCheck.ExecuteReader();

            while (rmMixCheck.Read())
            {
                if (!rmMixCheck.IsDBNull(0))
                {
                    SCColumn.Add("Mix");
                }
            }

            rmMixCheck.Close();

            //statement
            SqlCommand StatementCheck = new SqlCommand("SELECT StatementCharges FROM BillingMPR WHERE JobSheetNo=@BatchIdStatement", cn);
            StatementCheck.Parameters.AddWithValue("@BatchIdStatement", BatchId);
            SqlDataReader rmStatementCheck = StatementCheck.ExecuteReader();

            while (rmStatementCheck.Read())
            {
                if (!rmStatementCheck.IsDBNull(0))
                {
                    SCColumn.Add("Statement");
                }
            }

            rmStatementCheck.Close();

            //brochure
            for (int counter = 1; counter <= BrochureCounter; counter++)
            {
                SqlCommand BrochureCheck = new SqlCommand("SELECT Brochure" + counter + "Charges FROM BillingMPR WHERE JobSheetNo=@BatchIdBrochure", cn);
                BrochureCheck.Parameters.AddWithValue("@BatchIdBrochure", BatchId);
                SqlDataReader rmBrochureCheck = BrochureCheck.ExecuteReader();

                while (rmBrochureCheck.Read())
                {
                    if (!rmBrochureCheck.IsDBNull(0))
                    {
                        SCColumn.Add("Brochure" + counter);
                    }
                }

                rmBrochureCheck.Close();
            }

            //MB5K until Discount

            SqlCommand BulkCheck = new SqlCommand("SELECT MB5KCharges, InsertingCharges, HandlingCharges, SealingCharges, TearingCharges, FoldingCharges, StockingCharges, LabellingCharges, SelfMailerCharges,SelfMaterialCharges, " +
                "OvertimeCharges, CDArchivingCharges, CourierCharges, DeliveryCharges, MatchingCharges, LabellingRMCharges, IPDSCharges, ProgrammingCharges, ReturnMailCharges, RetainerCharges, RubberStampingCharges, GlueingCharges, " +
                "CuttingCharges, MergingCharges, DiscountCharges, DataSFTPCharges FROM BillingMPR WHERE JobSheetNo=@BatchIdBulk", cn);
            BulkCheck.Parameters.AddWithValue("@BatchIdBulk", BatchId);
            SqlDataReader rmBulkCheck = BulkCheck.ExecuteReader();

            while (rmBulkCheck.Read())
            {
                if (!rmBulkCheck.IsDBNull(0))
                {
                    SCColumn.Add("MB5K");
                }
                if (!rmBulkCheck.IsDBNull(1))
                {
                    SCColumn.Add("Inserting");
                }
                if (!rmBulkCheck.IsDBNull(2))
                {
                    SCColumn.Add("Handling");
                }
                if (!rmBulkCheck.IsDBNull(3))
                {
                    SCColumn.Add("Sealing");
                }
                if (!rmBulkCheck.IsDBNull(4))
                {
                    SCColumn.Add("Tearing");
                }
                if (!rmBulkCheck.IsDBNull(5))
                {
                    SCColumn.Add("Folding");
                }
                if (!rmBulkCheck.IsDBNull(6))
                {
                    SCColumn.Add("Sticking");
                }
                if (!rmBulkCheck.IsDBNull(7))
                {
                    SCColumn.Add("Labelling");
                }
                if (!rmBulkCheck.IsDBNull(8))
                {
                    SCColumn.Add("SelfMailer");
                }
                if (!rmBulkCheck.IsDBNull(9))
                {
                    SCColumn.Add("SelfMaterial");
                }
                if (!rmBulkCheck.IsDBNull(10))
                {
                    SCColumn.Add("OverTime");
                }
                if (!rmBulkCheck.IsDBNull(11))
                {
                    SCColumn.Add("CDArchiving");
                }
                if (!rmBulkCheck.IsDBNull(12))
                {
                    SCColumn.Add("Courier");
                }
                if (!rmBulkCheck.IsDBNull(13))
                {
                    SCColumn.Add("Delivery");
                }
                if (!rmBulkCheck.IsDBNull(14))
                {
                    SCColumn.Add("Matching");
                }
                if (!rmBulkCheck.IsDBNull(15))
                {
                    SCColumn.Add("LabellingRM");
                }
                if (!rmBulkCheck.IsDBNull(16))
                {
                    SCColumn.Add("IPDS");
                }
                if (!rmBulkCheck.IsDBNull(17))
                {
                    SCColumn.Add("Programming");
                }
                if (!rmBulkCheck.IsDBNull(18))
                {
                    SCColumn.Add("ReturnMail");
                }
                if (!rmBulkCheck.IsDBNull(19))
                {
                    SCColumn.Add("Retainer");
                }
                if (!rmBulkCheck.IsDBNull(20))
                {
                    SCColumn.Add("RubberStamping");
                }
                if (!rmBulkCheck.IsDBNull(21))
                {
                    SCColumn.Add("Glueing");
                }
                if (!rmBulkCheck.IsDBNull(22))
                {
                    SCColumn.Add("Cutting");
                }
                if (!rmBulkCheck.IsDBNull(23))
                {
                    SCColumn.Add("Merging");
                }
                if (!rmBulkCheck.IsDBNull(24))
                {
                    SCColumn.Add("Discount");
                }
                if (!rmBulkCheck.IsDBNull(25))
                {
                    SCColumn.Add("DataSFTP");
                }

            }

            rmBulkCheck.Close();

            //postage and imprest
            for (int counter = 1; counter <= PostageCounter; counter++)
            {
                SqlCommand PostImpCheck = new SqlCommand("SELECT Postage" + counter + "Charges, Imprest" + counter + "Charges FROM BillingMPR WHERE JobSheetNo=@BatchIdPostImp", cn);
                PostImpCheck.Parameters.AddWithValue("@BatchIdPostImp", BatchId);
                SqlDataReader rmPostImpCheck = PostImpCheck.ExecuteReader();

                while (rmPostImpCheck.Read())
                {
                    if (!rmPostImpCheck.IsDBNull(0))
                    {
                        SCColumn.Add("Postage" + counter);
                    }

                    if (!rmPostImpCheck.IsDBNull(1))
                    {
                        SCColumn.Add("Imprest" + counter);
                    }
                }

                rmPostImpCheck.Close();
            }

            SqlCommand BulkCheck2 = new SqlCommand("SELECT RebateCharges, FrankingCharges, Franking10Charges, AirmailCharges, SporeCharges, TLetterCharges, " +
                "NPCCharges, Mix10Charges, RegisteredMailsCharges, ImprestRMCharges, RegisteredMails2Charges, ImprestRM2Charges FROM BillingMPR WHERE JobSheetNo=@JSBC2", cn);
            BulkCheck2.Parameters.AddWithValue("@JSBC2", BatchId);
            SqlDataReader rmBC2 = BulkCheck2.ExecuteReader();

            while (rmBC2.Read())
            {
                if (!rmBC2.IsDBNull(0))
                {
                    SCColumn.Add("Rebate");
                }
                if (!rmBC2.IsDBNull(1))
                {
                    SCColumn.Add("Franking");
                }
                if (!rmBC2.IsDBNull(2))
                {
                    SCColumn.Add("Franking10");
                }
                if (!rmBC2.IsDBNull(3))
                {
                    SCColumn.Add("Airmail");
                }
                if (!rmBC2.IsDBNull(4))
                {
                    SCColumn.Add("Spore");
                }
                if (!rmBC2.IsDBNull(5))
                {
                    SCColumn.Add("TLetter");
                }
                if (!rmBC2.IsDBNull(6))
                {
                    SCColumn.Add("NPC");
                }
                if (!rmBC2.IsDBNull(7))
                {
                    SCColumn.Add("Mix10");
                }
                if (!rmBC2.IsDBNull(8))
                {
                    SCColumn.Add("RegisteredMails");
                }
                if (!rmBC2.IsDBNull(9))
                {
                    SCColumn.Add("ImprestRM");
                }
                if (!rmBC2.IsDBNull(10))
                {
                    SCColumn.Add("RegisteredMails2");
                }
                if (!rmBC2.IsDBNull(11))
                {
                    SCColumn.Add("ImprestRM2");
                }
            }

            List<int> Vol = new List<int>();
            List<double> Charges = new List<double>();
            List<string> Rate = new List<string>();
            List<string> Desc = new List<string>();
            List<string> ProcessName = new List<string>();
            //table f
            foreach (var item in SCColumn)
            {
                Debug.WriteLine(item);
                SqlCommand TableF = new SqlCommand("SELECT " + item + "Vol, " + item + "Charges, " + item + "Rate, " + item + "Desc FROM BillingMPR WHERE JobSheetNo=@JSTF", cn);
                TableF.Parameters.AddWithValue("@JSTF", BatchId);
                SqlDataReader rmTableF = TableF.ExecuteReader();

                while (rmTableF.Read())
                {
                    if (!rmTableF.IsDBNull(0))
                    {
                        Vol.Add(Int32.Parse(rmTableF.GetString(0)));
                    }


                    if (!rmTableF.IsDBNull(1))
                    {
                        Charges.Add(double.Parse(rmTableF.GetString(1)));
                    }

                    if (!rmTableF.IsDBNull(2))
                    {
                        Rate.Add(rmTableF.GetString(2));
                    }

                    if (!rmTableF.IsDBNull(3))
                    {
                        Desc.Add(rmTableF.GetString(3));
                    }
                    else
                    {
                        Desc.Add("-");
                    }

                    ProcessName.Add(item);
                }
            }

            ViewBag.VolTableF = Vol;
            ViewBag.VolSumTableF = Vol.Sum();
            ViewBag.ChargesTableF = Charges;
            ViewBag.ChargesSumTableF = Charges.Sum();
            ViewBag.RateTableF = Rate;
            ViewBag.DescTableF = Desc;
            ViewBag.ProcessName = ProcessName;
            int ItemCount = Charges.Count;
            ViewBag.ItemCountTableF = ItemCount;
            ViewBag.EFSum = Charges.Sum() + TotalChargesTableE;


            //Debug.WriteLine("item count Vol : " + Vol.Count);
            //Debug.WriteLine("item count Charges : " + Charges.Count);
            //Debug.WriteLine("item count Rate : " + Rate.Count);
            //Debug.WriteLine("item count Desc : " + Desc.Count);
            //Debug.WriteLine("ViewBag.ItemCount Value : " + ItemCount);


            cn.Close();
        }
        return new Rotativa.ViewAsPdf("ViewMPRBatch", LogTagList)
        {
            // FileName = flightPlan.ListingItemDetailsModel.FlightDetails + ".pdf",
            FileName = "MPRCombine.pdf",
            PageMargins = new Rotativa.Options.Margins(12, 12, 2, 12),
            //PageOrientation = Rotativa.Options.Orientation.Landscape,
            PageOrientation = Rotativa.Options.Orientation.Portrait,
            PageSize = Rotativa.Options.Size.A4,
            //PageWidth = 210,
            //PageHeight = 297
        };


        //return View(LogTagList);
    }


    [HttpPost]
    public ActionResult MatDesc(string MaterialType)
    {
        Debug.WriteLine("MaterialType Value : " + MaterialType);
        String temp = "0";
        int _bildd = 1;
        List<string> Description = new List<string>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();
            command.CommandText = @"SELECT DISTINCT ProductType FROM [dbo].[MaterialCharges]                          
                                      WHERE MaterialType = @MaterialType";
            command.Parameters.AddWithValue("@MaterialType", MaterialType.ToString());

            //
            var reader = command.ExecuteReader();

            while (reader.Read())
            {
                if (!reader.IsDBNull(0))
                {
                    Debug.WriteLine("DB Result : " + reader.GetString(0));

                    int i = _bildd++;
                    if (i == 1)
                    {
                        Description.Add("Please Select");
                        Description.Add(reader.GetString(0));

                    }
                    else
                    {
                        Description.Add(reader.GetString(0));
                    }
                    ViewBag.MatType = reader.GetString(0);
                    temp = reader.GetString(0);
                }
                else
                {
                    Description.Add("Please Select");
                }

            }



            foreach (var x in Description)
            {
                Debug.WriteLine("Description : " + x);
            }

            cn.Close();
        }
        return Json(new { data = Description });
    }

    [HttpPost]
    public ActionResult MatRate(string MaterialDescription, string MaterialType)
    {
        Debug.WriteLine("MaterialDescription Value : " + MaterialDescription);
        Debug.WriteLine("MaterialType Value : " + MaterialType);

        if (string.IsNullOrEmpty(MaterialDescription))
        {
            MaterialDescription = " ";
        }

        if (string.IsNullOrEmpty(MaterialType))
        {
            MaterialType = " ";
        }

        String temp = "0";
        int _bildd = 1;
        string Rate = "";
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        using (SqlCommand command = new SqlCommand("", cn))
        {
            cn.Open();

            try
            {
                command.CommandText = @"SELECT Rate FROM [dbo].[MaterialCharges]                          
                                      WHERE Description = @MaterialDescription AND MaterialType=@MatType";
                command.Parameters.AddWithValue("@MaterialDescription", MaterialDescription.ToString());
                command.Parameters.AddWithValue("@MatType", MaterialType.ToString());


                //
                var reader = command.ExecuteReader();

                while (reader.Read())
                {
                    if (!reader.IsDBNull(0))
                    {
                        Debug.WriteLine("DB Result : " + reader.GetString(0));

                        int i = _bildd++;
                        if (i == 1)
                        {
                            Rate = reader.GetString(0);

                        }
                        else
                        {
                            Rate = "";
                        }
                        ViewBag.MatType = reader.GetString(0);
                        temp = reader.GetString(0);
                    }
                    else
                    {
                        Rate = "";
                    }

                }

                foreach (var x in Rate)
                {
                    Debug.WriteLine("Rate : " + x);
                }
            }
            catch
            {
                Rate = "";
            }


            cn.Close();
        }
        return Json(new { data = Rate });
    }

    public ActionResult SubmitComplete(string BatchId, string LogTagNo)
    {
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        {
            cn.Open();
            if (!string.IsNullOrEmpty(BatchId))
            {
                List<string> LogTagList = new List<string>();
                SqlCommand cmdSubmit = new SqlCommand("UPDATE JobBatch Set Status='COMPLETED' WHERE BatchId=@BatchId", cn);
                cmdSubmit.Parameters.AddWithValue("@BatchId", BatchId);
                cmdSubmit.ExecuteNonQuery();

                SqlCommand cmdSubmit2 = new SqlCommand("SELECT LogTagNo FROM JobBatch WHERE BatchId=@BatchId2", cn);
                cmdSubmit2.Parameters.AddWithValue("@BatchId2", BatchId);
                SqlDataReader rmSubmit2 = cmdSubmit2.ExecuteReader();

                if(rmSubmit2.HasRows)
                {
                    while(rmSubmit2.Read())
                    {
                        LogTagList.Add(rmSubmit2.GetString(0));
                    }

                }

                foreach(var logtag in LogTagList)
                {
                    SqlCommand cmdSubmit3 = new SqlCommand("UPDATE JobAuditTrailDetail SET Status='COMPLETED' WHERE LogTagNo=@LogTagNoUpdate", cn);
                    cmdSubmit3.Parameters.AddWithValue("@LogTagNoUpdate", logtag);
                    cmdSubmit3.ExecuteNonQuery();
                }


                //SqlCommand cmdSubmit2 = new SqlCommand("UPDATE JobAuditTrailDetail Set Status='COMPLETED' WHERE LogTagNo=@BatchId", cn);
                //cmdSubmit2.Parameters.AddWithValue("@BatchId", BatchId);
                //cmdSubmit2.ExecuteNonQuery();
            }
            else
            {
                SqlCommand cmdSubmit = new SqlCommand("UPDATE JobAuditTrailDetail Set Status='COMPLETED' WHERE LogTagNo=@LogTagNo", cn);
                cmdSubmit.Parameters.AddWithValue("@LogTagNo", LogTagNo);
                cmdSubmit.ExecuteNonQuery();
            }

            cn.Close();

        }

        if (BatchId != null)
        {
            return RedirectToAction("ManageBatch", "Finance");

        }
        else
        {
            return RedirectToAction("ManageFin", "Finance");

        }
    }

    public ActionResult ManageMailProductionMasterComplete(string set, string ProductName)
    {
        List<JobBatch> Batch = new List<JobBatch>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        {
            cn.Open();

            if (set == "search")
            {
                int _bil = 1;

                SqlCommand cmd = new SqlCommand("SELECT DISTINCT JobBatch.BatchId,JobBatch.Status, JobAuditTrailDetail.Customer_Name, JobAuditTrailDetail.ProductName, JobAuditTrailDetail.JobSheetNo  FROM JobBatch INNER JOIN JobAuditTrailDetail ON JobBatch.LogTagNo=JobAuditTrailDetail.LogTagNo WHERE JobBatch.Status='COMPLETED' AND (JobAuditTrailDetail.ProductName LIKE @ProductNameSearch OR JobBatch.BatchId LIKE @ProductNameSearch OR JobAuditTrailDetail.Customer_Name LIKE @ProductNameSearch)", cn);
                cmd.Parameters.AddWithValue("@ProductNameSearch", "%" + ProductName + "%");
                SqlDataReader rm = cmd.ExecuteReader();

                if (rm.HasRows)
                {
                    while (rm.Read())
                    {
                        JobBatch model = new JobBatch();
                        {
                            model.Bil = _bil++;
                            if (!rm.IsDBNull(0))
                            {
                                model.BatchId = rm.GetString(0);

                            }

                            if (!rm.IsDBNull(2))
                            {
                                model.Customer_Name = rm.GetString(2);

                            }

                            if (!rm.IsDBNull(3))
                            {
                                model.ProductName = rm.GetString(3);

                            }

                            if (!rm.IsDBNull(4))
                            {
                                model.JobSheetNo = rm.GetString(4);

                            }

                        }
                        Batch.Add(model);
                    }
                }


            }
            else
            {
                int _bil = 1;

                SqlCommand cmd = new SqlCommand("SELECT DISTINCT JobBatch.BatchId,JobBatch.Status, JobAuditTrailDetail.Customer_Name, JobAuditTrailDetail.ProductName,JobAuditTrailDetail.JobSheetNo FROM JobBatch INNER JOIN JobAuditTrailDetail ON JobBatch.LogTagNo=JobAuditTrailDetail.LogTagNo WHERE JobBatch.Status='COMPLETED'", cn);
                SqlDataReader rm = cmd.ExecuteReader();

                while (rm.Read())
                {
                    JobBatch model = new JobBatch();
                    {
                        model.Bil = _bil++;
                        if (!rm.IsDBNull(0))
                        {
                            model.BatchId = rm.GetString(0);

                        }

                        if (!rm.IsDBNull(2))
                        {
                            model.Customer_Name = rm.GetString(2);

                        }

                        if (!rm.IsDBNull(3))
                        {
                            model.ProductName = rm.GetString(3);

                        }

                        if (!rm.IsDBNull(4))
                        {
                            model.JobSheetNo = rm.GetString(4);

                        }
                    }
                    Batch.Add(model);
                }

            }

            cn.Close();
        }

        return View(Batch);
    }

    public List<string> TotalAll(string LogTagNo)
    {
        Debug.WriteLine("LogTagNo : " + LogTagNo);
        List<string> TotalAccImpPage = new List<string>();
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        {
            cn.Open();
            SqlCommand cmd1 = new SqlCommand("SELECT SUM(CAST(AccQty AS INT)) as A, SUM(CAST(PageQty AS INT)) AS B, SUM(CAST(ImpQty AS INT)) AS C FROM JobAuditTrailDetail WHERE LogTagNo = @LogTagNo1", cn);
            cmd1.Parameters.AddWithValue("@LogTagNo1", LogTagNo);
            SqlDataReader rm1 = cmd1.ExecuteReader();

            while (rm1.Read())
            {
                if (!rm1.IsDBNull(0))
                {
                    TotalAccImpPage.Add(rm1["A"].ToString());
                }
                else
                {
                    TotalAccImpPage.Add("0");
                }

                if (!rm1.IsDBNull(1))
                {
                    TotalAccImpPage.Add(rm1["B"].ToString());
                }
                else
                {
                    TotalAccImpPage.Add("0");
                }

                if (!rm1.IsDBNull(2))
                {
                    TotalAccImpPage.Add(rm1["C"].ToString());
                }
                else
                {
                    TotalAccImpPage.Add("0");
                }
            }

            int i = 0;
            foreach (var x in TotalAccImpPage)
            {
                Debug.WriteLine("item " + i + " : " + x);
                i++;
            }

            cn.Close();

        }


        return TotalAccImpPage;
    }

    public ActionResult DeleteMaterial(string Id, string LogTagNo, string JobSheetNo, string BatchID)
    {
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        {
            cn.Open();

            SqlCommand cmd = new SqlCommand("DELETE MaterialDescriptionMail WHERE Id=@Id", cn);
            cmd.Parameters.AddWithValue("@Id", Id);
            cmd.ExecuteNonQuery();

            cn.Close();
        }
        
        if(!string.IsNullOrEmpty(BatchID))
        {
            return RedirectToAction("CreateMPR", "Finance", new { JobSheetNo = JobSheetNo, BatchID=BatchID });
        }
        else
        {
            return RedirectToAction("CreateMPR", "Finance", new { LogTagNo = LogTagNo, JobSheetNo = JobSheetNo });

        }

    }


    public ActionResult DeleteJobBatch(string BatchId)
    {
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ToString()))
        {
            cn.Open();

            SqlCommand cmd = new SqlCommand(@"DELETE JobBatch WHERE BatchId = @BatchId", cn);
            cmd.Parameters.AddWithValue("@BatchId", BatchId);
            cmd.ExecuteNonQuery();

            cn.Close();
        }

        return RedirectToAction("ManageBatch", "Finance");
        
    }

    public ActionResult BackToPosting(string LogTagNo, string set, string from, string remark)
    {
        Debug.WriteLine("First From : " + from);
        using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString.ToString()))
        {
            cn.Open();

            SqlCommand cmd = new SqlCommand("SELECT ProductName FROM JobAuditTrailDetail WHERE LogTagNo = @LogTagNo", cn);
            cmd.Parameters.AddWithValue("@logTagNo", LogTagNo);
            SqlDataReader rm = cmd.ExecuteReader();

            while (rm.Read())
            {
                ViewBag.ProductName = rm.GetString(0);
            }

            ViewBag.LogTagNo = LogTagNo;
            ViewBag.from = from;

            cn.Close();


        }

        if(set=="BackTo")
        {
            using (SqlConnection cn = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString.ToString()))
            {
                cn.Open();

                SqlCommand cmd1 = new SqlCommand(@"UPDATE JobAuditTrailDetail SET Status='POSTING', RemarkPosting=@remark WHERE LogTagNo=@LogTagNo",cn);
                cmd1.Parameters.AddWithValue("@LogTagNo", LogTagNo);
                cmd1.Parameters.AddWithValue("@remark", remark);

                cmd1.ExecuteNonQuery();

                cn.Close();

                return RedirectToAction("ManageFin", "Finance");
            }
        }

        return View();
    }



}



